This is gnutls.info, produced by makeinfo version 4.13 from gnutls.texi.

This manual is last updated 25 November 2011 for version 3.0.9 of
GnuTLS.

Copyright (C) 2001-2011 Free Software Foundation, Inc.

     Permission is granted to copy, distribute and/or modify this
     document under the terms of the GNU Free Documentation License,
     Version 1.3 or any later version published by the Free Software
     Foundation; with no Invariant Sections, no Front-Cover Texts, and
     no Back-Cover Texts.  A copy of the license is included in the
     section entitled "GNU Free Documentation License".

INFO-DIR-SECTION Software libraries
START-INFO-DIR-ENTRY
* GnuTLS: (gnutls).		GNU Transport Layer Security Library.
END-INFO-DIR-ENTRY

INFO-DIR-SECTION System Administration
START-INFO-DIR-ENTRY
* certtool: (gnutls)Invoking certtool.	Manipulate certificates and keys.
* gnutls-serv: (gnutls)Invoking gnutls-serv.	GnuTLS test server.
* gnutls-cli: (gnutls)Invoking gnutls-cli.	GnuTLS test client.
* gnutls-cli-debug: (gnutls)Invoking gnutls-cli-debug.	GnuTLS debug client.
* psktool: (gnutls)Invoking psktool.	Simple TLS-Pre-Shared-Keys manager.
* srptool: (gnutls)Invoking srptool.	Simple SRP password tool.
END-INFO-DIR-ENTRY


File: gnutls.info,  Node: OpenPGP API,  Next: PKCS 12 API,  Prev: X509 certificate API,  Up: API reference

C.4 OpenPGP API
===============

The following functions are to be used for OpenPGP certificate
handling.  Their prototypes lie in `gnutls/openpgp.h'.

gnutls_certificate_set_openpgp_key
----------------------------------

 -- Function: int gnutls_certificate_set_openpgp_key
          (gnutls_certificate_credentials_t RES, gnutls_openpgp_crt_t
          CRT, gnutls_openpgp_privkey_t PKEY)
     RES: is a `gnutls_certificate_credentials_t' structure.

     CRT: contains an openpgp public key

     PKEY: is an openpgp private key

     * Description:* This function sets a certificate/private key pair
     in the gnutls_certificate_credentials_t structure.  This function
     may be called more than once (in case multiple keys/certificates
     exist for the server).

     Note that this function requires that the preferred key ids have
     been set and be used. See
     `gnutls_openpgp_crt_set_preferred_key_id()'.  Otherwise the master
     key will be used.

     * Returns:* On success, `GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error code is returned.

gnutls_certificate_set_openpgp_key_file
---------------------------------------

 -- Function: int gnutls_certificate_set_openpgp_key_file
          (gnutls_certificate_credentials_t RES, const char * CERTFILE,
          const char * KEYFILE, gnutls_openpgp_crt_fmt_t FORMAT)
     RES: the destination context to save the data.

     CERTFILE: the file that contains the public key.

     KEYFILE: the file that contains the secret key.

     FORMAT: the format of the keys

     * Description:* This funtion is used to load OpenPGP keys into the
     GnuTLS credentials structure. The file should contain at least one
     valid non encrypted subkey.

     * Returns:* On success, `GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

gnutls_certificate_set_openpgp_key_file2
----------------------------------------

 -- Function: int gnutls_certificate_set_openpgp_key_file2
          (gnutls_certificate_credentials_t RES, const char * CERTFILE,
          const char * KEYFILE, const char * SUBKEY_ID,
          gnutls_openpgp_crt_fmt_t FORMAT)
     RES: the destination context to save the data.

     CERTFILE: the file that contains the public key.

     KEYFILE: the file that contains the secret key.

     SUBKEY_ID: a hex encoded subkey id

     FORMAT: the format of the keys

     * Description:* This funtion is used to load OpenPGP keys into the
     GnuTLS credential structure. The file should contain at least one
     valid non encrypted subkey.

     The special keyword "auto" is also accepted as  `subkey_id'.  In
     that case the `gnutls_openpgp_crt_get_auth_subkey()' will be used
     to retrieve the subkey.

     * Returns:* On success, `GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

     * Since:* 2.4.0

gnutls_certificate_set_openpgp_key_mem
--------------------------------------

 -- Function: int gnutls_certificate_set_openpgp_key_mem
          (gnutls_certificate_credentials_t RES, const gnutls_datum_t *
          CERT, const gnutls_datum_t * KEY, gnutls_openpgp_crt_fmt_t
          FORMAT)
     RES: the destination context to save the data.

     CERT: the datum that contains the public key.

     KEY: the datum that contains the secret key.

     FORMAT: the format of the keys

     * Description:* This funtion is used to load OpenPGP keys into the
     GnuTLS credential structure. The datum should contain at least one
     valid non encrypted subkey.

     * Returns:* On success, `GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

gnutls_certificate_set_openpgp_key_mem2
---------------------------------------

 -- Function: int gnutls_certificate_set_openpgp_key_mem2
          (gnutls_certificate_credentials_t RES, const gnutls_datum_t *
          CERT, const gnutls_datum_t * KEY, const char * SUBKEY_ID,
          gnutls_openpgp_crt_fmt_t FORMAT)
     RES: the destination context to save the data.

     CERT: the datum that contains the public key.

     KEY: the datum that contains the secret key.

     SUBKEY_ID: a hex encoded subkey id

     FORMAT: the format of the keys

     * Description:* This funtion is used to load OpenPGP keys into the
     GnuTLS credentials structure. The datum should contain at least
     one valid non encrypted subkey.

     The special keyword "auto" is also accepted as  `subkey_id'.  In
     that case the `gnutls_openpgp_crt_get_auth_subkey()' will be used
     to retrieve the subkey.

     * Returns:* On success, `GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

     * Since:* 2.4.0

gnutls_certificate_set_openpgp_keyring_file
-------------------------------------------

 -- Function: int gnutls_certificate_set_openpgp_keyring_file
          (gnutls_certificate_credentials_t C, const char * FILE,
          gnutls_openpgp_crt_fmt_t FORMAT)
     C: A certificate credentials structure

     FILE: filename of the keyring.

     FORMAT: format of keyring.

     * Description:* The function is used to set keyrings that will be
     used internally by various OpenPGP functions. For example to find
     a key when it is needed for an operations. The keyring will also
     be used at the verification functions.

     * Returns:* On success, `GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

gnutls_certificate_set_openpgp_keyring_mem
------------------------------------------

 -- Function: int gnutls_certificate_set_openpgp_keyring_mem
          (gnutls_certificate_credentials_t C, const opaque * DATA,
          size_t DLEN, gnutls_openpgp_crt_fmt_t FORMAT)
     C: A certificate credentials structure

     DATA: buffer with keyring data.

     DLEN: length of data buffer.

     FORMAT: the format of the keyring

     * Description:* The function is used to set keyrings that will be
     used internally by various OpenPGP functions. For example to find
     a key when it is needed for an operations. The keyring will also
     be used at the verification functions.

     * Returns:* On success, `GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

gnutls_openpgp_crt_check_hostname
---------------------------------

 -- Function: int gnutls_openpgp_crt_check_hostname
          (gnutls_openpgp_crt_t KEY, const char * HOSTNAME)
     KEY: should contain a `gnutls_openpgp_crt_t' structure

     HOSTNAME: A null terminated string that contains a DNS name

     * Description:* This function will check if the given key's owner
     matches the given hostname. This is a basic implementation of the
     matching described in RFC2818 (HTTPS), which takes into account
     wildcards.

     * Returns:* `GNUTLS_E_SUCCESS' on success, or an error code.

gnutls_openpgp_crt_deinit
-------------------------

 -- Function: void gnutls_openpgp_crt_deinit (gnutls_openpgp_crt_t KEY)
     KEY: The structure to be initialized

     * Description:* This function will deinitialize a key structure.

gnutls_openpgp_crt_export
-------------------------

 -- Function: int gnutls_openpgp_crt_export (gnutls_openpgp_crt_t KEY,
          gnutls_openpgp_crt_fmt_t FORMAT, void * OUTPUT_DATA, size_t *
          OUTPUT_DATA_SIZE)
     KEY: Holds the key.

     FORMAT: One of gnutls_openpgp_crt_fmt_t elements.

     OUTPUT_DATA: will contain the key base64 encoded or raw

     OUTPUT_DATA_SIZE: holds the size of output_data (and will be
     replaced by the actual size of parameters)

     * Description:* This function will convert the given key to RAW or
     Base64 format.  If the buffer provided is not long enough to hold
     the output, then `GNUTLS_E_SHORT_MEMORY_BUFFER' will be returned.

     * Returns:* `GNUTLS_E_SUCCESS' on success, or an error code.

gnutls_openpgp_crt_get_auth_subkey
----------------------------------

 -- Function: int gnutls_openpgp_crt_get_auth_subkey
          (gnutls_openpgp_crt_t CRT, gnutls_openpgp_keyid_t KEYID,
          unsigned int FLAG)
     CRT: the structure that contains the OpenPGP public key.

     KEYID: the struct to save the keyid.

     FLAG: Non (0) indicates that a valid subkey is always returned.

     * Description:* Returns the 64-bit keyID of the first valid
     OpenPGP subkey marked for authentication.  If flag is non (0) and
     no authentication subkey exists, then a valid subkey will be
     returned even if it is not marked for authentication.  Returns the
     64-bit keyID of the first valid OpenPGP subkey marked for
     authentication.  If flag is non (0) and no authentication subkey
     exists, then a valid subkey will be returned even if it is not
     marked for authentication.

     * Returns:* `GNUTLS_E_SUCCESS' on success, or an error code.

gnutls_openpgp_crt_get_creation_time
------------------------------------

 -- Function: time_t gnutls_openpgp_crt_get_creation_time
          (gnutls_openpgp_crt_t KEY)
     KEY: the structure that contains the OpenPGP public key.

     * Description:* Get key creation time.

     * Returns:* the timestamp when the OpenPGP key was created.

gnutls_openpgp_crt_get_expiration_time
--------------------------------------

 -- Function: time_t gnutls_openpgp_crt_get_expiration_time
          (gnutls_openpgp_crt_t KEY)
     KEY: the structure that contains the OpenPGP public key.

     * Description:* Get key expiration time.  A value of '0' means
     that the key doesn't expire at all.

     * Returns:* the time when the OpenPGP key expires.

gnutls_openpgp_crt_get_fingerprint
----------------------------------

 -- Function: int gnutls_openpgp_crt_get_fingerprint
          (gnutls_openpgp_crt_t KEY, void * FPR, size_t * FPRLEN)
     KEY: the raw data that contains the OpenPGP public key.

     FPR: the buffer to save the fingerprint, must hold at least 20
     bytes.

     FPRLEN: the integer to save the length of the fingerprint.

     * Description:* Get key fingerprint.  Depending on the algorithm,
     the fingerprint can be 16 or 20 bytes.

     * Returns:* On success, 0 is returned.  Otherwise, an error code.

gnutls_openpgp_crt_get_key_id
-----------------------------

 -- Function: int gnutls_openpgp_crt_get_key_id (gnutls_openpgp_crt_t
          KEY, gnutls_openpgp_keyid_t KEYID)
     KEY: the structure that contains the OpenPGP public key.

     KEYID: the buffer to save the keyid.

     * Description:* Get key id string.

     * Returns:* the 64-bit keyID of the OpenPGP key.

     * Since:* 2.4.0

gnutls_openpgp_crt_get_key_usage
--------------------------------

 -- Function: int gnutls_openpgp_crt_get_key_usage
          (gnutls_openpgp_crt_t KEY, unsigned int * KEY_USAGE)
     KEY: should contain a gnutls_openpgp_crt_t structure

     KEY_USAGE: where the key usage bits will be stored

     * Description:* This function will return certificate's key usage,
     by checking the key algorithm. The key usage value will ORed
     values of the: `GNUTLS_KEY_DIGITAL_SIGNATURE',
     `GNUTLS_KEY_KEY_ENCIPHERMENT'.

     * Returns:* `GNUTLS_E_SUCCESS' on success, or an error code.

gnutls_openpgp_crt_get_name
---------------------------

 -- Function: int gnutls_openpgp_crt_get_name (gnutls_openpgp_crt_t
          KEY, int IDX, char * BUF, size_t * SIZEOF_BUF)
     KEY: the structure that contains the OpenPGP public key.

     IDX: the index of the ID to extract

     BUF: a pointer to a structure to hold the name, may be `NULL' to
     only get the  `sizeof_buf'.

     SIZEOF_BUF: holds the maximum size of  `buf', on return hold the
     actual/required size of  `buf'.

     * Description:* Extracts the userID from the parsed OpenPGP key.

     * Returns:* `GNUTLS_E_SUCCESS' on success, and if the index of the
     ID does not exist `GNUTLS_E_REQUESTED_DATA_NOT_AVAILABLE', or an
     error code.

gnutls_openpgp_crt_get_pk_algorithm
-----------------------------------

 -- Function: gnutls_pk_algorithm_t gnutls_openpgp_crt_get_pk_algorithm
          (gnutls_openpgp_crt_t KEY, unsigned int * BITS)
     KEY: is an OpenPGP key

     BITS: if bits is non null it will hold the size of the parameters'
     in bits

     * Description:* This function will return the public key algorithm
     of an OpenPGP certificate.

     If bits is non null, it should have enough size to hold the
     parameters size in bits. For RSA the bits returned is the modulus.
     For DSA the bits returned are of the public exponent.

     * Returns:* a member of the `gnutls_pk_algorithm_t' enumeration on
     success, or GNUTLS_PK_UNKNOWN on error.

gnutls_openpgp_crt_get_pk_dsa_raw
---------------------------------

 -- Function: int gnutls_openpgp_crt_get_pk_dsa_raw
          (gnutls_openpgp_crt_t CRT, gnutls_datum_t * P, gnutls_datum_t
          * Q, gnutls_datum_t * G, gnutls_datum_t * Y)
     CRT: Holds the certificate

     P: will hold the p

     Q: will hold the q

     G: will hold the g

     Y: will hold the y

     * Description:* This function will export the DSA public key's
     parameters found in the given certificate.  The new parameters
     will be allocated using `gnutls_malloc()' and will be stored in
     the appropriate datum.

     * Returns:* `GNUTLS_E_SUCCESS' on success, otherwise a negative
     error code.

     * Since:* 2.4.0

gnutls_openpgp_crt_get_pk_rsa_raw
---------------------------------

 -- Function: int gnutls_openpgp_crt_get_pk_rsa_raw
          (gnutls_openpgp_crt_t CRT, gnutls_datum_t * M, gnutls_datum_t
          * E)
     CRT: Holds the certificate

     M: will hold the modulus

     E: will hold the public exponent

     * Description:* This function will export the RSA public key's
     parameters found in the given structure.  The new parameters will
     be allocated using `gnutls_malloc()' and will be stored in the
     appropriate datum.

     * Returns:* `GNUTLS_E_SUCCESS' on success, otherwise a negative
     error code.

     * Since:* 2.4.0

gnutls_openpgp_crt_get_preferred_key_id
---------------------------------------

 -- Function: int gnutls_openpgp_crt_get_preferred_key_id
          (gnutls_openpgp_crt_t KEY, gnutls_openpgp_keyid_t KEYID)
     KEY: the structure that contains the OpenPGP public key.

     KEYID: the struct to save the keyid.

     * Description:* Get preferred key id.  If it hasn't been set it
     returns `GNUTLS_E_INVALID_REQUEST'.

     * Returns:* the 64-bit preferred keyID of the OpenPGP key.

gnutls_openpgp_crt_get_revoked_status
-------------------------------------

 -- Function: int gnutls_openpgp_crt_get_revoked_status
          (gnutls_openpgp_crt_t KEY)
     KEY: the structure that contains the OpenPGP public key.

     * Description:* Get revocation status of key.

     * Returns:* true (1) if the key has been revoked, or false (0) if
     it has not.

     * Since:* 2.4.0

gnutls_openpgp_crt_get_subkey_count
-----------------------------------

 -- Function: int gnutls_openpgp_crt_get_subkey_count
          (gnutls_openpgp_crt_t KEY)
     KEY: is an OpenPGP key

     * Description:* This function will return the number of subkeys
     present in the given OpenPGP certificate.

     * Returns:* the number of subkeys, or a negative error code on
     error.

     * Since:* 2.4.0

gnutls_openpgp_crt_get_subkey_creation_time
-------------------------------------------

 -- Function: time_t gnutls_openpgp_crt_get_subkey_creation_time
          (gnutls_openpgp_crt_t KEY, unsigned int IDX)
     KEY: the structure that contains the OpenPGP public key.

     IDX: the subkey index

     * Description:* Get subkey creation time.

     * Returns:* the timestamp when the OpenPGP sub-key was created.

     * Since:* 2.4.0

gnutls_openpgp_crt_get_subkey_expiration_time
---------------------------------------------

 -- Function: time_t gnutls_openpgp_crt_get_subkey_expiration_time
          (gnutls_openpgp_crt_t KEY, unsigned int IDX)
     KEY: the structure that contains the OpenPGP public key.

     IDX: the subkey index

     * Description:* Get subkey expiration time.  A value of '0' means
     that the key doesn't expire at all.

     * Returns:* the time when the OpenPGP key expires.

     * Since:* 2.4.0

gnutls_openpgp_crt_get_subkey_fingerprint
-----------------------------------------

 -- Function: int gnutls_openpgp_crt_get_subkey_fingerprint
          (gnutls_openpgp_crt_t KEY, unsigned int IDX, void * FPR,
          size_t * FPRLEN)
     KEY: the raw data that contains the OpenPGP public key.

     IDX: the subkey index

     FPR: the buffer to save the fingerprint, must hold at least 20
     bytes.

     FPRLEN: the integer to save the length of the fingerprint.

     * Description:* Get key fingerprint of a subkey.  Depending on the
     algorithm, the fingerprint can be 16 or 20 bytes.

     * Returns:* On success, 0 is returned.  Otherwise, an error code.

     * Since:* 2.4.0

gnutls_openpgp_crt_get_subkey_id
--------------------------------

 -- Function: int gnutls_openpgp_crt_get_subkey_id
          (gnutls_openpgp_crt_t KEY, unsigned int IDX,
          gnutls_openpgp_keyid_t KEYID)
     KEY: the structure that contains the OpenPGP public key.

     IDX: the subkey index

     KEYID: the buffer to save the keyid.

     * Description:* Get the subkey's key-id.

     * Returns:* the 64-bit keyID of the OpenPGP key.

gnutls_openpgp_crt_get_subkey_idx
---------------------------------

 -- Function: int gnutls_openpgp_crt_get_subkey_idx
          (gnutls_openpgp_crt_t KEY, const gnutls_openpgp_keyid_t KEYID)
     KEY: the structure that contains the OpenPGP public key.

     KEYID: the keyid.

     * Description:* Get subkey's index.

     * Returns:* the index of the subkey or a negative error value.

     * Since:* 2.4.0

gnutls_openpgp_crt_get_subkey_pk_algorithm
------------------------------------------

 -- Function: gnutls_pk_algorithm_t
gnutls_openpgp_crt_get_subkey_pk_algorithm (gnutls_openpgp_crt_t KEY,
          unsigned int IDX, unsigned int * BITS)
     KEY: is an OpenPGP key

     IDX: is the subkey index

     BITS: if bits is non null it will hold the size of the parameters'
     in bits

     * Description:* This function will return the public key algorithm
     of a subkey of an OpenPGP certificate.

     If bits is non null, it should have enough size to hold the
     parameters size in bits.  For RSA the bits returned is the modulus.
     For DSA the bits returned are of the public exponent.

     * Returns:* a member of the `gnutls_pk_algorithm_t' enumeration on
     success, or GNUTLS_PK_UNKNOWN on error.

     * Since:* 2.4.0

gnutls_openpgp_crt_get_subkey_pk_dsa_raw
----------------------------------------

 -- Function: int gnutls_openpgp_crt_get_subkey_pk_dsa_raw
          (gnutls_openpgp_crt_t CRT, unsigned int IDX, gnutls_datum_t *
          P, gnutls_datum_t * Q, gnutls_datum_t * G, gnutls_datum_t * Y)
     CRT: Holds the certificate

     IDX: Is the subkey index

     P: will hold the p

     Q: will hold the q

     G: will hold the g

     Y: will hold the y

     * Description:* This function will export the DSA public key's
     parameters found in the given certificate.  The new parameters
     will be allocated using `gnutls_malloc()' and will be stored in
     the appropriate datum.

     * Returns:* `GNUTLS_E_SUCCESS' on success, otherwise a negative
     error code.

     * Since:* 2.4.0

gnutls_openpgp_crt_get_subkey_pk_rsa_raw
----------------------------------------

 -- Function: int gnutls_openpgp_crt_get_subkey_pk_rsa_raw
          (gnutls_openpgp_crt_t CRT, unsigned int IDX, gnutls_datum_t *
          M, gnutls_datum_t * E)
     CRT: Holds the certificate

     IDX: Is the subkey index

     M: will hold the modulus

     E: will hold the public exponent

     * Description:* This function will export the RSA public key's
     parameters found in the given structure.  The new parameters will
     be allocated using `gnutls_malloc()' and will be stored in the
     appropriate datum.

     * Returns:* `GNUTLS_E_SUCCESS' on success, otherwise a negative
     error code.

     * Since:* 2.4.0

gnutls_openpgp_crt_get_subkey_revoked_status
--------------------------------------------

 -- Function: int gnutls_openpgp_crt_get_subkey_revoked_status
          (gnutls_openpgp_crt_t KEY, unsigned int IDX)
     KEY: the structure that contains the OpenPGP public key.

     IDX: is the subkey index

     * Description:* Get subkey revocation status.  A negative error
     code indicates an error.

     * Returns:* true (1) if the key has been revoked, or false (0) if
     it has not.

     * Since:* 2.4.0

gnutls_openpgp_crt_get_subkey_usage
-----------------------------------

 -- Function: int gnutls_openpgp_crt_get_subkey_usage
          (gnutls_openpgp_crt_t KEY, unsigned int IDX, unsigned int *
          KEY_USAGE)
     KEY: should contain a gnutls_openpgp_crt_t structure

     IDX: the subkey index

     KEY_USAGE: where the key usage bits will be stored

     * Description:* This function will return certificate's key usage,
     by checking the key algorithm.  The key usage value will ORed
     values of `GNUTLS_KEY_DIGITAL_SIGNATURE' or
     `GNUTLS_KEY_KEY_ENCIPHERMENT'.

     A negative error code may be returned in case of parsing error.

     * Returns:* key usage value.

     * Since:* 2.4.0

gnutls_openpgp_crt_get_version
------------------------------

 -- Function: int gnutls_openpgp_crt_get_version (gnutls_openpgp_crt_t
          KEY)
     KEY: the structure that contains the OpenPGP public key.

     * Description:* Extract the version of the OpenPGP key.

     * Returns:* the version number is returned, or a negative error
     code on errors.

gnutls_openpgp_crt_import
-------------------------

 -- Function: int gnutls_openpgp_crt_import (gnutls_openpgp_crt_t KEY,
          const gnutls_datum_t * DATA, gnutls_openpgp_crt_fmt_t FORMAT)
     KEY: The structure to store the parsed key.

     DATA: The RAW or BASE64 encoded key.

     FORMAT: One of gnutls_openpgp_crt_fmt_t elements.

     * Description:* This function will convert the given RAW or Base64
     encoded key to the native `gnutls_openpgp_crt_t' format. The
     output will be stored in 'key'.

     * Returns:* `GNUTLS_E_SUCCESS' on success, or an error code.

gnutls_openpgp_crt_init
-----------------------

 -- Function: int gnutls_openpgp_crt_init (gnutls_openpgp_crt_t * KEY)
     KEY: The structure to be initialized

     * Description:* This function will initialize an OpenPGP key
     structure.

     * Returns:* `GNUTLS_E_SUCCESS' on success, or an error code.

gnutls_openpgp_crt_print
------------------------

 -- Function: int gnutls_openpgp_crt_print (gnutls_openpgp_crt_t CERT,
          gnutls_certificate_print_formats_t FORMAT, gnutls_datum_t *
          OUT)
     CERT: The structure to be printed

     FORMAT: Indicate the format to use

     OUT: Newly allocated datum with (0) terminated string.

     * Description:* This function will pretty print an OpenPGP
     certificate, suitable for display to a human.

     The format should be (0) for future compatibility.

     The output  `out'needs to be deallocate using `gnutls_free()'.

     * Returns:* `GNUTLS_E_SUCCESS' on success, or an error code.

gnutls_openpgp_crt_set_preferred_key_id
---------------------------------------

 -- Function: int gnutls_openpgp_crt_set_preferred_key_id
          (gnutls_openpgp_crt_t KEY, const gnutls_openpgp_keyid_t KEYID)
     KEY: the structure that contains the OpenPGP public key.

     KEYID: the selected keyid

     * Description:* This allows setting a preferred key id for the
     given certificate.  This key will be used by functions that
     involve key handling.

     * Returns:* On success, `GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error code is returned.

gnutls_openpgp_crt_verify_ring
------------------------------

 -- Function: int gnutls_openpgp_crt_verify_ring (gnutls_openpgp_crt_t
          KEY, gnutls_openpgp_keyring_t KEYRING, unsigned int FLAGS,
          unsigned int * VERIFY)
     KEY: the structure that holds the key.

     KEYRING: holds the keyring to check against

     FLAGS: unused (should be 0)

     VERIFY: will hold the certificate verification output.

     * Description:* Verify all signatures in the key, using the given
     set of keys (keyring).

     The key verification output will be put in  `verify'and will be one
     or more of the `gnutls_certificate_status_t' enumerated elements
     bitwise or'd.

     * Returns:* `GNUTLS_E_SUCCESS' on success, or an error code.

gnutls_openpgp_crt_verify_self
------------------------------

 -- Function: int gnutls_openpgp_crt_verify_self (gnutls_openpgp_crt_t
          KEY, unsigned int FLAGS, unsigned int * VERIFY)
     KEY: the structure that holds the key.

     FLAGS: unused (should be 0)

     VERIFY: will hold the key verification output.

     * Description:* Verifies the self signature in the key.  The key
     verification output will be put in  `verify'and will be one or
     more of the gnutls_certificate_status_t enumerated elements
     bitwise or'd.

     * Returns:* `GNUTLS_E_SUCCESS' on success, or an error code.

gnutls_openpgp_keyring_check_id
-------------------------------

 -- Function: int gnutls_openpgp_keyring_check_id
          (gnutls_openpgp_keyring_t RING, const gnutls_openpgp_keyid_t
          KEYID, unsigned int FLAGS)
     RING: holds the keyring to check against

     KEYID: will hold the keyid to check for.

     FLAGS: unused (should be 0)

     * Description:* Check if a given key ID exists in the keyring.

     * Returns:* `GNUTLS_E_SUCCESS' on success (if keyid exists) and a
     negative error code on failure.

gnutls_openpgp_keyring_deinit
-----------------------------

 -- Function: void gnutls_openpgp_keyring_deinit
          (gnutls_openpgp_keyring_t KEYRING)
     KEYRING: The structure to be initialized

     * Description:* This function will deinitialize a keyring
     structure.

gnutls_openpgp_keyring_get_crt
------------------------------

 -- Function: int gnutls_openpgp_keyring_get_crt
          (gnutls_openpgp_keyring_t RING, unsigned int IDX,
          gnutls_openpgp_crt_t * CERT)
     RING: Holds the keyring.

     IDX: the index of the certificate to export

     CERT: An uninitialized `gnutls_openpgp_crt_t' structure

     * Description:* This function will extract an OpenPGP certificate
     from the given keyring.  If the index given is out of range
     `GNUTLS_E_REQUESTED_DATA_NOT_AVAILABLE' will be returned. The
     returned structure needs to be deinited.

     * Returns:* `GNUTLS_E_SUCCESS' on success, or an error code.

gnutls_openpgp_keyring_get_crt_count
------------------------------------

 -- Function: int gnutls_openpgp_keyring_get_crt_count
          (gnutls_openpgp_keyring_t RING)
     RING: is an OpenPGP key ring

     * Description:* This function will return the number of OpenPGP
     certificates present in the given keyring.

     * Returns:* the number of subkeys, or a negative error code on
     error.

gnutls_openpgp_keyring_import
-----------------------------

 -- Function: int gnutls_openpgp_keyring_import
          (gnutls_openpgp_keyring_t KEYRING, const gnutls_datum_t *
          DATA, gnutls_openpgp_crt_fmt_t FORMAT)
     KEYRING: The structure to store the parsed key.

     DATA: The RAW or BASE64 encoded keyring.

     FORMAT: One of `gnutls_openpgp_keyring_fmt' elements.

     * Description:* This function will convert the given RAW or Base64
     encoded keyring to the native `gnutls_openpgp_keyring_t' format.
     The output will be stored in 'keyring'.

     * Returns:* `GNUTLS_E_SUCCESS' on success, or an error code.

gnutls_openpgp_keyring_init
---------------------------

 -- Function: int gnutls_openpgp_keyring_init (gnutls_openpgp_keyring_t
          * KEYRING)
     KEYRING: The structure to be initialized

     * Description:* This function will initialize an keyring structure.

     * Returns:* `GNUTLS_E_SUCCESS' on success, or an error code.

gnutls_openpgp_privkey_deinit
-----------------------------

 -- Function: void gnutls_openpgp_privkey_deinit
          (gnutls_openpgp_privkey_t KEY)
     KEY: The structure to be initialized

     * Description:* This function will deinitialize a key structure.

gnutls_openpgp_privkey_export
-----------------------------

 -- Function: int gnutls_openpgp_privkey_export
          (gnutls_openpgp_privkey_t KEY, gnutls_openpgp_crt_fmt_t
          FORMAT, const char * PASSWORD, unsigned int FLAGS, void *
          OUTPUT_DATA, size_t * OUTPUT_DATA_SIZE)
     KEY: Holds the key.

     FORMAT: One of gnutls_openpgp_crt_fmt_t elements.

     PASSWORD: the password that will be used to encrypt the key.
     (unused for now)

     FLAGS: (0) for future compatibility

     OUTPUT_DATA: will contain the key base64 encoded or raw

     OUTPUT_DATA_SIZE: holds the size of output_data (and will be
     replaced by the actual size of parameters)

     * Description:* This function will convert the given key to RAW or
     Base64 format.  If the buffer provided is not long enough to hold
     the output, then GNUTLS_E_SHORT_MEMORY_BUFFER will be returned.

     * Returns:* `GNUTLS_E_SUCCESS' on success, or an error code.

     * Since:* 2.4.0

gnutls_openpgp_privkey_export_dsa_raw
-------------------------------------

 -- Function: int gnutls_openpgp_privkey_export_dsa_raw
          (gnutls_openpgp_privkey_t PKEY, gnutls_datum_t * P,
          gnutls_datum_t * Q, gnutls_datum_t * G, gnutls_datum_t * Y,
          gnutls_datum_t * X)
     PKEY: Holds the certificate

     P: will hold the p

     Q: will hold the q

     G: will hold the g

     Y: will hold the y

     X: will hold the x

     * Description:* This function will export the DSA private key's
     parameters found in the given certificate.  The new parameters
     will be allocated using `gnutls_malloc()' and will be stored in
     the appropriate datum.

     * Returns:* `GNUTLS_E_SUCCESS' on success, otherwise a negative
     error code.

     * Since:* 2.4.0

gnutls_openpgp_privkey_export_rsa_raw
-------------------------------------

 -- Function: int gnutls_openpgp_privkey_export_rsa_raw
          (gnutls_openpgp_privkey_t PKEY, gnutls_datum_t * M,
          gnutls_datum_t * E, gnutls_datum_t * D, gnutls_datum_t * P,
          gnutls_datum_t * Q, gnutls_datum_t * U)
     PKEY: Holds the certificate

     M: will hold the modulus

     E: will hold the public exponent

     D: will hold the private exponent

     P: will hold the first prime (p)

     Q: will hold the second prime (q)

     U: will hold the coefficient

     * Description:* This function will export the RSA private key's
     parameters found in the given structure.  The new parameters will
     be allocated using `gnutls_malloc()' and will be stored in the
     appropriate datum.

     * Returns:* `GNUTLS_E_SUCCESS' on success, otherwise a negative
     error code.

     * Since:* 2.4.0

gnutls_openpgp_privkey_export_subkey_dsa_raw
--------------------------------------------

 -- Function: int gnutls_openpgp_privkey_export_subkey_dsa_raw
          (gnutls_openpgp_privkey_t PKEY, unsigned int IDX,
          gnutls_datum_t * P, gnutls_datum_t * Q, gnutls_datum_t * G,
          gnutls_datum_t * Y, gnutls_datum_t * X)
     PKEY: Holds the certificate

     IDX: Is the subkey index

     P: will hold the p

     Q: will hold the q

     G: will hold the g

     Y: will hold the y

     X: will hold the x

     * Description:* This function will export the DSA private key's
     parameters found in the given certificate.  The new parameters
     will be allocated using `gnutls_malloc()' and will be stored in
     the appropriate datum.

     * Returns:* `GNUTLS_E_SUCCESS' on success, otherwise a negative
     error code.

     * Since:* 2.4.0

gnutls_openpgp_privkey_export_subkey_rsa_raw
--------------------------------------------

 -- Function: int gnutls_openpgp_privkey_export_subkey_rsa_raw
          (gnutls_openpgp_privkey_t PKEY, unsigned int IDX,
          gnutls_datum_t * M, gnutls_datum_t * E, gnutls_datum_t * D,
          gnutls_datum_t * P, gnutls_datum_t * Q, gnutls_datum_t * U)
     PKEY: Holds the certificate

     IDX: Is the subkey index

     M: will hold the modulus

     E: will hold the public exponent

     D: will hold the private exponent

     P: will hold the first prime (p)

     Q: will hold the second prime (q)

     U: will hold the coefficient

     * Description:* This function will export the RSA private key's
     parameters found in the given structure.  The new parameters will
     be allocated using `gnutls_malloc()' and will be stored in the
     appropriate datum.

     * Returns:* `GNUTLS_E_SUCCESS' on success, otherwise a negative
     error code.

     * Since:* 2.4.0

gnutls_openpgp_privkey_get_fingerprint
--------------------------------------

 -- Function: int gnutls_openpgp_privkey_get_fingerprint
          (gnutls_openpgp_privkey_t KEY, void * FPR, size_t * FPRLEN)
     KEY: the raw data that contains the OpenPGP secret key.

     FPR: the buffer to save the fingerprint, must hold at least 20
     bytes.

     FPRLEN: the integer to save the length of the fingerprint.

     * Description:* Get the fingerprint of the OpenPGP key. Depends on
     the algorithm, the fingerprint can be 16 or 20 bytes.

     * Returns:* On success, 0 is returned, or an error code.

     * Since:* 2.4.0

gnutls_openpgp_privkey_get_key_id
---------------------------------

 -- Function: int gnutls_openpgp_privkey_get_key_id
          (gnutls_openpgp_privkey_t KEY, gnutls_openpgp_keyid_t KEYID)
     KEY: the structure that contains the OpenPGP secret key.

     KEYID: the buffer to save the keyid.

     * Description:* Get key-id.

     * Returns:* the 64-bit keyID of the OpenPGP key.

     * Since:* 2.4.0

gnutls_openpgp_privkey_get_pk_algorithm
---------------------------------------

 -- Function: gnutls_pk_algorithm_t
gnutls_openpgp_privkey_get_pk_algorithm (gnutls_openpgp_privkey_t KEY,
          unsigned int * BITS)
     KEY: is an OpenPGP key

     BITS: if bits is non null it will hold the size of the parameters'
     in bits

     * Description:* This function will return the public key algorithm
     of an OpenPGP certificate.

     If bits is non null, it should have enough size to hold the
     parameters size in bits. For RSA the bits returned is the modulus.
     For DSA the bits returned are of the public exponent.

     * Returns:* a member of the `gnutls_pk_algorithm_t' enumeration on
     success, or a negative error code on error.

     * Since:* 2.4.0

gnutls_openpgp_privkey_get_preferred_key_id
-------------------------------------------

 -- Function: int gnutls_openpgp_privkey_get_preferred_key_id
          (gnutls_openpgp_privkey_t KEY, gnutls_openpgp_keyid_t KEYID)
     KEY: the structure that contains the OpenPGP public key.

     KEYID: the struct to save the keyid.

     * Description:* Get the preferred key-id for the key.

     * Returns:* the 64-bit preferred keyID of the OpenPGP key, or if it
     hasn't been set it returns `GNUTLS_E_INVALID_REQUEST'.

gnutls_openpgp_privkey_get_revoked_status
-----------------------------------------

 -- Function: int gnutls_openpgp_privkey_get_revoked_status
          (gnutls_openpgp_privkey_t KEY)
     KEY: the structure that contains the OpenPGP private key.

     * Description:* Get revocation status of key.

     * Returns:* true (1) if the key has been revoked, or false (0) if
     it has not, or a negative error code indicates an error.

     * Since:* 2.4.0

gnutls_openpgp_privkey_get_subkey_count
---------------------------------------

 -- Function: int gnutls_openpgp_privkey_get_subkey_count
          (gnutls_openpgp_privkey_t KEY)
     KEY: is an OpenPGP key

     * Description:* This function will return the number of subkeys
     present in the given OpenPGP certificate.

     * Returns:* the number of subkeys, or a negative error code on
     error.

     * Since:* 2.4.0

gnutls_openpgp_privkey_get_subkey_creation_time
-----------------------------------------------

 -- Function: time_t gnutls_openpgp_privkey_get_subkey_creation_time
          (gnutls_openpgp_privkey_t KEY, unsigned int IDX)
     KEY: the structure that contains the OpenPGP private key.

     IDX: the subkey index

     * Description:* Get subkey creation time.

     * Returns:* the timestamp when the OpenPGP key was created.

     * Since:* 2.4.0

gnutls_openpgp_privkey_get_subkey_fingerprint
---------------------------------------------

 -- Function: int gnutls_openpgp_privkey_get_subkey_fingerprint
          (gnutls_openpgp_privkey_t KEY, unsigned int IDX, void * FPR,
          size_t * FPRLEN)
     KEY: the raw data that contains the OpenPGP secret key.

     IDX: the subkey index

     FPR: the buffer to save the fingerprint, must hold at least 20
     bytes.

     FPRLEN: the integer to save the length of the fingerprint.

     * Description:* Get the fingerprint of an OpenPGP subkey.  Depends
     on the algorithm, the fingerprint can be 16 or 20 bytes.

     * Returns:* On success, 0 is returned, or an error code.

     * Since:* 2.4.0

gnutls_openpgp_privkey_get_subkey_id
------------------------------------

 -- Function: int gnutls_openpgp_privkey_get_subkey_id
          (gnutls_openpgp_privkey_t KEY, unsigned int IDX,
          gnutls_openpgp_keyid_t KEYID)
     KEY: the structure that contains the OpenPGP secret key.

     IDX: the subkey index

     KEYID: the buffer to save the keyid.

     * Description:* Get the key-id for the subkey.

     * Returns:* the 64-bit keyID of the OpenPGP key.

     * Since:* 2.4.0

gnutls_openpgp_privkey_get_subkey_idx
-------------------------------------

 -- Function: int gnutls_openpgp_privkey_get_subkey_idx
          (gnutls_openpgp_privkey_t KEY, const gnutls_openpgp_keyid_t
          KEYID)
     KEY: the structure that contains the OpenPGP private key.

     KEYID: the keyid.

     * Description:* Get index of subkey.

     * Returns:* the index of the subkey or a negative error value.

     * Since:* 2.4.0

gnutls_openpgp_privkey_get_subkey_pk_algorithm
----------------------------------------------

 -- Function: gnutls_pk_algorithm_t
gnutls_openpgp_privkey_get_subkey_pk_algorithm
          (gnutls_openpgp_privkey_t KEY, unsigned int IDX, unsigned int
          * BITS)
     KEY: is an OpenPGP key

     IDX: is the subkey index

     BITS: if bits is non null it will hold the size of the parameters'
     in bits

     * Description:* This function will return the public key algorithm
     of a subkey of an OpenPGP certificate.

     If bits is non null, it should have enough size to hold the
     parameters size in bits. For RSA the bits returned is the modulus.
     For DSA the bits returned are of the public exponent.

     * Returns:* a member of the `gnutls_pk_algorithm_t' enumeration on
     success, or a negative error code on error.

     * Since:* 2.4.0

gnutls_openpgp_privkey_get_subkey_revoked_status
------------------------------------------------

 -- Function: int gnutls_openpgp_privkey_get_subkey_revoked_status
          (gnutls_openpgp_privkey_t KEY, unsigned int IDX)
     KEY: the structure that contains the OpenPGP private key.

     IDX: is the subkey index

     * Description:* Get revocation status of key.

     * Returns:* true (1) if the key has been revoked, or false (0) if
     it has not, or a negative error code indicates an error.

     * Since:* 2.4.0

gnutls_openpgp_privkey_import
-----------------------------

 -- Function: int gnutls_openpgp_privkey_import
          (gnutls_openpgp_privkey_t KEY, const gnutls_datum_t * DATA,
          gnutls_openpgp_crt_fmt_t FORMAT, const char * PASSWORD,
          unsigned int FLAGS)
     KEY: The structure to store the parsed key.

     DATA: The RAW or BASE64 encoded key.

     FORMAT: One of `gnutls_openpgp_crt_fmt_t' elements.

     PASSWORD: not used for now

     FLAGS: should be (0)

     * Description:* This function will convert the given RAW or Base64
     encoded key to the native gnutls_openpgp_privkey_t format.  The
     output will be stored in 'key'.

     * Returns:* `GNUTLS_E_SUCCESS' on success, or an error code.

gnutls_openpgp_privkey_init
---------------------------

 -- Function: int gnutls_openpgp_privkey_init (gnutls_openpgp_privkey_t
          * KEY)
     KEY: The structure to be initialized

     * Description:* This function will initialize an OpenPGP key
     structure.

     * Returns:* `GNUTLS_E_SUCCESS' on success, or an error code.

gnutls_openpgp_privkey_sec_param
--------------------------------

 -- Function: gnutls_sec_param_t gnutls_openpgp_privkey_sec_param
          (gnutls_openpgp_privkey_t KEY)
     KEY: a key structure

     * Description:* This function will return the security parameter
     appropriate with this private key.

     * Returns:* On success, a valid security parameter is returned
     otherwise `GNUTLS_SEC_PARAM_UNKNOWN' is returned.

     * Since:* 2.12.0

gnutls_openpgp_privkey_set_preferred_key_id
-------------------------------------------

 -- Function: int gnutls_openpgp_privkey_set_preferred_key_id
          (gnutls_openpgp_privkey_t KEY, const gnutls_openpgp_keyid_t
          KEYID)
     KEY: the structure that contains the OpenPGP public key.

     KEYID: the selected keyid

     * Description:* This allows setting a preferred key id for the
     given certificate.  This key will be used by functions that
     involve key handling.

     * Returns:* On success, 0 is returned, or an error code.

gnutls_openpgp_set_recv_key_function
------------------------------------

 -- Function: void gnutls_openpgp_set_recv_key_function
          (gnutls_session_t SESSION, gnutls_openpgp_recv_key_func FUNC)
     SESSION: a TLS session

     FUNC: the callback

     * Description:* This funtion will set a key retrieval function for
     OpenPGP keys. This callback is only useful in server side, and
     will be used if the peer sent a key fingerprint instead of a full
     key.


File: gnutls.info,  Node: PKCS 12 API,  Next: PKCS 11 API,  Prev: OpenPGP API,  Up: API reference

C.5 PKCS 12 API
===============

The following functions are to be used for PKCS 12 handling.  Their
prototypes lie in `gnutls/pkcs12.h'.

gnutls_pkcs12_bag_decrypt
-------------------------

 -- Function: int gnutls_pkcs12_bag_decrypt (gnutls_pkcs12_bag_t BAG,
          const char * PASS)
     BAG: The bag

     PASS: The password used for encryption, must be ASCII.

     * Description:* This function will decrypt the given encrypted bag
     and return 0 on success.

     * Returns:* On success, `GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error code is returned.

gnutls_pkcs12_bag_deinit
------------------------

 -- Function: void gnutls_pkcs12_bag_deinit (gnutls_pkcs12_bag_t BAG)
     BAG: The structure to be initialized

     * Description:* This function will deinitialize a PKCS12 Bag
     structure.

gnutls_pkcs12_bag_encrypt
-------------------------

 -- Function: int gnutls_pkcs12_bag_encrypt (gnutls_pkcs12_bag_t BAG,
          const char * PASS, unsigned int FLAGS)
     BAG: The bag

     PASS: The password used for encryption, must be ASCII

     FLAGS: should be one of `gnutls_pkcs_encrypt_flags_t' elements
     bitwise or'd

     * Description:* This function will encrypt the given bag.

     * Returns:* On success, `GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error code is returned.

gnutls_pkcs12_bag_get_count
---------------------------

 -- Function: int gnutls_pkcs12_bag_get_count (gnutls_pkcs12_bag_t BAG)
     BAG: The bag

     * Description:* This function will return the number of the
     elements withing the bag.

     * Returns:* Number of elements in bag, or an negative error code on
     error.

gnutls_pkcs12_bag_get_data
--------------------------

 -- Function: int gnutls_pkcs12_bag_get_data (gnutls_pkcs12_bag_t BAG,
          int INDX, gnutls_datum_t * DATA)
     BAG: The bag

     INDX: The element of the bag to get the data from

     DATA: where the bag's data will be. Should be treated as constant.

     * Description:* This function will return the bag's data. The data
     is a constant that is stored into the bag.  Should not be accessed
     after the bag is deleted.

     * Returns:* On success, `GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

gnutls_pkcs12_bag_get_friendly_name
-----------------------------------

 -- Function: int gnutls_pkcs12_bag_get_friendly_name
          (gnutls_pkcs12_bag_t BAG, int INDX, char ** NAME)
     BAG: The bag

     INDX: The bag's element to add the id

     NAME: will hold a pointer to the name (to be treated as const)

     * Description:* This function will return the friendly name, of
     the specified bag element.  The key ID is usually used to
     distinguish the local private key and the certificate pair.

     * Returns:* On success, `GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value. or a negative error code on
     error.

gnutls_pkcs12_bag_get_key_id
----------------------------

 -- Function: int gnutls_pkcs12_bag_get_key_id (gnutls_pkcs12_bag_t
          BAG, int INDX, gnutls_datum_t * ID)
     BAG: The bag

     INDX: The bag's element to add the id

     ID: where the ID will be copied (to be treated as const)

     * Description:* This function will return the key ID, of the
     specified bag element.  The key ID is usually used to distinguish
     the local private key and the certificate pair.

     * Returns:* On success, `GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value. or a negative error code on
     error.

gnutls_pkcs12_bag_get_type
--------------------------

 -- Function: gnutls_pkcs12_bag_type_t gnutls_pkcs12_bag_get_type
          (gnutls_pkcs12_bag_t BAG, int INDX)
     BAG: The bag

     INDX: The element of the bag to get the type

     * Description:* This function will return the bag's type.

     * Returns:* One of the `gnutls_pkcs12_bag_type_t' enumerations.

gnutls_pkcs12_bag_init
----------------------

 -- Function: int gnutls_pkcs12_bag_init (gnutls_pkcs12_bag_t * BAG)
     BAG: The structure to be initialized

     * Description:* This function will initialize a PKCS12 bag
     structure. PKCS12 Bags usually contain private keys, lists of
     X.509 Certificates and X.509 Certificate revocation lists.

     * Returns:* On success, `GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

gnutls_pkcs12_bag_set_crl
-------------------------

 -- Function: int gnutls_pkcs12_bag_set_crl (gnutls_pkcs12_bag_t BAG,
          gnutls_x509_crl_t CRL)
     BAG: The bag

     CRL: the CRL to be copied.

     * Description:* This function will insert the given CRL into the
     bag. This is just a wrapper over `gnutls_pkcs12_bag_set_data()'.

     * Returns:* the index of the added bag on success, or a negative
     error code on failure.

gnutls_pkcs12_bag_set_crt
-------------------------

 -- Function: int gnutls_pkcs12_bag_set_crt (gnutls_pkcs12_bag_t BAG,
          gnutls_x509_crt_t CRT)
     BAG: The bag

     CRT: the certificate to be copied.

     * Description:* This function will insert the given certificate
     into the bag. This is just a wrapper over
     `gnutls_pkcs12_bag_set_data()'.

     * Returns:* the index of the added bag on success, or a negative
     value on failure.

gnutls_pkcs12_bag_set_data
--------------------------

 -- Function: int gnutls_pkcs12_bag_set_data (gnutls_pkcs12_bag_t BAG,
          gnutls_pkcs12_bag_type_t TYPE, const gnutls_datum_t * DATA)
     BAG: The bag

     TYPE: The data's type

     DATA: the data to be copied.

     * Description:* This function will insert the given data of the
     given type into the bag.

     * Returns:* the index of the added bag on success, or a negative
     value on error.

gnutls_pkcs12_bag_set_friendly_name
-----------------------------------

 -- Function: int gnutls_pkcs12_bag_set_friendly_name
          (gnutls_pkcs12_bag_t BAG, int INDX, const char * NAME)
     BAG: The bag

     INDX: The bag's element to add the id

     NAME: the name

     * Description:* This function will add the given key friendly
     name, to the specified, by the index, bag element. The name will
     be encoded as a 'Friendly name' bag attribute, which is usually
     used to set a user name to the local private key and the
     certificate pair.

     * Returns:* On success, `GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value. or a negative error code on
     error.

gnutls_pkcs12_bag_set_key_id
----------------------------

 -- Function: int gnutls_pkcs12_bag_set_key_id (gnutls_pkcs12_bag_t
          BAG, int INDX, const gnutls_datum_t * ID)
     BAG: The bag

     INDX: The bag's element to add the id

     ID: the ID

     * Description:* This function will add the given key ID, to the
     specified, by the index, bag element. The key ID will be encoded
     as a 'Local key identifier' bag attribute, which is usually used
     to distinguish the local private key and the certificate pair.

     * Returns:* On success, `GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value. or a negative error code on
     error.

gnutls_pkcs12_deinit
--------------------

 -- Function: void gnutls_pkcs12_deinit (gnutls_pkcs12_t PKCS12)
     PKCS12: The structure to be initialized

     * Description:* This function will deinitialize a PKCS12 structure.

gnutls_pkcs12_export
--------------------

 -- Function: int gnutls_pkcs12_export (gnutls_pkcs12_t PKCS12,
          gnutls_x509_crt_fmt_t FORMAT, void * OUTPUT_DATA, size_t *
          OUTPUT_DATA_SIZE)
     PKCS12: Holds the pkcs12 structure

     FORMAT: the format of output params. One of PEM or DER.

     OUTPUT_DATA: will contain a structure PEM or DER encoded

     OUTPUT_DATA_SIZE: holds the size of output_data (and will be
     replaced by the actual size of parameters)

     * Description:* This function will export the pkcs12 structure to
     DER or PEM format.

     If the buffer provided is not long enough to hold the output, then
     *output_data_size will be updated and GNUTLS_E_SHORT_MEMORY_BUFFER
     will be returned.

     If the structure is PEM encoded, it will have a header of "BEGIN
     PKCS12".

     * Returns:* In case of failure a negative error code will be
     returned, and 0 on success.

gnutls_pkcs12_generate_mac
--------------------------

 -- Function: int gnutls_pkcs12_generate_mac (gnutls_pkcs12_t PKCS12,
          const char * PASS)
     PKCS12: should contain a gnutls_pkcs12_t structure

     PASS: The password for the MAC

     * Description:* This function will generate a MAC for the PKCS12
     structure.

     * Returns:* On success, `GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

gnutls_pkcs12_get_bag
---------------------

 -- Function: int gnutls_pkcs12_get_bag (gnutls_pkcs12_t PKCS12, int
          INDX, gnutls_pkcs12_bag_t BAG)
     PKCS12: should contain a gnutls_pkcs12_t structure

     INDX: contains the index of the bag to extract

     BAG: An initialized bag, where the contents of the bag will be
     copied

     * Description:* This function will return a Bag from the PKCS12
     structure.

     After the last Bag has been read
     `GNUTLS_E_REQUESTED_DATA_NOT_AVAILABLE' will be returned.

     * Returns:* On success, `GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

gnutls_pkcs12_import
--------------------

 -- Function: int gnutls_pkcs12_import (gnutls_pkcs12_t PKCS12, const
          gnutls_datum_t * DATA, gnutls_x509_crt_fmt_t FORMAT, unsigned
          int FLAGS)
     PKCS12: The structure to store the parsed PKCS12.

     DATA: The DER or PEM encoded PKCS12.

     FORMAT: One of DER or PEM

     FLAGS: an ORed sequence of gnutls_privkey_pkcs8_flags

     * Description:* This function will convert the given DER or PEM
     encoded PKCS12 to the native gnutls_pkcs12_t format. The output
     will be stored in 'pkcs12'.

     If the PKCS12 is PEM encoded it should have a header of "PKCS12".

     * Returns:* On success, `GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

gnutls_pkcs12_init
------------------

 -- Function: int gnutls_pkcs12_init (gnutls_pkcs12_t * PKCS12)
     PKCS12: The structure to be initialized

     * Description:* This function will initialize a PKCS12 structure.
     PKCS12 structures usually contain lists of X.509 Certificates and
     X.509 Certificate revocation lists.

     * Returns:* On success, `GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

gnutls_pkcs12_set_bag
---------------------

 -- Function: int gnutls_pkcs12_set_bag (gnutls_pkcs12_t PKCS12,
          gnutls_pkcs12_bag_t BAG)
     PKCS12: should contain a gnutls_pkcs12_t structure

     BAG: An initialized bag

     * Description:* This function will insert a Bag into the PKCS12
     structure.

     * Returns:* On success, `GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

gnutls_pkcs12_verify_mac
------------------------

 -- Function: int gnutls_pkcs12_verify_mac (gnutls_pkcs12_t PKCS12,
          const char * PASS)
     PKCS12: should contain a gnutls_pkcs12_t structure

     PASS: The password for the MAC

     * Description:* This function will verify the MAC for the PKCS12
     structure.

     * Returns:* On success, `GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.


File: gnutls.info,  Node: PKCS 11 API,  Next: Abstract key API,  Prev: PKCS 12 API,  Up: API reference

C.6 Hardware token via PKCS 11 API
==================================

The following functions are to be used for PKCS 11 handling.  Their
prototypes lie in `gnutls/pkcs11.h'.

gnutls_pkcs11_add_provider
--------------------------

 -- Function: int gnutls_pkcs11_add_provider (const char * NAME, const
          char * PARAMS)
     NAME: The filename of the module

     PARAMS: should be NULL

     * Description:* This function will load and add a PKCS 11 module
     to the module list used in gnutls. After this function is called
     the module will be used for PKCS 11 operations.

     * Returns:* On success, `GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

     * Since:* 2.12.0

gnutls_pkcs11_copy_secret_key
-----------------------------

 -- Function: int gnutls_pkcs11_copy_secret_key (const char *
          TOKEN_URL, gnutls_datum_t * KEY, const char * LABEL, unsigned
          int KEY_USAGE, unsigned int FLAGS)
     TOKEN_URL: A PKCS `11' URL specifying a token

     KEY: The raw key

     LABEL: A name to be used for the stored data

     KEY_USAGE: One of GNUTLS_KEY_*

     FLAGS: One of GNUTLS_PKCS11_OBJ_FLAG_*

     * Description:* This function will copy a raw secret (symmetric)
     key into a PKCS `11' token specified by a URL. The key can be
     marked as sensitive or not.

     * Returns:* On success, `GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

     * Since:* 2.12.0

gnutls_pkcs11_copy_x509_crt
---------------------------

 -- Function: int gnutls_pkcs11_copy_x509_crt (const char * TOKEN_URL,
          gnutls_x509_crt_t CRT, const char * LABEL, unsigned int FLAGS)
     TOKEN_URL: A PKCS `11' URL specifying a token

     CRT: A certificate

     LABEL: A name to be used for the stored data

     FLAGS: One of GNUTLS_PKCS11_OBJ_FLAG_*

     * Description:* This function will copy a certificate into a PKCS
     `11' token specified by a URL. The certificate can be marked as
     trusted or not.

     * Returns:* On success, `GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

     * Since:* 2.12.0

gnutls_pkcs11_copy_x509_privkey
-------------------------------

 -- Function: int gnutls_pkcs11_copy_x509_privkey (const char *
          TOKEN_URL, gnutls_x509_privkey_t KEY, const char * LABEL,
          unsigned int KEY_USAGE, unsigned int FLAGS)
     TOKEN_URL: A PKCS `11' URL specifying a token

     KEY: A private key

     LABEL: A name to be used for the stored data

     KEY_USAGE: One of GNUTLS_KEY_*

     FLAGS: One of GNUTLS_PKCS11_OBJ_* flags

     * Description:* This function will copy a private key into a PKCS
     `11' token specified by a URL. It is highly recommended flags to
     contain `GNUTLS_PKCS11_OBJ_FLAG_MARK_SENSITIVE' unless there is a
     strong reason not to.

     * Returns:* On success, `GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

     * Since:* 2.12.0

gnutls_pkcs11_deinit
--------------------

 -- Function: void gnutls_pkcs11_deinit ( VOID)
     * Description:* This function will deinitialize the PKCS 11
     subsystem in gnutls.

     * Since:* 2.12.0

gnutls_pkcs11_delete_url
------------------------

 -- Function: int gnutls_pkcs11_delete_url (const char * OBJECT_URL,
          unsigned int FLAGS)
     OBJECT_URL: The URL of the object to delete.

     FLAGS: One of GNUTLS_PKCS11_OBJ_* flags

     * Description:* This function will delete objects matching the
     given URL.  Note that not all tokens support the delete operation.

     * Returns:* On success, the number of objects deleted is returned,
     otherwise a negative error value.

     * Since:* 2.12.0

gnutls_pkcs11_init
------------------

 -- Function: int gnutls_pkcs11_init (unsigned int FLAGS, const char *
          DEPRECATED_CONFIG_FILE)
     FLAGS: `GNUTLS_PKCS11_FLAG_MANUAL' or `GNUTLS_PKCS11_FLAG_AUTO'

     DEPRECATED_CONFIG_FILE: either NULL or the location of a deprecated
     configuration file

     * Description:* This function will initialize the PKCS 11
     subsystem in gnutls. It will read configuration files if
     `GNUTLS_PKCS11_FLAG_AUTO' is used or allow you to independently
     load PKCS 11 modules using `gnutls_pkcs11_add_provider()' if
     `GNUTLS_PKCS11_FLAG_MANUAL' is specified.

     Normally you don't need to call this function since it is being
     called by `gnutls_global_init()' using the
     `GNUTLS_PKCS11_FLAG_AUTO'. If other option is required then it
     must be called before it.

     * Returns:* On success, `GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

     * Since:* 2.12.0

gnutls_pkcs11_obj_deinit
------------------------

 -- Function: void gnutls_pkcs11_obj_deinit (gnutls_pkcs11_obj_t OBJ)
     OBJ: The structure to be initialized

     * Description:* This function will deinitialize a certificate
     structure.

     * Since:* 2.12.0

gnutls_pkcs11_obj_export
------------------------

 -- Function: int gnutls_pkcs11_obj_export (gnutls_pkcs11_obj_t OBJ,
          void * OUTPUT_DATA, size_t * OUTPUT_DATA_SIZE)
     OBJ: Holds the object

     OUTPUT_DATA: will contain a certificate PEM or DER encoded

     OUTPUT_DATA_SIZE: holds the size of output_data (and will be
     replaced by the actual size of parameters)

     * Description:* This function will export the PKCS11 object data.
     It is normal for data to be inaccesible and in that case
     `GNUTLS_E_INVALID_REQUEST' will be returned.

     If the buffer provided is not long enough to hold the output, then
     *output_data_size is updated and GNUTLS_E_SHORT_MEMORY_BUFFER will
     be returned.

     If the structure is PEM encoded, it will have a header of "BEGIN
     CERTIFICATE".

     * Returns:* In case of failure a negative error code will be
     returned, and `GNUTLS_E_SUCCESS' (0) on success.

     * Since:* 2.12.0

gnutls_pkcs11_obj_export_url
----------------------------

 -- Function: int gnutls_pkcs11_obj_export_url (gnutls_pkcs11_obj_t
          OBJ, gnutls_pkcs11_url_type_t DETAILED, char ** URL)
     OBJ: Holds the PKCS 11 certificate

     DETAILED: non zero if a detailed URL is required

     URL: will contain an allocated url

     * Description:* This function will export a URL identifying the
     given certificate.

     * Returns:* On success, `GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

     * Since:* 2.12.0

gnutls_pkcs11_obj_get_info
--------------------------

 -- Function: int gnutls_pkcs11_obj_get_info (gnutls_pkcs11_obj_t CRT,
          gnutls_pkcs11_obj_info_t ITYPE, void * OUTPUT, size_t *
          OUTPUT_SIZE)
     CRT: should contain a `gnutls_pkcs11_obj_t' structure

     ITYPE: Denotes the type of information requested

     OUTPUT: where output will be stored

     OUTPUT_SIZE: contains the maximum size of the output and will be
     overwritten with actual

     * Description:* This function will return information about the
     PKCS11 certificate such as the label, id as well as token
     information where the key is stored. When output is text it
     returns null terminated string although  `output_size'contains the
     size of the actual data only.

     * Returns:* `GNUTLS_E_SUCCESS' (0) on success or a negative error
     code on error.

     * Since:* 2.12.0

gnutls_pkcs11_obj_get_type
--------------------------

 -- Function: gnutls_pkcs11_obj_type_t gnutls_pkcs11_obj_get_type
          (gnutls_pkcs11_obj_t OBJ)
     OBJ: Holds the PKCS 11 object

     * Description:* This function will return the type of the
     certificate being stored in the structure.

     * Returns:* The type of the certificate.

     * Since:* 2.12.0

gnutls_pkcs11_obj_import_url
----------------------------

 -- Function: int gnutls_pkcs11_obj_import_url (gnutls_pkcs11_obj_t
          CERT, const char * URL, unsigned int FLAGS)
     CERT: The structure to store the parsed certificate

     URL: a PKCS 11 url identifying the key

     FLAGS: One of GNUTLS_PKCS11_OBJ_* flags

     * Description:* This function will "import" a PKCS 11 URL
     identifying a certificate key to the `gnutls_pkcs11_obj_t'
     structure. This does not involve any parsing (such as X.509 or
     OpenPGP) since the `gnutls_pkcs11_obj_t' is format agnostic. Only
     data are transferred.

     * Returns:* On success, `GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

     * Since:* 2.12.0

gnutls_pkcs11_obj_init
----------------------

 -- Function: int gnutls_pkcs11_obj_init (gnutls_pkcs11_obj_t * OBJ)
     OBJ: The structure to be initialized

     * Description:* This function will initialize a pkcs11 certificate
     structure.

     * Returns:* On success, `GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

     * Since:* 2.12.0

gnutls_pkcs11_obj_list_import_url
---------------------------------

 -- Function: int gnutls_pkcs11_obj_list_import_url
          (gnutls_pkcs11_obj_t * P_LIST, unsigned int * N_LIST, const
          char * URL, gnutls_pkcs11_obj_attr_t ATTRS, unsigned int
          FLAGS)
     P_LIST: An uninitialized object list (may be NULL)

     N_LIST: initially should hold the maximum size of the list. Will
     contain the actual size.

     URL: A PKCS 11 url identifying a set of objects

     ATTRS: Attributes of type `gnutls_pkcs11_obj_attr_t' that can be
     used to limit output

     FLAGS: One of GNUTLS_PKCS11_OBJ_* flags

     * Description:* This function will initialize and set values to an
     object list by using all objects identified by a PKCS 11 URL.

     * Returns:* On success, `GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

     * Since:* 2.12.0

gnutls_pkcs11_privkey_deinit
----------------------------

 -- Function: void gnutls_pkcs11_privkey_deinit
          (gnutls_pkcs11_privkey_t KEY)
     KEY: The structure to be initialized

     * Description:* This function will deinitialize a private key
     structure.

gnutls_pkcs11_privkey_export_url
--------------------------------

 -- Function: int gnutls_pkcs11_privkey_export_url
          (gnutls_pkcs11_privkey_t KEY, gnutls_pkcs11_url_type_t
          DETAILED, char ** URL)
     KEY: Holds the PKCS 11 key

     DETAILED: non zero if a detailed URL is required

     URL: will contain an allocated url

     * Description:* This function will export a URL identifying the
     given key.

     * Returns:* On success, `GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

gnutls_pkcs11_privkey_generate
------------------------------

 -- Function: int gnutls_pkcs11_privkey_generate (const char* URL,
          gnutls_pk_algorithm_t PK, unsigned int BITS, const char*
          LABEL, unsigned int FLAGS)
     URL: a token URL

     PK: the public key algorithm

     BITS: the security bits

     LABEL: a label

     FLAGS: should be zero

     * Description:* This function will generate a private key in the
     specified by the  `url'token. The pivate key will be generate
     within the token and will not be exportable.

     * Returns:* On success, `GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

     * Since:* 3.0.0

gnutls_pkcs11_privkey_get_info
------------------------------

 -- Function: int gnutls_pkcs11_privkey_get_info
          (gnutls_pkcs11_privkey_t PKEY, gnutls_pkcs11_obj_info_t
          ITYPE, void * OUTPUT, size_t * OUTPUT_SIZE)
     PKEY: should contain a `gnutls_pkcs11_privkey_t' structure

     ITYPE: Denotes the type of information requested

     OUTPUT: where output will be stored

     OUTPUT_SIZE: contains the maximum size of the output and will be
     overwritten with actual

     * Description:* This function will return information about the
     PKCS 11 private key such as the label, id as well as token
     information where the key is stored. When output is text it
     returns null terminated string although `output_size' contains the
     size of the actual data only.

     * Returns:* `GNUTLS_E_SUCCESS' (0) on success or a negative error
     code on error.

gnutls_pkcs11_privkey_get_pk_algorithm
--------------------------------------

 -- Function: int gnutls_pkcs11_privkey_get_pk_algorithm
          (gnutls_pkcs11_privkey_t KEY, unsigned int * BITS)
     KEY: should contain a `gnutls_pkcs11_privkey_t' structure

     BITS: if bits is non null it will hold the size of the parameters'
     in bits

     * Description:* This function will return the public key algorithm
     of a private key.

     * Returns:* a member of the `gnutls_pk_algorithm_t' enumeration on
     success, or a negative error code on error.

gnutls_pkcs11_privkey_import_url
--------------------------------

 -- Function: int gnutls_pkcs11_privkey_import_url
          (gnutls_pkcs11_privkey_t PKEY, const char * URL, unsigned int
          FLAGS)
     PKEY: The structure to store the parsed key

     URL: a PKCS 11 url identifying the key

     FLAGS: sequence of GNUTLS_PKCS_PRIVKEY_*

     * Description:* This function will "import" a PKCS 11 URL
     identifying a private key to the `gnutls_pkcs11_privkey_t'
     structure. In reality since in most cases keys cannot be exported,
     the private key structure is being associated with the available
     operations on the token.

     * Returns:* On success, `GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

gnutls_pkcs11_privkey_init
--------------------------

 -- Function: int gnutls_pkcs11_privkey_init (gnutls_pkcs11_privkey_t *
          KEY)
     KEY: The structure to be initialized

     * Description:* This function will initialize an private key
     structure.

     * Returns:* On success, `GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

gnutls_pkcs11_set_pin_function
------------------------------

 -- Function: void gnutls_pkcs11_set_pin_function
          (gnutls_pkcs11_pin_callback_t FN, void * USERDATA)
     FN: The PIN callback, a `gnutls_pkcs11_pin_callback_t()' function.

     USERDATA: data to be supplied to callback

     * Description:* This function will set a callback function to be
     used when a PIN is required for PKCS 11 operations.  See
     `gnutls_pkcs11_pin_callback_t()' on how the callback should behave.

     * Since:* 2.12.0

gnutls_pkcs11_set_token_function
--------------------------------

 -- Function: void gnutls_pkcs11_set_token_function
          (gnutls_pkcs11_token_callback_t FN, void * USERDATA)
     FN: The token callback

     USERDATA: data to be supplied to callback

     * Description:* This function will set a callback function to be
     used when a token needs to be inserted to continue PKCS 11
     operations.

     * Since:* 2.12.0

gnutls_pkcs11_token_get_flags
-----------------------------

 -- Function: int gnutls_pkcs11_token_get_flags (const char * URL,
          unsigned int * FLAGS)
     URL: should contain a PKCS 11 URL

     FLAGS: The output flags (GNUTLS_PKCS11_TOKEN_*)

     * Description:* This function will return information about the
     PKCS 11 token flags.  The flags from the
     `gnutls_pkcs11_token_info_t' enumeration.

     * Returns:* `GNUTLS_E_SUCCESS' (0) on success or a negative error
     code on error.

     * Since:* 2.12.0

gnutls_pkcs11_token_get_info
----------------------------

 -- Function: int gnutls_pkcs11_token_get_info (const char * URL,
          gnutls_pkcs11_token_info_t TTYPE, void * OUTPUT, size_t *
          OUTPUT_SIZE)
     URL: should contain a PKCS 11 URL

     TTYPE: Denotes the type of information requested

     OUTPUT: where output will be stored

     OUTPUT_SIZE: contains the maximum size of the output and will be
     overwritten with actual

     * Description:* This function will return information about the
     PKCS 11 token such as the label, id, etc.

     * Returns:* `GNUTLS_E_SUCCESS' (0) on success or a negative error
     code on error.

     * Since:* 2.12.0

gnutls_pkcs11_token_get_mechanism
---------------------------------

 -- Function: int gnutls_pkcs11_token_get_mechanism (const char * URL,
          int IDX, unsigned long * MECHANISM)
     URL: should contain a PKCS 11 URL

     IDX: The index of the mechanism

     MECHANISM: The PKCS `11' mechanism ID

     * Description:* This function will return the names of the
     supported mechanisms by the token. It should be called with an
     increasing index until it return
     GNUTLS_E_REQUESTED_DATA_NOT_AVAILABLE.

     * Returns:* `GNUTLS_E_SUCCESS' (0) on success or a negative error
     code on error.

     * Since:* 2.12.0

gnutls_pkcs11_token_get_url
---------------------------

 -- Function: int gnutls_pkcs11_token_get_url (unsigned int SEQ,
          gnutls_pkcs11_url_type_t DETAILED, char ** URL)
     SEQ: sequence number starting from 0

     DETAILED: non zero if a detailed URL is required

     URL: will contain an allocated url

     * Description:* This function will return the URL for each token
     available in system. The url has to be released using
     `gnutls_free()'

     * Returns:* On success, `GNUTLS_E_SUCCESS' (0) is returned,
     `GNUTLS_E_REQUESTED_DATA_NOT_AVAILABLE' if the sequence number
     exceeds the available tokens, otherwise a negative error value.

     * Since:* 2.12.0

gnutls_pkcs11_token_init
------------------------

 -- Function: int gnutls_pkcs11_token_init (const char * TOKEN_URL,
          const char * SO_PIN, const char * LABEL)
     TOKEN_URL: A PKCS `11' URL specifying a token

     SO_PIN: Security Officer's PIN

     LABEL: A name to be used for the token

     * Description:* This function will initialize (format) a token. If
     the token is at a factory defaults state the security officer's
     PIN given will be set to be the default. Otherwise it should match
     the officer's PIN.

     * Returns:* On success, `GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

gnutls_pkcs11_token_set_pin
---------------------------

 -- Function: int gnutls_pkcs11_token_set_pin (const char * TOKEN_URL,
          const char * OLDPIN, const char * NEWPIN, unsigned int FLAGS)
     TOKEN_URL: A PKCS `11' URL specifying a token

     OLDPIN: old user's PIN

     NEWPIN: new user's PIN

     FLAGS: one of `gnutls_pkcs11_pin_flag_t'.

     * Description:* This function will modify or set a user's PIN for
     the given token.  If it is called to set a user pin for first time
     the oldpin must be NULL.

     * Returns:* On success, `GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

gnutls_pkcs11_type_get_name
---------------------------

 -- Function: const char * gnutls_pkcs11_type_get_name
          (gnutls_pkcs11_obj_type_t TYPE)
     TYPE: Holds the PKCS 11 object type, a `gnutls_pkcs11_obj_type_t'.

     * Description:* This function will return a human readable
     description of the PKCS11 object type  `obj'.  It will return
     "Unknown" for unknown types.

     * Returns:* human readable string labeling the PKCS11 object type
     `type'.

     * Since:* 2.12.0

gnutls_x509_crt_import_pkcs11
-----------------------------

 -- Function: int gnutls_x509_crt_import_pkcs11 (gnutls_x509_crt_t CRT,
          gnutls_pkcs11_obj_t PKCS11_CRT)
     CRT: A certificate of type `gnutls_x509_crt_t'

     PKCS11_CRT: A PKCS 11 object that contains a certificate

     * Description:* This function will import a PKCS 11 certificate to
     a `gnutls_x509_crt_t' structure.

     * Returns:* On success, `GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

     * Since:* 2.12.0

gnutls_x509_crt_import_pkcs11_url
---------------------------------

 -- Function: int gnutls_x509_crt_import_pkcs11_url (gnutls_x509_crt_t
          CRT, const char * URL, unsigned int FLAGS)
     CRT: A certificate of type `gnutls_x509_crt_t'

     URL: A PKCS 11 url

     FLAGS: One of GNUTLS_PKCS11_OBJ_* flags

     * Description:* This function will import a PKCS 11 certificate
     directly from a token without involving the `gnutls_pkcs11_obj_t'
     structure. This function will fail if the certificate stored is
     not of X.509 type.

     * Returns:* On success, `GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

     * Since:* 2.12.0

gnutls_x509_crt_list_import_pkcs11
----------------------------------

 -- Function: int gnutls_x509_crt_list_import_pkcs11 (gnutls_x509_crt_t
          * CERTS, unsigned int CERT_MAX, gnutls_pkcs11_obj_t * const
          OBJS, unsigned int FLAGS)
     CERTS: A list of certificates of type `gnutls_x509_crt_t'

     CERT_MAX: The maximum size of the list

     OBJS: A list of PKCS 11 objects

     FLAGS: 0 for now

     * Description:* This function will import a PKCS 11 certificate
     list to a list of `gnutls_x509_crt_t' structure. These must not be
     initialized.

     * Returns:* On success, `GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

     * Since:* 2.12.0


File: gnutls.info,  Node: Abstract key API,  Next: Cryptographic API,  Prev: PKCS 11 API,  Up: API reference

C.7 Abstract key API
====================

The following functions are to be used for abstract key handling.
Their prototypes lie in `gnutls/abstract.h'.

gnutls_certificate_set_key
--------------------------

 -- Function: int gnutls_certificate_set_key
          (gnutls_certificate_credentials_t RES, const char** NAMES,
          int NAMES_SIZE, gnutls_pcert_st * PCERT_LIST, int
          PCERT_LIST_SIZE, gnutls_privkey_t KEY)
     RES: is a `gnutls_certificate_credentials_t' structure.

     NAMES: is an array of DNS name of the certificate (NULL if none)

     NAMES_SIZE: holds the size of the names list

     PCERT_LIST: contains a certificate list (path) for the specified
     private key

     PCERT_LIST_SIZE: holds the size of the certificate list

     KEY: is a gnutls_x509_privkey_t key

     * Description:* This function sets a certificate/private key pair
     in the gnutls_certificate_credentials_t structure.  This function
     may be called more than once, in case multiple keys/certificates
     exist for the server.  For clients that wants to send more than
     its own end entity certificate (e.g., also an intermediate CA
     cert) then put the certificate chain in  `pcert_list'. The
     `pcert_list'and  `key'will become part of the credentials
     structure and must not be deallocated. They will be automatically
     deallocated when  `res'is deinitialized.

     * Returns:* `GNUTLS_E_SUCCESS' (0) on success, or a negative error
     code.

     * Since:* 3.0.0

gnutls_pcert_deinit
-------------------

 -- Function: void gnutls_pcert_deinit (gnutls_pcert_st * PCERT)
     PCERT: The structure to be deinitialized

     * Description:* This function will deinitialize a pcert structure.

     * Since:* 3.0.0

gnutls_pcert_import_openpgp
---------------------------

 -- Function: int gnutls_pcert_import_openpgp (gnutls_pcert_st* PCERT,
          gnutls_openpgp_crt_t CRT, unsigned int FLAGS)
     PCERT: The pcert structure

     CRT: The raw certificate to be imported

     FLAGS: zero for now

     * Description:* This convenience function will import the given
     certificate to a `gnutls_pcert_st' structure. The structure must
     be deinitialized afterwards using `gnutls_pcert_deinit()';

     * Returns:* On success, `GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

     * Since:* 3.0.0

gnutls_pcert_import_openpgp_raw
-------------------------------

 -- Function: int gnutls_pcert_import_openpgp_raw (gnutls_pcert_st *
          PCERT, const gnutls_datum_t* CERT, gnutls_openpgp_crt_fmt_t
          FORMAT, gnutls_openpgp_keyid_t KEYID, unsigned int FLAGS)
     PCERT: The pcert structure

     CERT: The raw certificate to be imported

     FORMAT: The format of the certificate

     KEYID: The key ID to use (NULL for the master key)

     FLAGS: zero for now

     * Description:* This convenience function will import the given
     certificate to a `gnutls_pcert_st' structure. The structure must
     be deinitialized afterwards using `gnutls_pcert_deinit()';

     * Returns:* On success, `GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

     * Since:* 3.0.0

gnutls_pcert_import_x509
------------------------

 -- Function: int gnutls_pcert_import_x509 (gnutls_pcert_st* PCERT,
          gnutls_x509_crt_t CRT, unsigned int FLAGS)
     PCERT: The pcert structure

     CRT: The raw certificate to be imported

     FLAGS: zero for now

     * Description:* This convenience function will import the given
     certificate to a `gnutls_pcert_st' structure. The structure must
     be deinitialized afterwards using `gnutls_pcert_deinit()';

     * Returns:* On success, `GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

     * Since:* 3.0.0

gnutls_pcert_import_x509_raw
----------------------------

 -- Function: int gnutls_pcert_import_x509_raw (gnutls_pcert_st *
          PCERT, const gnutls_datum_t* CERT, gnutls_x509_crt_fmt_t
          FORMAT, unsigned int FLAGS)
     PCERT: The pcert structure

     CERT: The raw certificate to be imported

     FORMAT: The format of the certificate

     FLAGS: zero for now

     * Description:* This convenience function will import the given
     certificate to a `gnutls_pcert_st' structure. The structure must
     be deinitialized afterwards using `gnutls_pcert_deinit()';

     * Returns:* On success, `GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

     * Since:* 3.0.0

gnutls_pcert_list_import_x509_raw
---------------------------------

 -- Function: int gnutls_pcert_list_import_x509_raw (gnutls_pcert_st *
          PCERTS, unsigned int * PCERT_MAX, const gnutls_datum_t *
          DATA, gnutls_x509_crt_fmt_t FORMAT, unsigned int FLAGS)
     PCERTS: The structures to store the parsed certificate. Must not
     be initialized.

     PCERT_MAX: Initially must hold the maximum number of certs. It
     will be updated with the number of certs available.

     DATA: The certificates.

     FORMAT: One of DER or PEM.

     FLAGS: must be (0) or an OR'd sequence of
     gnutls_certificate_import_flags.

     * Description:* This function will convert the given PEM encoded
     certificate list to the native gnutls_x509_crt_t format. The
     output will be stored in  `certs'.  They will be automatically
     initialized.

     If the Certificate is PEM encoded it should have a header of "X509
     CERTIFICATE", or "CERTIFICATE".

     * Returns:* the number of certificates read or a negative error
     value.

     * Since:* 3.0.0

gnutls_privkey_decrypt_data
---------------------------

 -- Function: int gnutls_privkey_decrypt_data (gnutls_privkey_t KEY,
          unsigned int FLAGS, const gnutls_datum_t * CIPHERTEXT,
          gnutls_datum_t * PLAINTEXT)
     KEY: Holds the key

     FLAGS: zero for now

     CIPHERTEXT: holds the data to be decrypted

     PLAINTEXT: will contain the decrypted data, allocated with
     `gnutls_malloc()'

     * Description:* This function will decrypt the given data using
     the algorithm supported by the private key.

     * Returns:* On success, `GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

     * Since:* 2.12.0

gnutls_privkey_deinit
---------------------

 -- Function: void gnutls_privkey_deinit (gnutls_privkey_t KEY)
     KEY: The structure to be deinitialized

     * Description:* This function will deinitialize a private key
     structure.

     * Since:* 2.12.0

gnutls_privkey_get_pk_algorithm
-------------------------------

 -- Function: int gnutls_privkey_get_pk_algorithm (gnutls_privkey_t
          KEY, unsigned int * BITS)
     KEY: should contain a `gnutls_privkey_t' structure

     BITS: If set will return the number of bits of the parameters (may
     be NULL)

     * Description:* This function will return the public key algorithm
     of a private key and if possible will return a number of bits that
     indicates the security parameter of the key.

     * Returns:* a member of the `gnutls_pk_algorithm_t' enumeration on
     success, or a negative error code on error.

     * Since:* 2.12.0

gnutls_privkey_get_type
-----------------------

 -- Function: gnutls_privkey_type_t gnutls_privkey_get_type
          (gnutls_privkey_t KEY)
     KEY: should contain a `gnutls_privkey_t' structure

     * Description:* This function will return the type of the private
     key. This is actually the type of the subsystem used to set this
     private key.

     * Returns:* a member of the `gnutls_privkey_type_t' enumeration on
     success, or a negative error code on error.

     * Since:* 2.12.0

gnutls_privkey_import_ext
-------------------------

 -- Function: int gnutls_privkey_import_ext (gnutls_privkey_t PKEY,
          gnutls_pk_algorithm_t PK, void* USERDATA,
          gnutls_privkey_sign_func SIGN_FUNC,
          gnutls_privkey_decrypt_func DECRYPT_FUNC, unsigned int FLAGS)
     PKEY: The private key

     PK: The public key algorithm

     USERDATA: private data to be provided to the callbacks

     SIGN_FUNC: callback for signature operations

     DECRYPT_FUNC: callback for decryption operations

     FLAGS: Flags for the import

     * Description:* This function will associate the given callbacks
     with the `gnutls_privkey_t' structure. At least one of the two
     callbacks must be non-null.

     * Returns:* On success, `GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

     * Since:* 3.0.0

gnutls_privkey_import_openpgp
-----------------------------

 -- Function: int gnutls_privkey_import_openpgp (gnutls_privkey_t PKEY,
          gnutls_openpgp_privkey_t KEY, unsigned int FLAGS)
     PKEY: The private key

     KEY: The private key to be imported

     FLAGS: Flags for the import

     * Description:* This function will import the given private key to
     the abstract `gnutls_privkey_t' structure.

     The `gnutls_openpgp_privkey_t' object must not be deallocated
     during the lifetime of this structure. The subkey set as preferred
     will be used, or the master key otherwise.

     `flags'might be zero or one of `GNUTLS_PRIVKEY_IMPORT_AUTO_RELEASE'
     and `GNUTLS_PRIVKEY_IMPORT_COPY'.

     * Returns:* On success, `GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

     * Since:* 2.12.0

gnutls_privkey_import_pkcs11
----------------------------

 -- Function: int gnutls_privkey_import_pkcs11 (gnutls_privkey_t PKEY,
          gnutls_pkcs11_privkey_t KEY, unsigned int FLAGS)
     PKEY: The private key

     KEY: The private key to be imported

     FLAGS: Flags for the import

     * Description:* This function will import the given private key to
     the abstract `gnutls_privkey_t' structure.

     The `gnutls_pkcs11_privkey_t' object must not be deallocated
     during the lifetime of this structure.

     `flags'might be zero or one of `GNUTLS_PRIVKEY_IMPORT_AUTO_RELEASE'
     and `GNUTLS_PRIVKEY_IMPORT_COPY'.

     * Returns:* On success, `GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

     * Since:* 2.12.0

gnutls_privkey_import_x509
--------------------------

 -- Function: int gnutls_privkey_import_x509 (gnutls_privkey_t PKEY,
          gnutls_x509_privkey_t KEY, unsigned int FLAGS)
     PKEY: The private key

     KEY: The private key to be imported

     FLAGS: Flags for the import

     * Description:* This function will import the given private key to
     the abstract `gnutls_privkey_t' structure.

     The `gnutls_x509_privkey_t' object must not be deallocated during
     the lifetime of this structure.

     `flags'might be zero or one of `GNUTLS_PRIVKEY_IMPORT_AUTO_RELEASE'
     and `GNUTLS_PRIVKEY_IMPORT_COPY'.

     * Returns:* On success, `GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

     * Since:* 2.12.0

gnutls_privkey_init
-------------------

 -- Function: int gnutls_privkey_init (gnutls_privkey_t * KEY)
     KEY: The structure to be initialized

     * Description:* This function will initialize an private key
     structure.

     * Returns:* On success, `GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

     * Since:* 2.12.0

gnutls_privkey_sign_data
------------------------

 -- Function: int gnutls_privkey_sign_data (gnutls_privkey_t SIGNER,
          gnutls_digest_algorithm_t HASH, unsigned int FLAGS, const
          gnutls_datum_t * DATA, gnutls_datum_t * SIGNATURE)
     SIGNER: Holds the key

     HASH: should be a digest algorithm

     FLAGS: should be 0 for now

     DATA: holds the data to be signed

     SIGNATURE: will contain the signature allocate with
     `gnutls_malloc()'

     * Description:* This function will sign the given data using a
     signature algorithm supported by the private key. Signature
     algorithms are always used together with a hash functions.
     Different hash functions may be used for the RSA algorithm, but
     only the SHA family for the DSA keys.

     Use `gnutls_pubkey_get_preferred_hash_algorithm()' to determine
     the hash algorithm.

     * Returns:* On success, `GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

     * Since:* 2.12.0

gnutls_privkey_sign_hash
------------------------

 -- Function: int gnutls_privkey_sign_hash (gnutls_privkey_t SIGNER,
          gnutls_digest_algorithm_t HASH_ALGO, unsigned int FLAGS,
          const gnutls_datum_t * HASH_DATA, gnutls_datum_t * SIGNATURE)
     SIGNER: Holds the signer's key

     HASH_ALGO: The hash algorithm used

     FLAGS: zero for now

     HASH_DATA: holds the data to be signed

     SIGNATURE: will contain newly allocated signature

     * Description:* This function will sign the given hashed data
     using a signature algorithm supported by the private key.
     Signature algorithms are always used together with a hash
     functions.  Different hash functions may be used for the RSA
     algorithm, but only SHA-XXX for the DSA keys.

     Use `gnutls_pubkey_get_preferred_hash_algorithm()' to determine
     the hash algorithm.

     * Returns:* On success, `GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

     * Since:* 2.12.0

gnutls_pubkey_deinit
--------------------

 -- Function: void gnutls_pubkey_deinit (gnutls_pubkey_t KEY)
     KEY: The structure to be deinitialized

     * Description:* This function will deinitialize a public key
     structure.

     * Since:* 2.12.0

gnutls_pubkey_export
--------------------

 -- Function: int gnutls_pubkey_export (gnutls_pubkey_t KEY,
          gnutls_x509_crt_fmt_t FORMAT, void * OUTPUT_DATA, size_t *
          OUTPUT_DATA_SIZE)
     KEY: Holds the certificate

     FORMAT: the format of output params. One of PEM or DER.

     OUTPUT_DATA: will contain a certificate PEM or DER encoded

     OUTPUT_DATA_SIZE: holds the size of output_data (and will be
     replaced by the actual size of parameters)

     * Description:* This function will export the certificate to DER
     or PEM format.

     If the buffer provided is not long enough to hold the output, then
     *output_data_size is updated and `GNUTLS_E_SHORT_MEMORY_BUFFER'
     will be returned.

     If the structure is PEM encoded, it will have a header of "BEGIN
     CERTIFICATE".

     * Returns:* In case of failure a negative error code will be
     returned, and 0 on success.

     * Since:* 2.12.0

gnutls_pubkey_get_key_id
------------------------

 -- Function: int gnutls_pubkey_get_key_id (gnutls_pubkey_t KEY,
          unsigned int FLAGS, unsigned char * OUTPUT_DATA, size_t *
          OUTPUT_DATA_SIZE)
     KEY: Holds the public key

     FLAGS: should be 0 for now

     OUTPUT_DATA: will contain the key ID

     OUTPUT_DATA_SIZE: holds the size of output_data (and will be
     replaced by the actual size of parameters)

     * Description:* This function will return a unique ID the depends
     on the public key parameters. This ID can be used in checking
     whether a certificate corresponds to the given public key.

     If the buffer provided is not long enough to hold the output, then
     *output_data_size is updated and `GNUTLS_E_SHORT_MEMORY_BUFFER'
     will be returned.  The output will normally be a SHA-1 hash output,
     which is 20 bytes.

     * Returns:* In case of failure a negative error code will be
     returned, and 0 on success.

     * Since:* 2.12.0

gnutls_pubkey_get_key_usage
---------------------------

 -- Function: int gnutls_pubkey_get_key_usage (gnutls_pubkey_t KEY,
          unsigned int * USAGE)
     KEY: should contain a `gnutls_pubkey_t' structure

     USAGE: If set will return the number of bits of the parameters
     (may be NULL)

     * Description:* This function will return the key usage of the
     public key.

     * Returns:* On success, `GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

     * Since:* 2.12.0

gnutls_pubkey_get_openpgp_key_id
--------------------------------

 -- Function: int gnutls_pubkey_get_openpgp_key_id (gnutls_pubkey_t
          KEY, unsigned int FLAGS, unsigned char * OUTPUT_DATA, size_t
          * OUTPUT_DATA_SIZE, unsigned int * SUBKEY)
     KEY: Holds the public key

     FLAGS: should be 0 for now

     OUTPUT_DATA: will contain the key ID

     OUTPUT_DATA_SIZE: holds the size of output_data (and will be
     replaced by the actual size of parameters)

     SUBKEY: Will be non zero if the key ID corresponds to a subkey

     * Description:* This function will return a unique ID the depends
     on the public key parameters. This ID can be used in checking
     whether a certificate corresponds to the given public key.

     If the buffer provided is not long enough to hold the output, then
     *output_data_size is updated and `GNUTLS_E_SHORT_MEMORY_BUFFER'
     will be returned.  The output will normally be a SHA-1 hash output,
     which is 20 bytes.

     * Returns:* In case of failure a negative error code will be
     returned, and 0 on success.

     * Since:* 3.0.0

gnutls_pubkey_get_pk_algorithm
------------------------------

 -- Function: int gnutls_pubkey_get_pk_algorithm (gnutls_pubkey_t KEY,
          unsigned int * BITS)
     KEY: should contain a `gnutls_pubkey_t' structure

     BITS: If set will return the number of bits of the parameters (may
     be NULL)

     * Description:* This function will return the public key algorithm
     of a public key and if possible will return a number of bits that
     indicates the security parameter of the key.

     * Returns:* a member of the `gnutls_pk_algorithm_t' enumeration on
     success, or a negative error code on error.

     * Since:* 2.12.0

gnutls_pubkey_get_pk_dsa_raw
----------------------------

 -- Function: int gnutls_pubkey_get_pk_dsa_raw (gnutls_pubkey_t KEY,
          gnutls_datum_t * P, gnutls_datum_t * Q, gnutls_datum_t * G,
          gnutls_datum_t * Y)
     KEY: Holds the public key

     P: will hold the p

     Q: will hold the q

     G: will hold the g

     Y: will hold the y

     * Description:* This function will export the DSA public key's
     parameters found in the given certificate.  The new parameters
     will be allocated using `gnutls_malloc()' and will be stored in
     the appropriate datum.

     * Returns:* `GNUTLS_E_SUCCESS' on success, otherwise a negative
     error code.

     * Since:* 2.12.0

gnutls_pubkey_get_pk_ecc_raw
----------------------------

 -- Function: int gnutls_pubkey_get_pk_ecc_raw (gnutls_pubkey_t KEY,
          gnutls_ecc_curve_t * CURVE, gnutls_datum_t * X,
          gnutls_datum_t * Y)
     KEY: Holds the public key

     CURVE: will hold the curve

     X: will hold x

     Y: will hold y

     * Description:* This function will export the ECC public key's
     parameters found in the given certificate.  The new parameters
     will be allocated using `gnutls_malloc()' and will be stored in
     the appropriate datum.

     * Returns:* `GNUTLS_E_SUCCESS' on success, otherwise a negative
     error code.

     * Since:* 3.0.0

gnutls_pubkey_get_pk_ecc_x962
-----------------------------

 -- Function: int gnutls_pubkey_get_pk_ecc_x962 (gnutls_pubkey_t KEY,
          gnutls_datum_t* PARAMETERS, gnutls_datum_t * ECPOINT)
     KEY: Holds the public key

     PARAMETERS: DER encoding of an ANSI X9.62 parameters

     ECPOINT: DER encoding of ANSI X9.62 ECPoint

     * Description:* This function will export the ECC public key's
     parameters found in the given certificate.  The new parameters
     will be allocated using `gnutls_malloc()' and will be stored in
     the appropriate datum.

     * Returns:* `GNUTLS_E_SUCCESS' on success, otherwise a negative
     error code.

     * Since:* 3.0.0

gnutls_pubkey_get_pk_rsa_raw
----------------------------

 -- Function: int gnutls_pubkey_get_pk_rsa_raw (gnutls_pubkey_t KEY,
          gnutls_datum_t * M, gnutls_datum_t * E)
     KEY: Holds the certificate

     M: will hold the modulus

     E: will hold the public exponent

     * Description:* This function will export the RSA public key's
     parameters found in the given structure.  The new parameters will
     be allocated using `gnutls_malloc()' and will be stored in the
     appropriate datum.

     * Returns:* `GNUTLS_E_SUCCESS' on success, otherwise a negative
     error code.

     * Since:* 2.12.0

gnutls_pubkey_get_preferred_hash_algorithm
------------------------------------------

 -- Function: int gnutls_pubkey_get_preferred_hash_algorithm
          (gnutls_pubkey_t KEY, gnutls_digest_algorithm_t * HASH,
          unsigned int * MAND)
     KEY: Holds the certificate

     HASH: The result of the call with the hash algorithm used for
     signature

     MAND: If non zero it means that the algorithm MUST use this hash.
     May be NULL.

     * Description:* This function will read the certifcate and return
     the appropriate digest algorithm to use for signing with this
     certificate. Some certificates (i.e.  DSA might not be able to
     sign without the preferred algorithm).

     * Returns:* the 0 if the hash algorithm is found. A negative error
     code is returned on error.

     * Since:* 2.12.0

gnutls_pubkey_get_verify_algorithm
----------------------------------

 -- Function: int gnutls_pubkey_get_verify_algorithm (gnutls_pubkey_t
          KEY, const gnutls_datum_t * SIGNATURE,
          gnutls_digest_algorithm_t * HASH)
     KEY: Holds the certificate

     SIGNATURE: contains the signature

     HASH: The result of the call with the hash algorithm used for
     signature

     * Description:* This function will read the certifcate and the
     signed data to determine the hash algorithm used to generate the
     signature.

     * Returns:* On success, `GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

     * Since:* 2.12.0

gnutls_pubkey_import
--------------------

 -- Function: int gnutls_pubkey_import (gnutls_pubkey_t KEY, const
          gnutls_datum_t * DATA, gnutls_x509_crt_fmt_t FORMAT)
     KEY: The structure to store the parsed public key.

     DATA: The DER or PEM encoded certificate.

     FORMAT: One of DER or PEM

     * Description:* This function will convert the given DER or PEM
     encoded Public key to the native gnutls_pubkey_t format.The output
     will be stored in  `key'.  If the Certificate is PEM encoded it
     should have a header of "PUBLIC KEY".

     * Returns:* On success, `GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

     * Since:* 2.12.0

gnutls_pubkey_import_dsa_raw
----------------------------

 -- Function: int gnutls_pubkey_import_dsa_raw (gnutls_pubkey_t KEY,
          const gnutls_datum_t * P, const gnutls_datum_t * Q, const
          gnutls_datum_t * G, const gnutls_datum_t * Y)
     KEY: The structure to store the parsed key

     P: holds the p

     Q: holds the q

     G: holds the g

     Y: holds the y

     * Description:* This function will convert the given DSA raw
     parameters to the native `gnutls_pubkey_t' format.  The output
     will be stored in  `key'.

     * Returns:* On success, `GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

     * Since:* 2.12.0

gnutls_pubkey_import_ecc_raw
----------------------------

 -- Function: int gnutls_pubkey_import_ecc_raw (gnutls_pubkey_t KEY,
          gnutls_ecc_curve_t CURVE, const gnutls_datum_t * X, const
          gnutls_datum_t * Y)
     KEY: The structure to store the parsed key

     CURVE: holds the curve

     X: holds the x

     Y: holds the y

     * Description:* This function will convert the given elliptic
     curve parameters to a `gnutls_pubkey_t'.  The output will be
     stored in  `key'.

     * Returns:* On success, `GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

     * Since:* 3.0.0

gnutls_pubkey_import_ecc_x962
-----------------------------

 -- Function: int gnutls_pubkey_import_ecc_x962 (gnutls_pubkey_t KEY,
          const gnutls_datum_t * PARAMETERS, const gnutls_datum_t *
          ECPOINT)
     KEY: The structure to store the parsed key

     PARAMETERS: DER encoding of an ANSI X9.62 parameters

     ECPOINT: DER encoding of ANSI X9.62 ECPoint

     * Description:* This function will convert the given elliptic
     curve parameters to a `gnutls_pubkey_t'.  The output will be
     stored in  `key'.

     * Returns:* On success, `GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

     * Since:* 3.0.0

gnutls_pubkey_import_openpgp
----------------------------

 -- Function: int gnutls_pubkey_import_openpgp (gnutls_pubkey_t KEY,
          gnutls_openpgp_crt_t CRT, unsigned int FLAGS)
     KEY: The public key

     CRT: The certificate to be imported

     FLAGS: should be zero

     * Description:* Imports a public key from an openpgp key. This
     function will import the given public key to the abstract
     `gnutls_pubkey_t' structure. The subkey set as preferred will be
     imported or the master key otherwise.

     * Returns:* On success, `GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

     * Since:* 2.12.0

gnutls_pubkey_import_pkcs11
---------------------------

 -- Function: int gnutls_pubkey_import_pkcs11 (gnutls_pubkey_t KEY,
          gnutls_pkcs11_obj_t OBJ, unsigned int FLAGS)
     KEY: The public key

     OBJ: The parameters to be imported

     FLAGS: should be zero

     * Description:* Imports a public key from a pkcs11 key. This
     function will import the given public key to the abstract
     `gnutls_pubkey_t' structure.

     * Returns:* On success, `GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

     * Since:* 2.12.0

gnutls_pubkey_import_pkcs11_url
-------------------------------

 -- Function: int gnutls_pubkey_import_pkcs11_url (gnutls_pubkey_t KEY,
          const char * URL, unsigned int FLAGS)
     KEY: A key of type `gnutls_pubkey_t'

     URL: A PKCS 11 url

     FLAGS: One of GNUTLS_PKCS11_OBJ_* flags

     * Description:* This function will import a PKCS 11 certificate to
     a `gnutls_pubkey_t' structure.

     * Returns:* On success, `GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

     * Since:* 2.12.0

gnutls_pubkey_import_privkey
----------------------------

 -- Function: int gnutls_pubkey_import_privkey (gnutls_pubkey_t KEY,
          gnutls_privkey_t PKEY, unsigned int USAGE, unsigned int FLAGS)
     KEY: The public key

     PKEY: The private key

     USAGE: GNUTLS_KEY_* key usage flags.

     FLAGS: should be zero

     * Description:* Imports the public key from a private.  This
     function will import the given public key to the abstract
     `gnutls_pubkey_t' structure.

     * Returns:* On success, `GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

     * Since:* 2.12.0

gnutls_pubkey_import_rsa_raw
----------------------------

 -- Function: int gnutls_pubkey_import_rsa_raw (gnutls_pubkey_t KEY,
          const gnutls_datum_t * M, const gnutls_datum_t * E)
     KEY: Is a structure will hold the parameters

     M: holds the modulus

     E: holds the public exponent

     * Description:* This function will replace the parameters in the
     given structure.  The new parameters should be stored in the
     appropriate gnutls_datum.

     * Returns:* `GNUTLS_E_SUCCESS' on success, or an negative error
     code.

     * Since:* 2.12.0

gnutls_pubkey_import_x509
-------------------------

 -- Function: int gnutls_pubkey_import_x509 (gnutls_pubkey_t KEY,
          gnutls_x509_crt_t CRT, unsigned int FLAGS)
     KEY: The public key

     CRT: The certificate to be imported

     FLAGS: should be zero

     * Description:* This function will import the given public key to
     the abstract `gnutls_pubkey_t' structure.

     * Returns:* On success, `GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

     * Since:* 2.12.0

gnutls_pubkey_init
------------------

 -- Function: int gnutls_pubkey_init (gnutls_pubkey_t * KEY)
     KEY: The structure to be initialized

     * Description:* This function will initialize an public key
     structure.

     * Returns:* On success, `GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

     * Since:* 2.12.0

gnutls_pubkey_set_key_usage
---------------------------

 -- Function: int gnutls_pubkey_set_key_usage (gnutls_pubkey_t KEY,
          unsigned int USAGE)
     KEY: a certificate of type `gnutls_x509_crt_t'

     USAGE: an ORed sequence of the GNUTLS_KEY_* elements.

     * Description:* This function will set the key usage flags of the
     public key. This is only useful if the key is to be exported to a
     certificate or certificate request.

     * Returns:* On success, `GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

     * Since:* 2.12.0

gnutls_pubkey_verify_data
-------------------------

 -- Function: int gnutls_pubkey_verify_data (gnutls_pubkey_t PUBKEY,
          unsigned int FLAGS, const gnutls_datum_t * DATA, const
          gnutls_datum_t * SIGNATURE)
     PUBKEY: Holds the public key

     FLAGS: should be 0 for now

     DATA: holds the signed data

     SIGNATURE: contains the signature

     * Description:* This function will verify the given signed data,
     using the parameters from the certificate.

     * Returns:* On success, `GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value (`GNUTLS_E_PK_SIG_VERIFY_FAILED'
     in verification failure).

     * Since:* 2.12.0

gnutls_pubkey_verify_data2
--------------------------

 -- Function: int gnutls_pubkey_verify_data2 (gnutls_pubkey_t PUBKEY,
          gnutls_sign_algorithm_t ALGO, unsigned int FLAGS, const
          gnutls_datum_t * DATA, const gnutls_datum_t * SIGNATURE)
     PUBKEY: Holds the public key

     ALGO: The signature algorithm used

     FLAGS: should be 0 for now

     DATA: holds the signed data

     SIGNATURE: contains the signature

     * Description:* This function will verify the given signed data,
     using the parameters from the certificate.

     * Returns:* On success, `GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value (`GNUTLS_E_PK_SIG_VERIFY_FAILED'
     in verification failure).

     * Since:* 3.0.0

gnutls_pubkey_verify_hash
-------------------------

 -- Function: int gnutls_pubkey_verify_hash (gnutls_pubkey_t KEY,
          unsigned int FLAGS, const gnutls_datum_t * HASH, const
          gnutls_datum_t * SIGNATURE)
     KEY: Holds the certificate

     FLAGS: should be 0 for now

     HASH: holds the hash digest to be verified

     SIGNATURE: contains the signature

     * Description:* This function will verify the given signed digest,
     using the parameters from the certificate.

     * Returns:* On success, `GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value (`GNUTLS_E_PK_SIG_VERIFY_FAILED'
     in verification failure).

     * Since:* 2.12.0

gnutls_x509_crl_privkey_sign
----------------------------

 -- Function: int gnutls_x509_crl_privkey_sign (gnutls_x509_crl_t CRL,
          gnutls_x509_crt_t ISSUER, gnutls_privkey_t ISSUER_KEY,
          gnutls_digest_algorithm_t DIG, unsigned int FLAGS)
     CRL: should contain a gnutls_x509_crl_t structure

     ISSUER: is the certificate of the certificate issuer

     ISSUER_KEY: holds the issuer's private key

     DIG: The message digest to use. GNUTLS_DIG_SHA1 is the safe choice
     unless you know what you're doing.

     FLAGS: must be 0

     * Description:* This function will sign the CRL with the issuer's
     private key, and will copy the issuer's information into the CRL.

     This must be the last step in a certificate CRL since all the
     previously set parameters are now signed.

     * Returns:* On success, `GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

     Since 2.12.0

gnutls_x509_crq_privkey_sign
----------------------------

 -- Function: int gnutls_x509_crq_privkey_sign (gnutls_x509_crq_t CRQ,
          gnutls_privkey_t KEY, gnutls_digest_algorithm_t DIG, unsigned
          int FLAGS)
     CRQ: should contain a `gnutls_x509_crq_t' structure

     KEY: holds a private key

     DIG: The message digest to use, i.e., `GNUTLS_DIG_SHA1'

     FLAGS: must be 0

     * Description:* This function will sign the certificate request
     with a private key.  This must be the same key as the one used in
     `gnutls_x509_crt_set_key()' since a certificate request is self
     signed.

     This must be the last step in a certificate request generation
     since all the previously set parameters are now signed.

     * Returns:* `GNUTLS_E_SUCCESS' on success, otherwise a negative
     error code.  `GNUTLS_E_ASN1_VALUE_NOT_FOUND' is returned if you
     didn't set all information in the certificate request (e.g., the
     version using `gnutls_x509_crq_set_version()').

     * Since:* 2.12.0

gnutls_x509_crq_set_pubkey
--------------------------

 -- Function: int gnutls_x509_crq_set_pubkey (gnutls_x509_crq_t CRQ,
          gnutls_pubkey_t KEY)
     CRQ: should contain a `gnutls_x509_crq_t' structure

     KEY: holds a public key

     * Description:* This function will set the public parameters from
     the given public key to the request.

     * Returns:* On success, `GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

     * Since:* 2.12.0

gnutls_x509_crt_privkey_sign
----------------------------

 -- Function: int gnutls_x509_crt_privkey_sign (gnutls_x509_crt_t CRT,
          gnutls_x509_crt_t ISSUER, gnutls_privkey_t ISSUER_KEY,
          gnutls_digest_algorithm_t DIG, unsigned int FLAGS)
     CRT: a certificate of type `gnutls_x509_crt_t'

     ISSUER: is the certificate of the certificate issuer

     ISSUER_KEY: holds the issuer's private key

     DIG: The message digest to use, `GNUTLS_DIG_SHA1' is a safe choice

     FLAGS: must be 0

     * Description:* This function will sign the certificate with the
     issuer's private key, and will copy the issuer's information into
     the certificate.

     This must be the last step in a certificate generation since all
     the previously set parameters are now signed.

     * Returns:* On success, `GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

gnutls_x509_crt_set_pubkey
--------------------------

 -- Function: int gnutls_x509_crt_set_pubkey (gnutls_x509_crt_t CRT,
          gnutls_pubkey_t KEY)
     CRT: should contain a `gnutls_x509_crt_t' structure

     KEY: holds a public key

     * Description:* This function will set the public parameters from
     the given public key to the request.

     * Returns:* On success, `GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

     * Since:* 2.12.0


File: gnutls.info,  Node: Cryptographic API,  Next: Compatibility API,  Prev: Abstract key API,  Up: API reference

C.8 Cryptographic API
=====================

The following functions are to be used for low-level cryptographic
operations.  Their prototypes lie in `gnutls/crypto.h'.

gnutls_cipher_add_auth
----------------------

 -- Function: int gnutls_cipher_add_auth (gnutls_cipher_hd_t HANDLE,
          const void * TEXT, size_t TEXT_SIZE)
     HANDLE: is a `gnutls_cipher_hd_t' structure.

     TEXT: the data to be authenticated

     TEXT_SIZE: The length of the data

     * Description:* This function operates on authenticated encryption
     with associated data (AEAD) ciphers and authenticate the input
     data. This function can only be called once and before any
     encryption operations.

     * Returns:* Zero or a negative error code on error.

     * Since:* 3.0.0

gnutls_cipher_decrypt
---------------------

 -- Function: int gnutls_cipher_decrypt (gnutls_cipher_hd_t HANDLE,
          void * CIPHERTEXT, size_t CIPHERTEXTLEN)
     HANDLE: is a `gnutls_cipher_hd_t' structure.

     CIPHERTEXT: the data to encrypt

     CIPHERTEXTLEN: The length of data to encrypt

     * Description:* This function will decrypt the given data using
     the algorithm specified by the context.

     * Returns:* Zero or a negative error code on error.

     * Since:* 2.10.0

gnutls_cipher_decrypt2
----------------------

 -- Function: int gnutls_cipher_decrypt2 (gnutls_cipher_hd_t HANDLE,
          const void * CIPHERTEXT, size_t CIPHERTEXTLEN, void * TEXT,
          size_t TEXTLEN)
     HANDLE: is a `gnutls_cipher_hd_t' structure.

     CIPHERTEXT: the data to encrypt

     CIPHERTEXTLEN: The length of data to encrypt

     TEXT: the decrypted data

     TEXTLEN: The available length for decrypted data

     * Description:* This function will decrypt the given data using
     the algorithm specified by the context.

     * Returns:* Zero or a negative error code on error.

     * Since:* 2.12.0

gnutls_cipher_deinit
--------------------

 -- Function: void gnutls_cipher_deinit (gnutls_cipher_hd_t HANDLE)
     HANDLE: is a `gnutls_cipher_hd_t' structure.

     * Description:* This function will deinitialize all resources
     occupied by the given encryption context.

     * Since:* 2.10.0

gnutls_cipher_encrypt
---------------------

 -- Function: int gnutls_cipher_encrypt (gnutls_cipher_hd_t HANDLE,
          void * TEXT, size_t TEXTLEN)
     HANDLE: is a `gnutls_cipher_hd_t' structure.

     TEXT: the data to encrypt

     TEXTLEN: The length of data to encrypt

     * Description:* This function will encrypt the given data using
     the algorithm specified by the context.

     * Returns:* Zero or a negative error code on error.

     * Since:* 2.10.0

gnutls_cipher_encrypt2
----------------------

 -- Function: int gnutls_cipher_encrypt2 (gnutls_cipher_hd_t HANDLE,
          const void * TEXT, size_t TEXTLEN, void * CIPHERTEXT, size_t
          CIPHERTEXTLEN)
     HANDLE: is a `gnutls_cipher_hd_t' structure.

     TEXT: the data to encrypt

     TEXTLEN: The length of data to encrypt

     CIPHERTEXT: the encrypted data

     CIPHERTEXTLEN: The available length for encrypted data

     * Description:* This function will encrypt the given data using
     the algorithm specified by the context.

     * Returns:* Zero or a negative error code on error.

     * Since:* 2.12.0

gnutls_cipher_get_block_size
----------------------------

 -- Function: int gnutls_cipher_get_block_size
          (gnutls_cipher_algorithm_t ALGORITHM)
     ALGORITHM: is an encryption algorithm

     * Description:* Get block size for encryption algorithm.

     * Returns:* block size for encryption algorithm.

     * Since:* 2.10.0

gnutls_cipher_init
------------------

 -- Function: int gnutls_cipher_init (gnutls_cipher_hd_t * HANDLE,
          gnutls_cipher_algorithm_t CIPHER, const gnutls_datum_t * KEY,
          const gnutls_datum_t * IV)
     HANDLE: is a `gnutls_cipher_hd_t' structure.

     CIPHER: the encryption algorithm to use

     KEY: The key to be used for encryption

     IV: The IV to use (if not applicable set NULL)

     * Description:* This function will initialize an context that can
     be used for encryption/decryption of data. This will effectively
     use the current crypto backend in use by gnutls or the
     cryptographic accelerator in use.

     * Returns:* Zero or a negative error code on error.

     * Since:* 2.10.0

gnutls_cipher_set_iv
--------------------

 -- Function: void gnutls_cipher_set_iv (gnutls_cipher_hd_t HANDLE,
          void * IV, size_t IVLEN)
     HANDLE: is a `gnutls_cipher_hd_t' structure.

     IV: the IV to set

     IVLEN: The length of the IV

     * Description:* This function will set the IV to be used for the
     next encryption block.

     * Since:* 3.0.0

gnutls_cipher_tag
-----------------

 -- Function: int gnutls_cipher_tag (gnutls_cipher_hd_t HANDLE, void *
          TAG, size_t TAG_SIZE)
     HANDLE: is a `gnutls_cipher_hd_t' structure.

     TAG: will hold the tag

     TAG_SIZE: The length of the tag to return

     * Description:* This function operates on authenticated encryption
     with associated data (AEAD) ciphers and will return the output tag.

     * Returns:* Zero or a negative error code on error.

     * Since:* 3.0.0

gnutls_hash
-----------

 -- Function: int gnutls_hash (gnutls_hash_hd_t HANDLE, const void *
          TEXT, size_t TEXTLEN)
     HANDLE: is a `gnutls_cipher_hd_t' structure.

     TEXT: the data to hash

     TEXTLEN: The length of data to hash

     * Description:* This function will hash the given data using the
     algorithm specified by the context.

     * Returns:* Zero or a negative error code on error.

     * Since:* 2.10.0

gnutls_hash_deinit
------------------

 -- Function: void gnutls_hash_deinit (gnutls_hash_hd_t HANDLE, void *
          DIGEST)
     HANDLE: is a `gnutls_hash_hd_t' structure.

     DIGEST: is the output value of the hash

     * Description:* This function will deinitialize all resources
     occupied by the given hash context.

     * Since:* 2.10.0

gnutls_hash_fast
----------------

 -- Function: int gnutls_hash_fast (gnutls_digest_algorithm_t
          ALGORITHM, const void * TEXT, size_t TEXTLEN, void * DIGEST)
     ALGORITHM: the hash algorithm to use

     TEXT: the data to hash

     TEXTLEN: The length of data to hash

     DIGEST: is the output value of the hash

     * Description:* This convenience function will hash the given data
     and return output on a single call.

     * Returns:* Zero or a negative error code on error.

     * Since:* 2.10.0

gnutls_hash_get_len
-------------------

 -- Function: int gnutls_hash_get_len (gnutls_digest_algorithm_t
          ALGORITHM)
     ALGORITHM: the hash algorithm to use

     * Description:* This function will return the length of the output
     data of the given hash algorithm.

     * Returns:* The length or zero on error.

     * Since:* 2.10.0

gnutls_hash_init
----------------

 -- Function: int gnutls_hash_init (gnutls_hash_hd_t * DIG,
          gnutls_digest_algorithm_t ALGORITHM)
     DIG: is a `gnutls_hash_hd_t' structure.

     ALGORITHM: the hash algorithm to use

     * Description:* This function will initialize an context that can
     be used to produce a Message Digest of data.  This will
     effectively use the current crypto backend in use by gnutls or the
     cryptographic accelerator in use.

     * Returns:* Zero or a negative error code on error.

     * Since:* 2.10.0

gnutls_hash_output
------------------

 -- Function: void gnutls_hash_output (gnutls_hash_hd_t HANDLE, void *
          DIGEST)
     HANDLE: is a `gnutls_hash_hd_t' structure.

     DIGEST: is the output value of the hash

     * Description:* This function will output the current hash value.

     * Since:* 2.10.0

gnutls_hmac
-----------

 -- Function: int gnutls_hmac (gnutls_hmac_hd_t HANDLE, const void *
          TEXT, size_t TEXTLEN)
     HANDLE: is a `gnutls_cipher_hd_t' structure.

     TEXT: the data to hash

     TEXTLEN: The length of data to hash

     * Description:* This function will hash the given data using the
     algorithm specified by the context.

     * Returns:* Zero or a negative error code on error.

     * Since:* 2.10.0

gnutls_hmac_deinit
------------------

 -- Function: void gnutls_hmac_deinit (gnutls_hmac_hd_t HANDLE, void *
          DIGEST)
     HANDLE: is a `gnutls_hmac_hd_t' structure.

     DIGEST: is the output value of the MAC

     * Description:* This function will deinitialize all resources
     occupied by the given hmac context.

     * Since:* 2.10.0

gnutls_hmac_fast
----------------

 -- Function: int gnutls_hmac_fast (gnutls_mac_algorithm_t ALGORITHM,
          const void * KEY, size_t KEYLEN, const void * TEXT, size_t
          TEXTLEN, void * DIGEST)
     ALGORITHM: the hash algorithm to use

     KEY: the key to use

     KEYLEN: The length of the key

     TEXT: the data to hash

     TEXTLEN: The length of data to hash

     DIGEST: is the output value of the hash

     * Description:* This convenience function will hash the given data
     and return output on a single call.

     * Returns:* Zero or a negative error code on error.

     * Since:* 2.10.0

gnutls_hmac_get_len
-------------------

 -- Function: int gnutls_hmac_get_len (gnutls_mac_algorithm_t ALGORITHM)
     ALGORITHM: the hmac algorithm to use

     * Description:* This function will return the length of the output
     data of the given hmac algorithm.

     * Returns:* The length or zero on error.

     * Since:* 2.10.0

gnutls_hmac_init
----------------

 -- Function: int gnutls_hmac_init (gnutls_hmac_hd_t * DIG,
          gnutls_digest_algorithm_t ALGORITHM, const void * KEY, size_t
          KEYLEN)
     DIG: is a `gnutls_hmac_hd_t' structure.

     ALGORITHM: the HMAC algorithm to use

     KEY: The key to be used for encryption

     KEYLEN: The length of the key

     * Description:* This function will initialize an context that can
     be used to produce a Message Authentication Code (MAC) of data.
     This will effectively use the current crypto backend in use by
     gnutls or the cryptographic accelerator in use.

     * Returns:* Zero or a negative error code on error.

     * Since:* 2.10.0

gnutls_hmac_output
------------------

 -- Function: void gnutls_hmac_output (gnutls_hmac_hd_t HANDLE, void *
          DIGEST)
     HANDLE: is a `gnutls_hmac_hd_t' structure.

     DIGEST: is the output value of the MAC

     * Description:* This function will output the current MAC value.

     * Since:* 2.10.0

gnutls_rnd
----------

 -- Function: int gnutls_rnd (gnutls_rnd_level_t LEVEL, void * DATA,
          size_t LEN)
     LEVEL: a security level

     DATA: place to store random bytes

     LEN: The requested size

     * Description:* This function will generate random data and store
     it to output buffer.

     * Returns:* Zero or a negative error code on error.

     * Since:* 2.12.0


File: gnutls.info,  Node: Compatibility API,  Prev: Cryptographic API,  Up: API reference

C.9 Compatibility API
=====================

The following functions are carried over from old GnuTLS released. They
might be removed at a later version.  Their prototypes lie in
`gnutls/compat.h'.

gnutls_certificate_set_rsa_export_params
----------------------------------------

 -- Function: void gnutls_certificate_set_rsa_export_params
          (gnutls_certificate_credentials_t RES, gnutls_rsa_params_t
          RSA_PARAMS)
     RES: is a gnutls_certificate_credentials_t structure

     RSA_PARAMS: is a structure that holds temporary RSA parameters.

     * Description:* This function will set the temporary RSA
     parameters for a certificate server to use.  These parameters will
     be used in RSA-EXPORT cipher suites.

gnutls_certificate_type_set_priority
------------------------------------

 -- Function: int gnutls_certificate_type_set_priority
          (gnutls_session_t SESSION, const int * LIST)
     SESSION: is a `gnutls_session_t' structure.

     LIST: is a 0 terminated list of gnutls_certificate_type_t elements.

     * Description:* Sets the priority on the certificate types
     supported by gnutls.  Priority is higher for elements specified
     before others.  After specifying the types you want, you must
     append a 0.  Note that the certificate type priority is set on the
     client.  The server does not use the cert type priority except for
     disabling types that were not specified.

     * Returns:* `GNUTLS_E_SUCCESS' on success, or an error code.

gnutls_cipher_set_priority
--------------------------

 -- Function: int gnutls_cipher_set_priority (gnutls_session_t SESSION,
          const int * LIST)
     SESSION: is a `gnutls_session_t' structure.

     LIST: is a 0 terminated list of gnutls_cipher_algorithm_t elements.

     * Description:* Sets the priority on the ciphers supported by
     gnutls.  Priority is higher for elements specified before others.
     After specifying the ciphers you want, you must append a 0.  Note
     that the priority is set on the client. The server does not use
     the algorithm's priority except for disabling algorithms that were
     not specified.

     * Returns:* `GNUTLS_E_SUCCESS' (0) on success, or a negative error
     code.

gnutls_compression_set_priority
-------------------------------

 -- Function: int gnutls_compression_set_priority (gnutls_session_t
          SESSION, const int * LIST)
     SESSION: is a `gnutls_session_t' structure.

     LIST: is a 0 terminated list of gnutls_compression_method_t
     elements.

     * Description:* Sets the priority on the compression algorithms
     supported by gnutls.  Priority is higher for elements specified
     before others.  After specifying the algorithms you want, you must
     append a 0.  Note that the priority is set on the client. The
     server does not use the algorithm's priority except for disabling
     algorithms that were not specified.

     TLS 1.0 does not define any compression algorithms except NULL.
     Other compression algorithms are to be considered as gnutls
     extensions.

     * Returns:* `GNUTLS_E_SUCCESS' on success, or an error code.

gnutls_kx_set_priority
----------------------

 -- Function: int gnutls_kx_set_priority (gnutls_session_t SESSION,
          const int * LIST)
     SESSION: is a `gnutls_session_t' structure.

     LIST: is a 0 terminated list of gnutls_kx_algorithm_t elements.

     * Description:* Sets the priority on the key exchange algorithms
     supported by gnutls.  Priority is higher for elements specified
     before others.  After specifying the algorithms you want, you must
     append a 0.  Note that the priority is set on the client. The
     server does not use the algorithm's priority except for disabling
     algorithms that were not specified.

     * Returns:* `GNUTLS_E_SUCCESS' on success, or an error code.

gnutls_mac_set_priority
-----------------------

 -- Function: int gnutls_mac_set_priority (gnutls_session_t SESSION,
          const int * LIST)
     SESSION: is a `gnutls_session_t' structure.

     LIST: is a 0 terminated list of gnutls_mac_algorithm_t elements.

     * Description:* Sets the priority on the mac algorithms supported
     by gnutls.  Priority is higher for elements specified before
     others.  After specifying the algorithms you want, you must append
     a 0.  Note that the priority is set on the client. The server does
     not use the algorithm's priority except for disabling algorithms
     that were not specified.

     * Returns:* `GNUTLS_E_SUCCESS' on success, or an error code.

gnutls_openpgp_privkey_sign_hash
--------------------------------

 -- Function: int gnutls_openpgp_privkey_sign_hash
          (gnutls_openpgp_privkey_t KEY, const gnutls_datum_t * HASH,
          gnutls_datum_t * SIGNATURE)
     KEY: Holds the key

     HASH: holds the data to be signed

     SIGNATURE: will contain newly allocated signature

     * Description:* This function will sign the given hash using the
     private key.  You should use
     `gnutls_openpgp_privkey_set_preferred_key_id()' before calling
     this function to set the subkey to use.

     * Returns:* On success, `GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

     * Deprecated:* Use `gnutls_privkey_sign_hash()' instead.

gnutls_protocol_set_priority
----------------------------

 -- Function: int gnutls_protocol_set_priority (gnutls_session_t
          SESSION, const int * LIST)
     SESSION: is a `gnutls_session_t' structure.

     LIST: is a 0 terminated list of gnutls_protocol_t elements.

     * Description:* Sets the priority on the protocol versions
     supported by gnutls.  This function actually enables or disables
     protocols. Newer protocol versions always have highest priority.

     * Returns:* `GNUTLS_E_SUCCESS' on success, or an error code.

gnutls_rsa_export_get_modulus_bits
----------------------------------

 -- Function: int gnutls_rsa_export_get_modulus_bits (gnutls_session_t
          SESSION)
     SESSION: is a gnutls session

     * Description:* Get the export RSA parameter's modulus size.

     * Returns:* The bits used in the last RSA-EXPORT key exchange with
     the peer, or a negative error code in case of error.

gnutls_rsa_export_get_pubkey
----------------------------

 -- Function: int gnutls_rsa_export_get_pubkey (gnutls_session_t
          SESSION, gnutls_datum_t * EXPONENT, gnutls_datum_t * MODULUS)
     SESSION: is a gnutls session

     EXPONENT: will hold the exponent.

     MODULUS: will hold the modulus.

     * Description:* This function will return the peer's public key
     exponent and modulus used in the last RSA-EXPORT authentication.
     The output parameters must be freed with `gnutls_free()'.

     * Returns:* On success, `GNUTLS_E_SUCCESS' (0) is returned,
     otherwise an error code is returned.

gnutls_rsa_params_cpy
---------------------

 -- Function: int gnutls_rsa_params_cpy (gnutls_rsa_params_t DST,
          gnutls_rsa_params_t SRC)
     DST: Is the destination structure, which should be initialized.

     SRC: Is the source structure

     * Description:* This function will copy the RSA parameters
     structure from source to destination.

     * Returns:* `GNUTLS_E_SUCCESS' on success, or an negative error
     code.

gnutls_rsa_params_deinit
------------------------

 -- Function: void gnutls_rsa_params_deinit (gnutls_rsa_params_t
          RSA_PARAMS)
     RSA_PARAMS: Is a structure that holds the parameters

     * Description:* This function will deinitialize the RSA parameters
     structure.

gnutls_rsa_params_export_pkcs1
------------------------------

 -- Function: int gnutls_rsa_params_export_pkcs1 (gnutls_rsa_params_t
          PARAMS, gnutls_x509_crt_fmt_t FORMAT, unsigned char *
          PARAMS_DATA, size_t * PARAMS_DATA_SIZE)
     PARAMS: Holds the RSA parameters

     FORMAT: the format of output params. One of PEM or DER.

     PARAMS_DATA: will contain a PKCS1 RSAPublicKey structure PEM or
     DER encoded

     PARAMS_DATA_SIZE: holds the size of params_data (and will be
     replaced by the actual size of parameters)

     * Description:* This function will export the given RSA parameters
     to a PKCS1 RSAPublicKey structure. If the buffer provided is not
     long enough to hold the output, then GNUTLS_E_SHORT_MEMORY_BUFFER
     will be returned.

     If the structure is PEM encoded, it will have a header of "BEGIN
     RSA PRIVATE KEY".

     * Returns:* `GNUTLS_E_SUCCESS' on success, or an negative error
     code.

gnutls_rsa_params_export_raw
----------------------------

 -- Function: int gnutls_rsa_params_export_raw (gnutls_rsa_params_t
          RSA, gnutls_datum_t * M, gnutls_datum_t * E, gnutls_datum_t *
          D, gnutls_datum_t * P, gnutls_datum_t * Q, gnutls_datum_t *
          U, unsigned int * BITS)
     RSA: a structure that holds the rsa parameters

     M: will hold the modulus

     E: will hold the public exponent

     D: will hold the private exponent

     P: will hold the first prime (p)

     Q: will hold the second prime (q)

     U: will hold the coefficient

     BITS: if non null will hold the prime's number of bits

     * Description:* This function will export the RSA parameters found
     in the given structure. The new parameters will be allocated using
     `gnutls_malloc()' and will be stored in the appropriate datum.

     * Returns:* `GNUTLS_E_SUCCESS' on success, or an negative error
     code.

gnutls_rsa_params_generate2
---------------------------

 -- Function: int gnutls_rsa_params_generate2 (gnutls_rsa_params_t
          PARAMS, unsigned int BITS)
     PARAMS: The structure where the parameters will be stored

     BITS: is the prime's number of bits

     * Description:* This function will generate new temporary RSA
     parameters for use in RSA-EXPORT ciphersuites.  This function is
     normally slow.

     Note that if the parameters are to be used in export cipher suites
     the bits value should be 512 or less.  Also note that the
     generation of new RSA parameters is only useful to servers.
     Clients use the parameters sent by the server, thus it's no use
     calling this in client side.

     * Returns:* `GNUTLS_E_SUCCESS' on success, or an negative error
     code.

gnutls_rsa_params_import_pkcs1
------------------------------

 -- Function: int gnutls_rsa_params_import_pkcs1 (gnutls_rsa_params_t
          PARAMS, const gnutls_datum_t * PKCS1_PARAMS,
          gnutls_x509_crt_fmt_t FORMAT)
     PARAMS: A structure where the parameters will be copied to

     PKCS1_PARAMS: should contain a PKCS1 RSAPublicKey structure PEM or
     DER encoded

     FORMAT: the format of params. PEM or DER.

     * Description:* This function will extract the RSAPublicKey found
     in a PKCS1 formatted structure.

     If the structure is PEM encoded, it should have a header of "BEGIN
     RSA PRIVATE KEY".

     * Returns:* `GNUTLS_E_SUCCESS' on success, or an negative error
     code.

gnutls_rsa_params_import_raw
----------------------------

 -- Function: int gnutls_rsa_params_import_raw (gnutls_rsa_params_t
          RSA_PARAMS, const gnutls_datum_t * M, const gnutls_datum_t *
          E, const gnutls_datum_t * D, const gnutls_datum_t * P, const
          gnutls_datum_t * Q, const gnutls_datum_t * U)
     RSA_PARAMS: Is a structure will hold the parameters

     M: holds the modulus

     E: holds the public exponent

     D: holds the private exponent

     P: holds the first prime (p)

     Q: holds the second prime (q)

     U: holds the coefficient

     * Description:* This function will replace the parameters in the
     given structure.  The new parameters should be stored in the
     appropriate gnutls_datum.

     * Returns:* `GNUTLS_E_SUCCESS' on success, or an negative error
     code.

gnutls_rsa_params_init
----------------------

 -- Function: int gnutls_rsa_params_init (gnutls_rsa_params_t *
          RSA_PARAMS)
     RSA_PARAMS: Is a structure that will hold the parameters

     * Description:* This function will initialize the temporary RSA
     parameters structure.

     * Returns:* `GNUTLS_E_SUCCESS' on success, or an negative error
     code.

gnutls_set_default_export_priority
----------------------------------

 -- Function: int gnutls_set_default_export_priority (gnutls_session_t
          SESSION)
     SESSION: is a `gnutls_session_t' structure.

     * Description:* Sets some default priority on the ciphers, key
     exchange methods, macs and compression methods.  This function
     also includes weak algorithms.

     * This is the same as calling:* gnutls_priority_set_direct
     (session, "EXPORT", NULL);

     This function is kept around for backwards compatibility, but
     because of its wide use it is still fully supported.  If you wish
     to allow users to provide a string that specify which ciphers to
     use (which is recommended), you should use
     `gnutls_priority_set_direct()' or `gnutls_priority_set()' instead.

     * Returns:* `GNUTLS_E_SUCCESS' on success, or an error code.

gnutls_sign_callback_get
------------------------

 -- Function: gnutls_sign_func gnutls_sign_callback_get
          (gnutls_session_t SESSION, void ** USERDATA)
     SESSION: is a gnutls session

     USERDATA: if non-`NULL', will be set to abstract callback pointer.

     * Description:* Retrieve the callback function, and its userdata
     pointer.

     * Returns:* The function pointer set by
     `gnutls_sign_callback_set()', or if not set, `NULL'.

     * Deprecated:* Use the PKCS 11 interfaces instead.

gnutls_sign_callback_set
------------------------

 -- Function: void gnutls_sign_callback_set (gnutls_session_t SESSION,
          gnutls_sign_func SIGN_FUNC, void * USERDATA)
     SESSION: is a gnutls session

     SIGN_FUNC: function pointer to application's sign callback.

     USERDATA: void pointer that will be passed to sign callback.

     * Description:* Set the callback function.  The function must have
     this prototype:

     typedef int (*gnutls_sign_func) (gnutls_session_t session, void
     *userdata, gnutls_certificate_type_t cert_type, const
     gnutls_datum_t * cert, const gnutls_datum_t * hash, gnutls_datum_t
     * signature);

     The  `userdata'parameter is passed to the  `sign_func'verbatim, and
     can be used to store application-specific data needed in the
     callback function.  See also `gnutls_sign_callback_get()'.

     * Deprecated:* Use the PKCS 11 or `gnutls_privkey_t' interfacess
     like `gnutls_privkey_import_ext()' instead.

gnutls_x509_crl_sign
--------------------

 -- Function: int gnutls_x509_crl_sign (gnutls_x509_crl_t CRL,
          gnutls_x509_crt_t ISSUER, gnutls_x509_privkey_t ISSUER_KEY)
     CRL: should contain a gnutls_x509_crl_t structure

     ISSUER: is the certificate of the certificate issuer

     ISSUER_KEY: holds the issuer's private key

     * Description:* This function is the same a
     `gnutls_x509_crl_sign2()' with no flags, and SHA1 as the hash
     algorithm.

     * Returns:* On success, `GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

     * Deprecated:* Use `gnutls_x509_crl_privkey_sign()'.

gnutls_x509_crq_sign
--------------------

 -- Function: int gnutls_x509_crq_sign (gnutls_x509_crq_t CRQ,
          gnutls_x509_privkey_t KEY)
     CRQ: should contain a `gnutls_x509_crq_t' structure

     KEY: holds a private key

     * Description:* This function is the same a
     `gnutls_x509_crq_sign2()' with no flags, and SHA1 as the hash
     algorithm.

     * Returns:* On success, `GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

     * Deprecated:* Use `gnutls_x509_crq_privkey_sign()' instead.

gnutls_x509_crt_get_preferred_hash_algorithm
--------------------------------------------

 -- Function: int gnutls_x509_crt_get_preferred_hash_algorithm
          (gnutls_x509_crt_t CRT, gnutls_digest_algorithm_t * HASH,
          unsigned int * MAND)
     CRT: Holds the certificate

     HASH: The result of the call with the hash algorithm used for
     signature

     MAND: If non (0) it means that the algorithm MUST use this hash.
     May be NULL.

     * Description:* This function will read the certifcate and return
     the appropriate digest algorithm to use for signing with this
     certificate. Some certificates (i.e.  DSA might not be able to
     sign without the preferred algorithm).

     * Deprecated:* Please use
     `gnutls_pubkey_get_preferred_hash_algorithm()'.

     * Returns:* the 0 if the hash algorithm is found. A negative error
     code is returned on error.

     * Since:* 2.12.0

gnutls_x509_crt_get_verify_algorithm
------------------------------------

 -- Function: int gnutls_x509_crt_get_verify_algorithm
          (gnutls_x509_crt_t CRT, const gnutls_datum_t * SIGNATURE,
          gnutls_digest_algorithm_t * HASH)
     CRT: Holds the certificate

     SIGNATURE: contains the signature

     HASH: The result of the call with the hash algorithm used for
     signature

     * Description:* This function will read the certifcate and the
     signed data to determine the hash algorithm used to generate the
     signature.

     * Deprecated:* Use `gnutls_pubkey_get_verify_algorithm()' instead.

     * Returns:* the 0 if the hash algorithm is found. A negative error
     code is returned on error.

     * Since:* 2.8.0

gnutls_x509_crt_verify_data
---------------------------

 -- Function: int gnutls_x509_crt_verify_data (gnutls_x509_crt_t CRT,
          unsigned int FLAGS, const gnutls_datum_t * DATA, const
          gnutls_datum_t * SIGNATURE)
     CRT: Holds the certificate

     FLAGS: should be 0 for now

     DATA: holds the data to be signed

     SIGNATURE: contains the signature

     * Description:* This function will verify the given signed data,
     using the parameters from the certificate.

     Deprecated. Please use `gnutls_pubkey_verify_data()'.

     * Returns:* In case of a verification failure
     `GNUTLS_E_PK_SIG_VERIFY_FAILED' is returned, and a positive code
     on success.

gnutls_x509_crt_verify_hash
---------------------------

 -- Function: int gnutls_x509_crt_verify_hash (gnutls_x509_crt_t CRT,
          unsigned int FLAGS, const gnutls_datum_t * HASH, const
          gnutls_datum_t * SIGNATURE)
     CRT: Holds the certificate

     FLAGS: should be 0 for now

     HASH: holds the hash digest to be verified

     SIGNATURE: contains the signature

     * Description:* This function will verify the given signed digest,
     using the parameters from the certificate.

     Deprecated. Please use `gnutls_pubkey_verify_data()'.

     * Returns:* In case of a verification failure
     `GNUTLS_E_PK_SIG_VERIFY_FAILED' is returned, and a positive code
     on success.

gnutls_x509_privkey_sign_data
-----------------------------

 -- Function: int gnutls_x509_privkey_sign_data (gnutls_x509_privkey_t
          KEY, gnutls_digest_algorithm_t DIGEST, unsigned int FLAGS,
          const gnutls_datum_t * DATA, void * SIGNATURE, size_t *
          SIGNATURE_SIZE)
     KEY: Holds the key

     DIGEST: should be MD5 or SHA1

     FLAGS: should be 0 for now

     DATA: holds the data to be signed

     SIGNATURE: will contain the signature

     SIGNATURE_SIZE: holds the size of signature (and will be replaced
     by the new size)

     * Description:* This function will sign the given data using a
     signature algorithm supported by the private key. Signature
     algorithms are always used together with a hash functions.
     Different hash functions may be used for the RSA algorithm, but
     only SHA-1 for the DSA keys.

     If the buffer provided is not long enough to hold the output, then
     * `signature_size'is updated and `GNUTLS_E_SHORT_MEMORY_BUFFER'
     will be returned.

     Use `gnutls_x509_crt_get_preferred_hash_algorithm()' to determine
     the hash algorithm.

     * Returns:* On success, `GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

     * Deprecated:* Use `gnutls_privkey_sign_data()'.

gnutls_x509_privkey_sign_hash
-----------------------------

 -- Function: int gnutls_x509_privkey_sign_hash (gnutls_x509_privkey_t
          KEY, const gnutls_datum_t * HASH, gnutls_datum_t * SIGNATURE)
     KEY: Holds the key

     HASH: holds the data to be signed

     SIGNATURE: will contain newly allocated signature

     * Description:* This function will sign the given hash using the
     private key. Do not use this function directly unless you know
     what it is. Typical signing requires the data to be hashed and
     stored in special formats (e.g. BER Digest-Info for RSA).

     * Returns:* On success, `GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

     * Deprecated in:* 2.12.0


File: gnutls.info,  Node: Supported ciphersuites in GnuTLS,  Next: Copying Information,  Prev: API reference,  Up: Top

Appendix D Supported Ciphersuites in GnuTLS
*******************************************

Available cipher suites:
TLS_DH_ANON_ARCFOUR_MD5                     0x00 0x18      SSL3.0
TLS_DH_ANON_3DES_EDE_CBC_SHA1               0x00 0x1B      SSL3.0
TLS_DH_ANON_AES_128_CBC_SHA1                0x00 0x34      SSL3.0
TLS_DH_ANON_AES_256_CBC_SHA1                0x00 0x3A      SSL3.0
TLS_DH_ANON_CAMELLIA_128_CBC_SHA1           0x00 0x46      TLS1.0
TLS_DH_ANON_CAMELLIA_256_CBC_SHA1           0x00 0x89      TLS1.0
TLS_DH_ANON_AES_128_CBC_SHA256              0x00 0x6C      TLS1.2
TLS_DH_ANON_AES_256_CBC_SHA256              0x00 0x6D      TLS1.2
TLS_PSK_SHA_ARCFOUR_SHA1                    0x00 0x8A      TLS1.0
TLS_PSK_SHA_3DES_EDE_CBC_SHA1               0x00 0x8B      TLS1.0
TLS_PSK_SHA_AES_128_CBC_SHA1                0x00 0x8C      TLS1.0
TLS_PSK_SHA_AES_256_CBC_SHA1                0x00 0x8D      TLS1.0
TLS_PSK_AES_128_CBC_SHA256                  0x00 0xAE      TLS1.0
TLS_PSK_AES_128_GCM_SHA256                  0x00 0xA8      TLS1.2
TLS_PSK_NULL_SHA256                         0x00 0xB0      TLS1.0
TLS_DHE_PSK_SHA_ARCFOUR_SHA1                0x00 0x8E      TLS1.0
TLS_DHE_PSK_SHA_3DES_EDE_CBC_SHA1           0x00 0x8F      TLS1.0
TLS_DHE_PSK_SHA_AES_128_CBC_SHA1            0x00 0x90      TLS1.0
TLS_DHE_PSK_SHA_AES_256_CBC_SHA1            0x00 0x91      TLS1.0
TLS_DHE_PSK_AES_128_CBC_SHA256              0x00 0xB2      TLS1.0
TLS_DHE_PSK_AES_128_GCM_SHA256              0x00 0xAA      TLS1.2
TLS_DHE_PSK_NULL_SHA256                     0x00 0xB4      TLS1.0
TLS_SRP_SHA_3DES_EDE_CBC_SHA1               0xC0 0x1A      TLS1.0
TLS_SRP_SHA_AES_128_CBC_SHA1                0xC0 0x1D      TLS1.0
TLS_SRP_SHA_AES_256_CBC_SHA1                0xC0 0x20      TLS1.0
TLS_SRP_SHA_DSS_3DES_EDE_CBC_SHA1           0xC0 0x1C      TLS1.0
TLS_SRP_SHA_RSA_3DES_EDE_CBC_SHA1           0xC0 0x1B      TLS1.0
TLS_SRP_SHA_DSS_AES_128_CBC_SHA1            0xC0 0x1F      TLS1.0
TLS_SRP_SHA_RSA_AES_128_CBC_SHA1            0xC0 0x1E      TLS1.0
TLS_SRP_SHA_DSS_AES_256_CBC_SHA1            0xC0 0x22      TLS1.0
TLS_SRP_SHA_RSA_AES_256_CBC_SHA1            0xC0 0x21      TLS1.0
TLS_DHE_DSS_ARCFOUR_SHA1                    0x00 0x66      TLS1.0
TLS_DHE_DSS_3DES_EDE_CBC_SHA1               0x00 0x13      SSL3.0
TLS_DHE_DSS_AES_128_CBC_SHA1                0x00 0x32      SSL3.0
TLS_DHE_DSS_AES_256_CBC_SHA1                0x00 0x38      SSL3.0
TLS_DHE_DSS_CAMELLIA_128_CBC_SHA1           0x00 0x44      TLS1.0
TLS_DHE_DSS_CAMELLIA_256_CBC_SHA1           0x00 0x87      TLS1.0
TLS_DHE_DSS_AES_128_CBC_SHA256              0x00 0x40      TLS1.2
TLS_DHE_DSS_AES_256_CBC_SHA256              0x00 0x6A      TLS1.2
TLS_DHE_RSA_3DES_EDE_CBC_SHA1               0x00 0x16      SSL3.0
TLS_DHE_RSA_AES_128_CBC_SHA1                0x00 0x33      SSL3.0
TLS_DHE_RSA_AES_256_CBC_SHA1                0x00 0x39      SSL3.0
TLS_DHE_RSA_CAMELLIA_128_CBC_SHA1           0x00 0x45      TLS1.0
TLS_DHE_RSA_CAMELLIA_256_CBC_SHA1           0x00 0x88      TLS1.0
TLS_DHE_RSA_AES_128_CBC_SHA256              0x00 0x67      TLS1.2
TLS_DHE_RSA_AES_256_CBC_SHA256              0x00 0x6B      TLS1.2
TLS_RSA_NULL_MD5                            0x00 0x01      SSL3.0
TLS_RSA_NULL_SHA1                           0x00 0x02      SSL3.0
TLS_RSA_NULL_SHA256                         0x00 0x3B      TLS1.2
TLS_RSA_EXPORT_ARCFOUR_40_MD5               0x00 0x03      SSL3.0
TLS_RSA_ARCFOUR_SHA1                        0x00 0x05      SSL3.0
TLS_RSA_ARCFOUR_MD5                         0x00 0x04      SSL3.0
TLS_RSA_3DES_EDE_CBC_SHA1                   0x00 0x0A      SSL3.0
TLS_RSA_AES_128_CBC_SHA1                    0x00 0x2F      SSL3.0
TLS_RSA_AES_256_CBC_SHA1                    0x00 0x35      SSL3.0
TLS_RSA_CAMELLIA_128_CBC_SHA1               0x00 0x41      TLS1.0
TLS_RSA_CAMELLIA_256_CBC_SHA1               0x00 0x84      TLS1.0
TLS_RSA_AES_128_CBC_SHA256                  0x00 0x3C      TLS1.2
TLS_RSA_AES_256_CBC_SHA256                  0x00 0x3D      TLS1.2
TLS_RSA_AES_128_GCM_SHA256                  0x00 0x9C      TLS1.2
TLS_DHE_RSA_AES_128_GCM_SHA256              0x00 0x9E      TLS1.2
TLS_DHE_DSS_AES_128_GCM_SHA256              0x00 0xA2      TLS1.2
TLS_DH_ANON_AES_128_GCM_SHA256              0x00 0xA6      TLS1.2
TLS_ECDH_ANON_NULL_SHA                      0xC0 0x15      TLS1.0
TLS_ECDH_ANON_3DES_EDE_CBC_SHA              0xC0 0x17      TLS1.0
TLS_ECDH_ANON_AES_128_CBC_SHA               0xC0 0x18      TLS1.0
TLS_ECDH_ANON_AES_256_CBC_SHA               0xC0 0x19      TLS1.0
TLS_ECDHE_RSA_NULL_SHA                      0xC0 0x10      TLS1.0
TLS_ECDHE_RSA_3DES_EDE_CBC_SHA              0xC0 0x12      TLS1.0
TLS_ECDHE_RSA_AES_128_CBC_SHA               0xC0 0x13      TLS1.0
TLS_ECDHE_RSA_AES_256_CBC_SHA               0xC0 0x14      TLS1.0
TLS_ECDHE_ECDSA_NULL_SHA                    0xC0 0x06      TLS1.0
TLS_ECDHE_ECDSA_3DES_EDE_CBC_SHA            0xC0 0x08      TLS1.0
TLS_ECDHE_ECDSA_AES_128_CBC_SHA             0xC0 0x09      TLS1.0
TLS_ECDHE_ECDSA_AES_256_CBC_SHA             0xC0 0x0A      TLS1.0
TLS_ECDHE_ECDSA_AES_128_CBC_SHA256          0xC0 0x23      TLS1.2
TLS_ECDHE_RSA_AES_128_CBC_SHA256            0xC0 0x27      TLS1.2
TLS_ECDHE_ECDSA_AES_128_GCM_SHA256          0xC0 0x2B      TLS1.2
TLS_ECDHE_RSA_AES_128_GCM_SHA256            0xC0 0x2F      TLS1.2
TLS_ECDHE_PSK_3DES_EDE_CBC_SHA              0xC0 0x34      TLS1.0
TLS_ECDHE_PSK_AES_128_CBC_SHA               0xC0 0x35      TLS1.0
TLS_ECDHE_PSK_AES_256_CBC_SHA               0xC0 0x36      TLS1.0
TLS_ECDHE_PSK_AES_128_CBC_SHA256            0xC0 0x37      TLS1.0
TLS_ECDHE_PSK_AES_256_CBC_SHA384            0xC0 0x38      TLS1.0
TLS_ECDHE_PSK_NULL_SHA256                   0xC0 0x3A      TLS1.0
TLS_ECDHE_PSK_NULL_SHA384                   0xC0 0x3B      TLS1.0
TLS_ECDHE_ECDSA_AES_256_GCM_SHA384          0xC0 0x2E      TLS1.2
TLS_ECDHE_RSA_AES_256_GCM_SHA384            0xC0 0x30      TLS1.2
TLS_ECDHE_ECDSA_AES_256_CBC_SHA384          0xC0 0x24      TLS1.2

Available certificate types:
   * X.509

   * OPENPGP

Available protocols:
   * SSL3.0

   * TLS1.0

   * TLS1.1

   * TLS1.2

   * DTLS1.0

Available ciphers:
   * AES-256-CBC

   * AES-192-CBC

   * AES-128-CBC

   * AES-128-GCM

   * AES-256-GCM

   * 3DES-CBC

   * DES-CBC

   * ARCFOUR-128

   * ARCFOUR-40

   * RC2-40

   * CAMELLIA-256-CBC

   * CAMELLIA-128-CBC

   * IDEA-PGP-CFB

   * 3DES-PGP-CFB

   * CAST5-PGP-CFB

   * BLOWFISH-PGP-CFB

   * SAFER-SK128-PGP-CFB

   * AES-128-PGP-CFB

   * AES-192-PGP-CFB

   * AES-256-PGP-CFB

   * TWOFISH-PGP-CFB

   * NULL

Available MAC algorithms:
   * SHA1

   * MD5

   * SHA256

   * SHA384

   * SHA512

   * SHA224

   * AEAD

   * MD2

   * RIPEMD160

   * MAC-NULL

Available key exchange methods:
   * ANON-DH

   * ANON-ECDH

   * RSA

   * RSA-EXPORT

   * DHE-RSA

   * ECDHE-RSA

   * ECDHE-ECDSA

   * DHE-DSS

   * SRP-DSS

   * SRP-RSA

   * SRP

   * PSK

   * DHE-PSK

   * ECDHE-PSK

Available public key algorithms:
   * RSA

   * DSA

   * ECC

Available public key signature algorithms:
   * RSA-SHA1

   * RSA-SHA224

   * RSA-SHA256

   * RSA-SHA384

   * RSA-SHA512

   * RSA-RMD160

   * DSA-SHA1

   * DSA-SHA224

   * DSA-SHA256

   * RSA-MD5

   * RSA-MD2

   * ECDSA-SHA1

   * ECDSA-SHA224

   * ECDSA-SHA256

   * ECDSA-SHA384

   * ECDSA-SHA512

Available compression methods:
   * DEFLATE

   * NULL


File: gnutls.info,  Node: Copying Information,  Next: Concept Index,  Prev: Supported ciphersuites in GnuTLS,  Up: Top

Appendix E Copying Information
******************************

* Menu:

* GNU Free Documentation License::   License for copying this manual.


File: gnutls.info,  Node: GNU Free Documentation License,  Up: Copying Information

E.1 GNU Free Documentation License
==================================

                     Version 1.3, 3 November 2008

     Copyright (C) 2000, 2001, 2002, 2007, 2008 Free Software Foundation, Inc.
     `http://fsf.org/'

     Everyone is permitted to copy and distribute verbatim copies
     of this license document, but changing it is not allowed.

  0. PREAMBLE

     The purpose of this License is to make a manual, textbook, or other
     functional and useful document "free" in the sense of freedom: to
     assure everyone the effective freedom to copy and redistribute it,
     with or without modifying it, either commercially or
     noncommercially.  Secondarily, this License preserves for the
     author and publisher a way to get credit for their work, while not
     being considered responsible for modifications made by others.

     This License is a kind of "copyleft", which means that derivative
     works of the document must themselves be free in the same sense.
     It complements the GNU General Public License, which is a copyleft
     license designed for free software.

     We have designed this License in order to use it for manuals for
     free software, because free software needs free documentation: a
     free program should come with manuals providing the same freedoms
     that the software does.  But this License is not limited to
     software manuals; it can be used for any textual work, regardless
     of subject matter or whether it is published as a printed book.
     We recommend this License principally for works whose purpose is
     instruction or reference.

  1. APPLICABILITY AND DEFINITIONS

     This License applies to any manual or other work, in any medium,
     that contains a notice placed by the copyright holder saying it
     can be distributed under the terms of this License.  Such a notice
     grants a world-wide, royalty-free license, unlimited in duration,
     to use that work under the conditions stated herein.  The
     "Document", below, refers to any such manual or work.  Any member
     of the public is a licensee, and is addressed as "you".  You
     accept the license if you copy, modify or distribute the work in a
     way requiring permission under copyright law.

     A "Modified Version" of the Document means any work containing the
     Document or a portion of it, either copied verbatim, or with
     modifications and/or translated into another language.

     A "Secondary Section" is a named appendix or a front-matter section
     of the Document that deals exclusively with the relationship of the
     publishers or authors of the Document to the Document's overall
     subject (or to related matters) and contains nothing that could
     fall directly within that overall subject.  (Thus, if the Document
     is in part a textbook of mathematics, a Secondary Section may not
     explain any mathematics.)  The relationship could be a matter of
     historical connection with the subject or with related matters, or
     of legal, commercial, philosophical, ethical or political position
     regarding them.

     The "Invariant Sections" are certain Secondary Sections whose
     titles are designated, as being those of Invariant Sections, in
     the notice that says that the Document is released under this
     License.  If a section does not fit the above definition of
     Secondary then it is not allowed to be designated as Invariant.
     The Document may contain zero Invariant Sections.  If the Document
     does not identify any Invariant Sections then there are none.

     The "Cover Texts" are certain short passages of text that are
     listed, as Front-Cover Texts or Back-Cover Texts, in the notice
     that says that the Document is released under this License.  A
     Front-Cover Text may be at most 5 words, and a Back-Cover Text may
     be at most 25 words.

     A "Transparent" copy of the Document means a machine-readable copy,
     represented in a format whose specification is available to the
     general public, that is suitable for revising the document
     straightforwardly with generic text editors or (for images
     composed of pixels) generic paint programs or (for drawings) some
     widely available drawing editor, and that is suitable for input to
     text formatters or for automatic translation to a variety of
     formats suitable for input to text formatters.  A copy made in an
     otherwise Transparent file format whose markup, or absence of
     markup, has been arranged to thwart or discourage subsequent
     modification by readers is not Transparent.  An image format is
     not Transparent if used for any substantial amount of text.  A
     copy that is not "Transparent" is called "Opaque".

     Examples of suitable formats for Transparent copies include plain
     ASCII without markup, Texinfo input format, LaTeX input format,
     SGML or XML using a publicly available DTD, and
     standard-conforming simple HTML, PostScript or PDF designed for
     human modification.  Examples of transparent image formats include
     PNG, XCF and JPG.  Opaque formats include proprietary formats that
     can be read and edited only by proprietary word processors, SGML or
     XML for which the DTD and/or processing tools are not generally
     available, and the machine-generated HTML, PostScript or PDF
     produced by some word processors for output purposes only.

     The "Title Page" means, for a printed book, the title page itself,
     plus such following pages as are needed to hold, legibly, the
     material this License requires to appear in the title page.  For
     works in formats which do not have any title page as such, "Title
     Page" means the text near the most prominent appearance of the
     work's title, preceding the beginning of the body of the text.

     The "publisher" means any person or entity that distributes copies
     of the Document to the public.

     A section "Entitled XYZ" means a named subunit of the Document
     whose title either is precisely XYZ or contains XYZ in parentheses
     following text that translates XYZ in another language.  (Here XYZ
     stands for a specific section name mentioned below, such as
     "Acknowledgements", "Dedications", "Endorsements", or "History".)
     To "Preserve the Title" of such a section when you modify the
     Document means that it remains a section "Entitled XYZ" according
     to this definition.

     The Document may include Warranty Disclaimers next to the notice
     which states that this License applies to the Document.  These
     Warranty Disclaimers are considered to be included by reference in
     this License, but only as regards disclaiming warranties: any other
     implication that these Warranty Disclaimers may have is void and
     has no effect on the meaning of this License.

  2. VERBATIM COPYING

     You may copy and distribute the Document in any medium, either
     commercially or noncommercially, provided that this License, the
     copyright notices, and the license notice saying this License
     applies to the Document are reproduced in all copies, and that you
     add no other conditions whatsoever to those of this License.  You
     may not use technical measures to obstruct or control the reading
     or further copying of the copies you make or distribute.  However,
     you may accept compensation in exchange for copies.  If you
     distribute a large enough number of copies you must also follow
     the conditions in section 3.

     You may also lend copies, under the same conditions stated above,
     and you may publicly display copies.

  3. COPYING IN QUANTITY

     If you publish printed copies (or copies in media that commonly
     have printed covers) of the Document, numbering more than 100, and
     the Document's license notice requires Cover Texts, you must
     enclose the copies in covers that carry, clearly and legibly, all
     these Cover Texts: Front-Cover Texts on the front cover, and
     Back-Cover Texts on the back cover.  Both covers must also clearly
     and legibly identify you as the publisher of these copies.  The
     front cover must present the full title with all words of the
     title equally prominent and visible.  You may add other material
     on the covers in addition.  Copying with changes limited to the
     covers, as long as they preserve the title of the Document and
     satisfy these conditions, can be treated as verbatim copying in
     other respects.

     If the required texts for either cover are too voluminous to fit
     legibly, you should put the first ones listed (as many as fit
     reasonably) on the actual cover, and continue the rest onto
     adjacent pages.

     If you publish or distribute Opaque copies of the Document
     numbering more than 100, you must either include a
     machine-readable Transparent copy along with each Opaque copy, or
     state in or with each Opaque copy a computer-network location from
     which the general network-using public has access to download
     using public-standard network protocols a complete Transparent
     copy of the Document, free of added material.  If you use the
     latter option, you must take reasonably prudent steps, when you
     begin distribution of Opaque copies in quantity, to ensure that
     this Transparent copy will remain thus accessible at the stated
     location until at least one year after the last time you
     distribute an Opaque copy (directly or through your agents or
     retailers) of that edition to the public.

     It is requested, but not required, that you contact the authors of
     the Document well before redistributing any large number of
     copies, to give them a chance to provide you with an updated
     version of the Document.

  4. MODIFICATIONS

     You may copy and distribute a Modified Version of the Document
     under the conditions of sections 2 and 3 above, provided that you
     release the Modified Version under precisely this License, with
     the Modified Version filling the role of the Document, thus
     licensing distribution and modification of the Modified Version to
     whoever possesses a copy of it.  In addition, you must do these
     things in the Modified Version:

       A. Use in the Title Page (and on the covers, if any) a title
          distinct from that of the Document, and from those of
          previous versions (which should, if there were any, be listed
          in the History section of the Document).  You may use the
          same title as a previous version if the original publisher of
          that version gives permission.

       B. List on the Title Page, as authors, one or more persons or
          entities responsible for authorship of the modifications in
          the Modified Version, together with at least five of the
          principal authors of the Document (all of its principal
          authors, if it has fewer than five), unless they release you
          from this requirement.

       C. State on the Title page the name of the publisher of the
          Modified Version, as the publisher.

       D. Preserve all the copyright notices of the Document.

       E. Add an appropriate copyright notice for your modifications
          adjacent to the other copyright notices.

       F. Include, immediately after the copyright notices, a license
          notice giving the public permission to use the Modified
          Version under the terms of this License, in the form shown in
          the Addendum below.

       G. Preserve in that license notice the full lists of Invariant
          Sections and required Cover Texts given in the Document's
          license notice.

       H. Include an unaltered copy of this License.

       I. Preserve the section Entitled "History", Preserve its Title,
          and add to it an item stating at least the title, year, new
          authors, and publisher of the Modified Version as given on
          the Title Page.  If there is no section Entitled "History" in
          the Document, create one stating the title, year, authors,
          and publisher of the Document as given on its Title Page,
          then add an item describing the Modified Version as stated in
          the previous sentence.

       J. Preserve the network location, if any, given in the Document
          for public access to a Transparent copy of the Document, and
          likewise the network locations given in the Document for
          previous versions it was based on.  These may be placed in
          the "History" section.  You may omit a network location for a
          work that was published at least four years before the
          Document itself, or if the original publisher of the version
          it refers to gives permission.

       K. For any section Entitled "Acknowledgements" or "Dedications",
          Preserve the Title of the section, and preserve in the
          section all the substance and tone of each of the contributor
          acknowledgements and/or dedications given therein.

       L. Preserve all the Invariant Sections of the Document,
          unaltered in their text and in their titles.  Section numbers
          or the equivalent are not considered part of the section
          titles.

       M. Delete any section Entitled "Endorsements".  Such a section
          may not be included in the Modified Version.

       N. Do not retitle any existing section to be Entitled
          "Endorsements" or to conflict in title with any Invariant
          Section.

       O. Preserve any Warranty Disclaimers.

     If the Modified Version includes new front-matter sections or
     appendices that qualify as Secondary Sections and contain no
     material copied from the Document, you may at your option
     designate some or all of these sections as invariant.  To do this,
     add their titles to the list of Invariant Sections in the Modified
     Version's license notice.  These titles must be distinct from any
     other section titles.

     You may add a section Entitled "Endorsements", provided it contains
     nothing but endorsements of your Modified Version by various
     parties--for example, statements of peer review or that the text
     has been approved by an organization as the authoritative
     definition of a standard.

     You may add a passage of up to five words as a Front-Cover Text,
     and a passage of up to 25 words as a Back-Cover Text, to the end
     of the list of Cover Texts in the Modified Version.  Only one
     passage of Front-Cover Text and one of Back-Cover Text may be
     added by (or through arrangements made by) any one entity.  If the
     Document already includes a cover text for the same cover,
     previously added by you or by arrangement made by the same entity
     you are acting on behalf of, you may not add another; but you may
     replace the old one, on explicit permission from the previous
     publisher that added the old one.

     The author(s) and publisher(s) of the Document do not by this
     License give permission to use their names for publicity for or to
     assert or imply endorsement of any Modified Version.

  5. COMBINING DOCUMENTS

     You may combine the Document with other documents released under
     this License, under the terms defined in section 4 above for
     modified versions, provided that you include in the combination
     all of the Invariant Sections of all of the original documents,
     unmodified, and list them all as Invariant Sections of your
     combined work in its license notice, and that you preserve all
     their Warranty Disclaimers.

     The combined work need only contain one copy of this License, and
     multiple identical Invariant Sections may be replaced with a single
     copy.  If there are multiple Invariant Sections with the same name
     but different contents, make the title of each such section unique
     by adding at the end of it, in parentheses, the name of the
     original author or publisher of that section if known, or else a
     unique number.  Make the same adjustment to the section titles in
     the list of Invariant Sections in the license notice of the
     combined work.

     In the combination, you must combine any sections Entitled
     "History" in the various original documents, forming one section
     Entitled "History"; likewise combine any sections Entitled
     "Acknowledgements", and any sections Entitled "Dedications".  You
     must delete all sections Entitled "Endorsements."

  6. COLLECTIONS OF DOCUMENTS

     You may make a collection consisting of the Document and other
     documents released under this License, and replace the individual
     copies of this License in the various documents with a single copy
     that is included in the collection, provided that you follow the
     rules of this License for verbatim copying of each of the
     documents in all other respects.

     You may extract a single document from such a collection, and
     distribute it individually under this License, provided you insert
     a copy of this License into the extracted document, and follow
     this License in all other respects regarding verbatim copying of
     that document.

  7. AGGREGATION WITH INDEPENDENT WORKS

     A compilation of the Document or its derivatives with other
     separate and independent documents or works, in or on a volume of
     a storage or distribution medium, is called an "aggregate" if the
     copyright resulting from the compilation is not used to limit the
     legal rights of the compilation's users beyond what the individual
     works permit.  When the Document is included in an aggregate, this
     License does not apply to the other works in the aggregate which
     are not themselves derivative works of the Document.

     If the Cover Text requirement of section 3 is applicable to these
     copies of the Document, then if the Document is less than one half
     of the entire aggregate, the Document's Cover Texts may be placed
     on covers that bracket the Document within the aggregate, or the
     electronic equivalent of covers if the Document is in electronic
     form.  Otherwise they must appear on printed covers that bracket
     the whole aggregate.

  8. TRANSLATION

     Translation is considered a kind of modification, so you may
     distribute translations of the Document under the terms of section
     4.  Replacing Invariant Sections with translations requires special
     permission from their copyright holders, but you may include
     translations of some or all Invariant Sections in addition to the
     original versions of these Invariant Sections.  You may include a
     translation of this License, and all the license notices in the
     Document, and any Warranty Disclaimers, provided that you also
     include the original English version of this License and the
     original versions of those notices and disclaimers.  In case of a
     disagreement between the translation and the original version of
     this License or a notice or disclaimer, the original version will
     prevail.

     If a section in the Document is Entitled "Acknowledgements",
     "Dedications", or "History", the requirement (section 4) to
     Preserve its Title (section 1) will typically require changing the
     actual title.

  9. TERMINATION

     You may not copy, modify, sublicense, or distribute the Document
     except as expressly provided under this License.  Any attempt
     otherwise to copy, modify, sublicense, or distribute it is void,
     and will automatically terminate your rights under this License.

     However, if you cease all violation of this License, then your
     license from a particular copyright holder is reinstated (a)
     provisionally, unless and until the copyright holder explicitly
     and finally terminates your license, and (b) permanently, if the
     copyright holder fails to notify you of the violation by some
     reasonable means prior to 60 days after the cessation.

     Moreover, your license from a particular copyright holder is
     reinstated permanently if the copyright holder notifies you of the
     violation by some reasonable means, this is the first time you have
     received notice of violation of this License (for any work) from
     that copyright holder, and you cure the violation prior to 30 days
     after your receipt of the notice.

     Termination of your rights under this section does not terminate
     the licenses of parties who have received copies or rights from
     you under this License.  If your rights have been terminated and
     not permanently reinstated, receipt of a copy of some or all of
     the same material does not give you any rights to use it.

 10. FUTURE REVISIONS OF THIS LICENSE

     The Free Software Foundation may publish new, revised versions of
     the GNU Free Documentation License from time to time.  Such new
     versions will be similar in spirit to the present version, but may
     differ in detail to address new problems or concerns.  See
     `http://www.gnu.org/copyleft/'.

     Each version of the License is given a distinguishing version
     number.  If the Document specifies that a particular numbered
     version of this License "or any later version" applies to it, you
     have the option of following the terms and conditions either of
     that specified version or of any later version that has been
     published (not as a draft) by the Free Software Foundation.  If
     the Document does not specify a version number of this License,
     you may choose any version ever published (not as a draft) by the
     Free Software Foundation.  If the Document specifies that a proxy
     can decide which future versions of this License can be used, that
     proxy's public statement of acceptance of a version permanently
     authorizes you to choose that version for the Document.

 11. RELICENSING

     "Massive Multiauthor Collaboration Site" (or "MMC Site") means any
     World Wide Web server that publishes copyrightable works and also
     provides prominent facilities for anybody to edit those works.  A
     public wiki that anybody can edit is an example of such a server.
     A "Massive Multiauthor Collaboration" (or "MMC") contained in the
     site means any set of copyrightable works thus published on the MMC
     site.

     "CC-BY-SA" means the Creative Commons Attribution-Share Alike 3.0
     license published by Creative Commons Corporation, a not-for-profit
     corporation with a principal place of business in San Francisco,
     California, as well as future copyleft versions of that license
     published by that same organization.

     "Incorporate" means to publish or republish a Document, in whole or
     in part, as part of another Document.

     An MMC is "eligible for relicensing" if it is licensed under this
     License, and if all works that were first published under this
     License somewhere other than this MMC, and subsequently
     incorporated in whole or in part into the MMC, (1) had no cover
     texts or invariant sections, and (2) were thus incorporated prior
     to November 1, 2008.

     The operator of an MMC Site may republish an MMC contained in the
     site under CC-BY-SA on the same site at any time before August 1,
     2009, provided the MMC is eligible for relicensing.


ADDENDUM: How to use this License for your documents
====================================================

To use this License in a document you have written, include a copy of
the License in the document and put the following copyright and license
notices just after the title page:

       Copyright (C)  YEAR  YOUR NAME.
       Permission is granted to copy, distribute and/or modify this document
       under the terms of the GNU Free Documentation License, Version 1.3
       or any later version published by the Free Software Foundation;
       with no Invariant Sections, no Front-Cover Texts, and no Back-Cover
       Texts.  A copy of the license is included in the section entitled ``GNU
       Free Documentation License''.

If you have Invariant Sections, Front-Cover Texts and Back-Cover Texts,
replace the "with...Texts." line with this:

         with the Invariant Sections being LIST THEIR TITLES, with
         the Front-Cover Texts being LIST, and with the Back-Cover Texts
         being LIST.

If you have Invariant Sections without Cover Texts, or some other
combination of the three, merge those two alternatives to suit the
situation.

If your document contains nontrivial examples of program code, we
recommend releasing these examples in parallel under your choice of
free software license, such as the GNU General Public License, to
permit their use in free software.


File: gnutls.info,  Node: Bibliography,  Prev: Function and Data Index,  Up: Top

Bibliography
************

[CBCATT]
     Bodo Moeller, "Security of CBC Ciphersuites in SSL/TLS: Problems
     and Countermeasures", 2002, available from
     `http://www.openssl.org/~bodo/tls-cbc.txt'.

[GPGH]
     Mike Ashley, "The GNU Privacy Handbook", 2002, available from
     `http://www.gnupg.org/gph/en/manual.pdf'.

[GUTPKI]
     Peter Gutmann, "Everything you never wanted to know about PKI but
     were forced to find out", Available from
     `http://www.cs.auckland.ac.nz/~pgut001/'.

[NISTSP80057]
     NIST Special Publication 800-57, "Recommendation for Key
     Management - Part 1: General (Revised)", March 2007, available from
     `http://csrc.nist.gov/publications/nistpubs/800-57/sp800-57-Part1-revised2_Mar08-2007.pdf'.

[RFC2246]
     Tim Dierks and Christopher Allen, "The TLS Protocol Version 1.0",
     January 1999, Available from `http://www.ietf.org/rfc/rfc2246.txt'.

[RFC4346]
     Tim Dierks and Eric Rescorla, "The TLS Protocol Version 1.1", Match
     2006, Available from `http://www.ietf.org/rfc/rfc4346.txt'.

[RFC4347]
     Eric Rescorla and Nagendra Modadugu, "Datagram Transport Layer
     Security", April 2006, Available from
     `http://www.ietf.org/rfc/rfc4347.txt'.

[RFC5246]
     Tim Dierks and Eric Rescorla, "The TLS Protocol Version 1.2",
     August 2008, Available from `http://www.ietf.org/rfc/rfc5246.txt'.

[RFC2440]
     Jon Callas, Lutz Donnerhacke, Hal Finney and Rodney Thayer,
     "OpenPGP Message Format", November 1998, Available from
     `http://www.ietf.org/rfc/rfc2440.txt'.

[RFC4880]
     Jon Callas, Lutz Donnerhacke, Hal Finney, David Shaw and Rodney
     Thayer, "OpenPGP Message Format", November 2007, Available from
     `http://www.ietf.org/rfc/rfc4880.txt'.

[RFC4211]
     J. Schaad, "Internet X.509 Public Key Infrastructure Certificate
     Request Message Format (CRMF)", September 2005, Available from
     `http://www.ietf.org/rfc/rfc4211.txt'.

[RFC2817]
     Rohit Khare and Scott Lawrence, "Upgrading to TLS Within HTTP/1.1",
     May 2000, Available from `http://www.ietf.org/rfc/rfc2817.txt'

[RFC2818]
     Eric Rescorla, "HTTP Over TLS", May 2000, Available from
     `http://www.ietf/rfc/rfc2818.txt'.

[RFC2945]
     Tom Wu, "The SRP Authentication and Key Exchange System", September
     2000, Available from `http://www.ietf.org/rfc/rfc2945.txt'.

[RFC2986]
     Magnus Nystrom and Burt Kaliski, "PKCS 10 v1.7: Certification
     Request Syntax Specification", November 2000, Available from
     `http://www.ietf.org/rfc/rfc2986.txt'.

[PKIX]
     D. Cooper, S. Santesson, S. Farrel, S. Boeyen, R. Housley, W. Polk,
     "Internet X.509 Public Key Infrastructure Certificate and
     Certificate Revocation List (CRL) Profile", May 2008, available
     from `http://www.ietf.org/rfc/rfc5280.txt'.

[RFC3749]
     Scott Hollenbeck, "Transport Layer Security Protocol Compression
     Methods", May 2004, available from
     `http://www.ietf.org/rfc/rfc3749.txt'.

[RFC3820]
     Steven Tuecke, Von Welch, Doug Engert, Laura Pearlman, and Mary
     Thompson, "Internet X.509 Public Key Infrastructure (PKI) Proxy
     Certificate Profile", June 2004, available from
     `http://www.ietf.org/rfc/rfc3820'.

[RFC5746]
     E. Rescorla, M. Ray, S. Dispensa, and N. Oskov, "Transport Layer
     Security (TLS) Renegotiation Indication Extension", February 2010,
     available from `http://www.ietf.org/rfc/rfc5746'.

[TLSTKT]
     Joseph Salowey, Hao Zhou, Pasi Eronen, Hannes Tschofenig,
     "Transport Layer Security (TLS) Session Resumption without
     Server-Side State", January 2008, available from
     `http://www.ietf.org/rfc/rfc5077'.

[PKCS12]
     RSA Laboratories, "PKCS 12 v1.0: Personal Information Exchange
     Syntax", June 1999, Available from `http://www.rsa.com'.

[PKCS11]
     RSA Laboratories, "PKCS #11 Base Functionality v2.30: Cryptoki –
     Draft 4", July 2009, Available from `http://www.rsa.com'.

[RESCORLA]
     Eric Rescorla, "SSL and TLS: Designing and Building Secure
     Systems", 2001

[SELKEY]
     Arjen Lenstra and Eric Verheul, "Selecting Cryptographic Key
     Sizes", 2003, available from
     `http://www.win.tue.nl/~klenstra/key.pdf'.

[SSL3]
     Alan Freier, Philip Karlton and Paul Kocher, "The Secure Sockets
     Layer (SSL) Protocol Version 3.0", August 2011, Available from
     `http://www.ietf.org/rfc/rfc6101.txt'.

[STEVENS]
     Richard Stevens, "UNIX Network Programming, Volume 1", Prentice
     Hall PTR, January 1998

[TLSEXT]
     Simon Blake-Wilson, Magnus Nystrom, David Hopwood, Jan Mikkelsen
     and Tim Wright, "Transport Layer Security (TLS) Extensions", June
     2003, Available from `http://www.ietf.org/rfc/rfc3546.txt'.

[TLSPGP]
     Nikos Mavrogiannopoulos, "Using OpenPGP keys for TLS
     authentication", January 2011. Available from
     `http://www.ietf.org/rfc/rfc6091.txt'.

[TLSSRP]
     David Taylor, Trevor Perrin, Tom Wu and Nikos Mavrogiannopoulos,
     "Using SRP for TLS Authentication", November 2007. Available from
     `http://www.ietf.org/rfc/rfc5054.txt'.

[TLSPSK]
     Pasi Eronen and Hannes Tschofenig, "Pre-shared key Ciphersuites for
     TLS", December 2005, Available from
     `http://www.ietf.org/rfc/rfc4279.txt'.

[TOMSRP]
     Tom Wu, "The Stanford SRP Authentication Project", Available at
     `http://srp.stanford.edu/'.

[WEGER]
     Arjen Lenstra and Xiaoyun Wang and Benne de Weger, "Colliding X.509
     Certificates", Cryptology ePrint Archive, Report 2005/067,
     Available at `http://eprint.iacr.org/'.

[ECRYPT]
     European Network of Excellence in Cryptology II, "ECRYPT II Yearly
     Report on Algorithms and Keysizes (2009-2010)", Available at
     `http://www.ecrypt.eu.org/documents/D.SPA.13.pdf'.

[RFC5056]
     N. Williams, "On the Use of Channel Bindings to Secure Channels",
     November 2007, available from `http://www.ietf.org/rfc/rfc5056'.

[RFC5929]
     J. Altman, N. Williams, L. Zhu, "Channel Bindings for TLS", July
     2010, available from `http://www.ietf.org/rfc/rfc5929'.

[PKCS11URI]
     J. Pechanec, D. Moffat, "The PKCS#11 URI Scheme", August 2011,
     Work in progress, available from
     `http://tools.ietf.org/html/draft-pechanec-pkcs11uri-05'.

[ANDERSON]
     R. J. Anderson, "Security Engineering: A Guide to Building
     Dependable Distributed Systems", John Wiley \& Sons, Inc., 2001.

[RFC4821]
     M. Mathis, J. Heffner, "Packetization Layer Path MTU Discovery",
     March 2007, available from `http://www.ietf.org/rfc/rfc4821.txt'.



File: gnutls.info,  Node: Function and Data Index,  Next: Bibliography,  Prev: Concept Index,  Up: Top

Function and Data Index
***********************

 [index ]
* Menu:

* gnutls_alert_get:                      Core TLS API.       (line   13)
* gnutls_alert_get_name:                 Core TLS API.       (line   29)
* gnutls_alert_get_strname:              Core TLS API.       (line   42)
* gnutls_alert_send:                     Core TLS API.       (line   56)
* gnutls_alert_send_appropriate:         Core TLS API.       (line   80)
* gnutls_anon_allocate_client_credentials: Core TLS API.     (line  103)
* gnutls_anon_allocate_server_credentials: Core TLS API.     (line  115)
* gnutls_anon_free_client_credentials:   Core TLS API.       (line  127)
* gnutls_anon_free_server_credentials:   Core TLS API.       (line  137)
* gnutls_anon_set_params_function:       Core TLS API.       (line  148)
* gnutls_anon_set_server_dh_params:      Core TLS API.       (line  162)
* gnutls_anon_set_server_params_function: Core TLS API.      (line  176)
* gnutls_auth_client_get_type:           Core TLS API.       (line  189)
* gnutls_auth_get_type:                  Core TLS API.       (line  203)
* gnutls_auth_server_get_type:           Core TLS API.       (line  221)
* gnutls_bye:                            Core TLS API.       (line  235)
* gnutls_certificate_activation_time_peers: Core TLS API.    (line  271)
* gnutls_certificate_allocate_credentials: Core TLS API.     (line  286)
* gnutls_certificate_client_get_request_status: Core TLS API.
                                                             (line  299)
* gnutls_certificate_expiration_time_peers: Core TLS API.    (line  312)
* gnutls_certificate_free_ca_names:      Core TLS API.       (line  326)
* gnutls_certificate_free_cas:           Core TLS API.       (line  343)
* gnutls_certificate_free_credentials:   Core TLS API.       (line  355)
* gnutls_certificate_free_crls:          Core TLS API.       (line  369)
* gnutls_certificate_free_keys:          Core TLS API.       (line  379)
* gnutls_certificate_get_issuer:         Core TLS API.       (line  392)
* gnutls_certificate_get_ours:           Core TLS API.       (line  412)
* gnutls_certificate_get_peers:          Core TLS API.       (line  427)
* gnutls_certificate_send_x509_rdn_sequence: Core TLS API.   (line  449)
* gnutls_certificate_server_set_request: Core TLS API.       (line  467)
* gnutls_certificate_set_dh_params:      Core TLS API.       (line  483)
* gnutls_certificate_set_key:            Abstract key API.   (line   16)
* gnutls_certificate_set_openpgp_key:    OpenPGP API.        (line   15)
* gnutls_certificate_set_openpgp_key_file: OpenPGP API.      (line   40)
* gnutls_certificate_set_openpgp_key_file2: OpenPGP API.     (line   62)
* gnutls_certificate_set_openpgp_key_mem: OpenPGP API.       (line   92)
* gnutls_certificate_set_openpgp_key_mem2: OpenPGP API.      (line  114)
* gnutls_certificate_set_openpgp_keyring_file: OpenPGP API.  (line  143)
* gnutls_certificate_set_openpgp_keyring_mem: OpenPGP API.   (line  163)
* gnutls_certificate_set_params_function: Core TLS API.      (line  500)
* gnutls_certificate_set_retrieve_function: Core TLS API.    (line  515)
* gnutls_certificate_set_rsa_export_params: Compatibility API.
                                                             (line   16)
* gnutls_certificate_set_verify_flags:   Core TLS API.       (line  559)
* gnutls_certificate_set_verify_function: Core TLS API.      (line  573)
* gnutls_certificate_set_verify_limits:  Core TLS API.       (line  602)
* gnutls_certificate_set_x509_crl:       Core TLS API.       (line  621)
* gnutls_certificate_set_x509_crl_file:  Core TLS API.       (line  645)
* gnutls_certificate_set_x509_crl_mem:   Core TLS API.       (line  667)
* gnutls_certificate_set_x509_key:       Core TLS API.       (line  689)
* gnutls_certificate_set_x509_key_file:  Core TLS API.       (line  716)
* gnutls_certificate_set_x509_key_mem:   Core TLS API.       (line  746)
* gnutls_certificate_set_x509_trust:     Core TLS API.       (line  780)
* gnutls_certificate_set_x509_trust_file: Core TLS API.      (line  807)
* gnutls_certificate_set_x509_trust_mem: Core TLS API.       (line  836)
* gnutls_certificate_type_get:           Core TLS API.       (line  860)
* gnutls_certificate_type_get_id:        Core TLS API.       (line  873)
* gnutls_certificate_type_get_name:      Core TLS API.       (line  885)
* gnutls_certificate_type_list:          Core TLS API.       (line  897)
* gnutls_certificate_type_set_priority:  Compatibility API.  (line   29)
* gnutls_certificate_verify_flags:       Verifying a certificate in the context of TLS session.
                                                             (line    6)
* gnutls_certificate_verify_peers2:      Core TLS API.       (line  909)
* gnutls_check_version:                  Core TLS API.       (line  935)
* gnutls_cipher_add_auth:                Cryptographic API.  (line   14)
* gnutls_cipher_decrypt:                 Cryptographic API.  (line   34)
* gnutls_cipher_decrypt2:                Cryptographic API.  (line   53)
* gnutls_cipher_deinit:                  Cryptographic API.  (line   74)
* gnutls_cipher_encrypt:                 Cryptographic API.  (line   86)
* gnutls_cipher_encrypt2:                Cryptographic API.  (line  105)
* gnutls_cipher_get:                     Core TLS API.       (line  952)
* gnutls_cipher_get_block_size:          Cryptographic API.  (line  127)
* gnutls_cipher_get_id:                  Core TLS API.       (line  964)
* gnutls_cipher_get_key_size:            Core TLS API.       (line  977)
* gnutls_cipher_get_name:                Core TLS API.       (line  989)
* gnutls_cipher_init:                    Cryptographic API.  (line  141)
* gnutls_cipher_list:                    Core TLS API.       (line 1001)
* gnutls_cipher_set_iv:                  Cryptographic API.  (line  163)
* gnutls_cipher_set_priority:            Compatibility API.  (line   47)
* gnutls_cipher_suite_get_name:          Core TLS API.       (line 1018)
* gnutls_cipher_suite_info:              Core TLS API.       (line 1037)
* gnutls_cipher_tag:                     Cryptographic API.  (line  179)
* gnutls_compression_get:                Core TLS API.       (line 1065)
* gnutls_compression_get_id:             Core TLS API.       (line 1077)
* gnutls_compression_get_name:           Core TLS API.       (line 1089)
* gnutls_compression_list:               Core TLS API.       (line 1101)
* gnutls_compression_set_priority:       Compatibility API.  (line   66)
* gnutls_credentials_clear:              Core TLS API.       (line 1110)
* gnutls_credentials_set:                Core TLS API.       (line 1119)
* gnutls_db_check_entry:                 Core TLS API.       (line 1154)
* gnutls_db_get_ptr:                     Core TLS API.       (line 1169)
* gnutls_db_remove_session:              Core TLS API.       (line 1180)
* gnutls_db_set_cache_expiration:        Core TLS API.       (line 1195)
* gnutls_db_set_ptr:                     Core TLS API.       (line 1207)
* gnutls_db_set_remove_function:         Core TLS API.       (line 1219)
* gnutls_db_set_retrieve_function:       Core TLS API.       (line 1234)
* gnutls_db_set_store_function:          Core TLS API.       (line 1254)
* gnutls_deinit:                         Core TLS API.       (line 1268)
* gnutls_dh_get_group:                   Core TLS API.       (line 1279)
* gnutls_dh_get_peers_public_bits:       Core TLS API.       (line 1299)
* gnutls_dh_get_prime_bits:              Core TLS API.       (line 1312)
* gnutls_dh_get_pubkey:                  Core TLS API.       (line 1329)
* gnutls_dh_get_secret_bits:             Core TLS API.       (line 1345)
* gnutls_dh_params_cpy:                  Core TLS API.       (line 1359)
* gnutls_dh_params_deinit:               Core TLS API.       (line 1374)
* gnutls_dh_params_export_pkcs3:         Core TLS API.       (line 1384)
* gnutls_dh_params_export_raw:           Core TLS API.       (line 1411)
* gnutls_dh_params_generate2:            Core TLS API.       (line 1432)
* gnutls_dh_params_import_pkcs3:         Core TLS API.       (line 1456)
* gnutls_dh_params_import_raw:           Core TLS API.       (line 1478)
* gnutls_dh_params_init:                 Core TLS API.       (line 1495)
* gnutls_dh_set_prime_bits:              Core TLS API.       (line 1507)
* gnutls_dtls_cookie_send:               Datagram TLS API.   (line   15)
* gnutls_dtls_cookie_verify:             Datagram TLS API.   (line   44)
* gnutls_dtls_get_data_mtu:              Datagram TLS API.   (line   70)
* gnutls_dtls_get_mtu:                   Datagram TLS API.   (line   85)
* gnutls_dtls_prestate_set:              Datagram TLS API.   (line  100)
* gnutls_dtls_set_mtu:                   Datagram TLS API.   (line  115)
* gnutls_dtls_set_timeouts:              Datagram TLS API.   (line  129)
* gnutls_ecc_curve_get:                  Core TLS API.       (line 1527)
* gnutls_ecc_curve_get_name:             Core TLS API.       (line 1541)
* gnutls_ecc_curve_get_size:             Core TLS API.       (line 1554)
* gnutls_error_is_fatal:                 Core TLS API.       (line 1566)
* gnutls_error_to_alert:                 Core TLS API.       (line 1585)
* gnutls_fingerprint:                    Core TLS API.       (line 1606)
* gnutls_global_deinit:                  Core TLS API.       (line 1631)
* gnutls_global_init:                    Core TLS API.       (line 1641)
* gnutls_global_set_audit_log_function:  Core TLS API.       (line 1672)
* gnutls_global_set_log_function:        Core TLS API.       (line 1691)
* gnutls_global_set_log_level:           Core TLS API.       (line 1705)
* gnutls_global_set_mem_functions:       Core TLS API.       (line 1722)
* gnutls_global_set_mutex:               Core TLS API.       (line 1752)
* gnutls_global_set_time_function:       Core TLS API.       (line 1776)
* gnutls_handshake:                      Core TLS API.       (line 1789)
* gnutls_handshake_get_last_in:          Core TLS API.       (line 1821)
* gnutls_handshake_get_last_out:         Core TLS API.       (line 1838)
* gnutls_handshake_set_max_packet_length: Core TLS API.      (line 1855)
* gnutls_handshake_set_post_client_hello_function: Core TLS API.
                                                             (line 1874)
* gnutls_handshake_set_private_extensions: Core TLS API.     (line 1899)
* gnutls_hash:                           Cryptographic API.  (line  197)
* gnutls_hash_deinit:                    Cryptographic API.  (line  215)
* gnutls_hash_fast:                      Cryptographic API.  (line  229)
* gnutls_hash_get_len:                   Cryptographic API.  (line  249)
* gnutls_hash_init:                      Cryptographic API.  (line  263)
* gnutls_hash_output:                    Cryptographic API.  (line  281)
* gnutls_hex2bin:                        Core TLS API.       (line 1919)
* gnutls_hex_decode:                     Core TLS API.       (line 1940)
* gnutls_hex_encode:                     Core TLS API.       (line 1959)
* gnutls_hmac:                           Cryptographic API.  (line  294)
* gnutls_hmac_deinit:                    Cryptographic API.  (line  312)
* gnutls_hmac_fast:                      Cryptographic API.  (line  327)
* gnutls_hmac_get_len:                   Cryptographic API.  (line  350)
* gnutls_hmac_init:                      Cryptographic API.  (line  365)
* gnutls_hmac_output:                    Cryptographic API.  (line  387)
* gnutls_init:                           Core TLS API.       (line 1976)
* gnutls_key_generate:                   Core TLS API.       (line 1998)
* gnutls_kx_get:                         Core TLS API.       (line 2015)
* gnutls_kx_get_id:                      Core TLS API.       (line 2026)
* gnutls_kx_get_name:                    Core TLS API.       (line 2039)
* gnutls_kx_list:                        Core TLS API.       (line 2050)
* gnutls_kx_set_priority:                Compatibility API.  (line   89)
* gnutls_mac_get:                        Core TLS API.       (line 2062)
* gnutls_mac_get_id:                     Core TLS API.       (line 2074)
* gnutls_mac_get_key_size:               Core TLS API.       (line 2087)
* gnutls_mac_get_name:                   Core TLS API.       (line 2099)
* gnutls_mac_list:                       Core TLS API.       (line 2110)
* gnutls_mac_set_priority:               Compatibility API.  (line  107)
* gnutls_openpgp_crt_check_hostname:     OpenPGP API.        (line  184)
* gnutls_openpgp_crt_deinit:             OpenPGP API.        (line  199)
* gnutls_openpgp_crt_export:             OpenPGP API.        (line  209)
* gnutls_openpgp_crt_get_auth_subkey:    OpenPGP API.        (line  230)
* gnutls_openpgp_crt_get_creation_time:  OpenPGP API.        (line  252)
* gnutls_openpgp_crt_get_expiration_time: OpenPGP API.       (line  263)
* gnutls_openpgp_crt_get_fingerprint:    OpenPGP API.        (line  275)
* gnutls_openpgp_crt_get_key_id:         OpenPGP API.        (line  292)
* gnutls_openpgp_crt_get_key_usage:      OpenPGP API.        (line  307)
* gnutls_openpgp_crt_get_name:           OpenPGP API.        (line  323)
* gnutls_openpgp_crt_get_pk_algorithm:   OpenPGP API.        (line  344)
* gnutls_openpgp_crt_get_pk_dsa_raw:     OpenPGP API.        (line  365)
* gnutls_openpgp_crt_get_pk_rsa_raw:     OpenPGP API.        (line  391)
* gnutls_openpgp_crt_get_preferred_key_id: OpenPGP API.      (line  412)
* gnutls_openpgp_crt_get_revoked_status: OpenPGP API.        (line  426)
* gnutls_openpgp_crt_get_subkey_count:   OpenPGP API.        (line  440)
* gnutls_openpgp_crt_get_subkey_creation_time: OpenPGP API.  (line  455)
* gnutls_openpgp_crt_get_subkey_expiration_time: OpenPGP API.
                                                             (line  470)
* gnutls_openpgp_crt_get_subkey_fingerprint: OpenPGP API.    (line  487)
* gnutls_openpgp_crt_get_subkey_id:      OpenPGP API.        (line  509)
* gnutls_openpgp_crt_get_subkey_idx:     OpenPGP API.        (line  524)
* gnutls_openpgp_crt_get_subkey_pk_algorithm: OpenPGP API.   (line  540)
* gnutls_openpgp_crt_get_subkey_pk_dsa_raw: OpenPGP API.     (line  565)
* gnutls_openpgp_crt_get_subkey_pk_rsa_raw: OpenPGP API.     (line  593)
* gnutls_openpgp_crt_get_subkey_revoked_status: OpenPGP API. (line  616)
* gnutls_openpgp_crt_get_subkey_usage:   OpenPGP API.        (line  634)
* gnutls_openpgp_crt_get_version:        OpenPGP API.        (line  656)
* gnutls_openpgp_crt_import:             OpenPGP API.        (line  668)
* gnutls_openpgp_crt_init:               OpenPGP API.        (line  684)
* gnutls_openpgp_crt_print:              OpenPGP API.        (line  697)
* gnutls_openpgp_crt_set_preferred_key_id: OpenPGP API.      (line  717)
* gnutls_openpgp_crt_verify_ring:        OpenPGP API.        (line  734)
* gnutls_openpgp_crt_verify_self:        OpenPGP API.        (line  756)
* gnutls_openpgp_keyring_check_id:       OpenPGP API.        (line  775)
* gnutls_openpgp_keyring_deinit:         OpenPGP API.        (line  791)
* gnutls_openpgp_keyring_get_crt:        OpenPGP API.        (line  802)
* gnutls_openpgp_keyring_get_crt_count:  OpenPGP API.        (line  820)
* gnutls_openpgp_keyring_import:         OpenPGP API.        (line  834)
* gnutls_openpgp_keyring_init:           OpenPGP API.        (line  851)
* gnutls_openpgp_privkey_deinit:         OpenPGP API.        (line  862)
* gnutls_openpgp_privkey_export:         OpenPGP API.        (line  873)
* gnutls_openpgp_privkey_export_dsa_raw: OpenPGP API.        (line  902)
* gnutls_openpgp_privkey_export_rsa_raw: OpenPGP API.        (line  931)
* gnutls_openpgp_privkey_export_subkey_dsa_raw: OpenPGP API. (line  962)
* gnutls_openpgp_privkey_export_subkey_rsa_raw: OpenPGP API. (line  993)
* gnutls_openpgp_privkey_get_fingerprint: OpenPGP API.       (line 1024)
* gnutls_openpgp_privkey_get_key_id:     OpenPGP API.        (line 1043)
* gnutls_openpgp_privkey_get_pk_algorithm: OpenPGP API.      (line 1059)
* gnutls_openpgp_privkey_get_preferred_key_id: OpenPGP API.  (line 1081)
* gnutls_openpgp_privkey_get_revoked_status: OpenPGP API.    (line 1095)
* gnutls_openpgp_privkey_get_subkey_count: OpenPGP API.      (line 1109)
* gnutls_openpgp_privkey_get_subkey_creation_time: OpenPGP API.
                                                             (line 1124)
* gnutls_openpgp_privkey_get_subkey_fingerprint: OpenPGP API.
                                                             (line 1140)
* gnutls_openpgp_privkey_get_subkey_id:  OpenPGP API.        (line 1162)
* gnutls_openpgp_privkey_get_subkey_idx: OpenPGP API.        (line 1180)
* gnutls_openpgp_privkey_get_subkey_pk_algorithm: OpenPGP API.
                                                             (line 1197)
* gnutls_openpgp_privkey_get_subkey_revoked_status: OpenPGP API.
                                                             (line 1221)
* gnutls_openpgp_privkey_import:         OpenPGP API.        (line 1239)
* gnutls_openpgp_privkey_init:           OpenPGP API.        (line 1260)
* gnutls_openpgp_privkey_sec_param:      OpenPGP API.        (line 1272)
* gnutls_openpgp_privkey_set_preferred_key_id: OpenPGP API.  (line 1288)
* gnutls_openpgp_privkey_sign_hash:      Compatibility API.  (line  126)
* gnutls_openpgp_send_cert:              Core TLS API.       (line 2125)
* gnutls_openpgp_set_recv_key_function:  OpenPGP API.        (line 1303)
* gnutls_pcert_deinit:                   Abstract key API.   (line   48)
* gnutls_pcert_import_openpgp:           Abstract key API.   (line   59)
* gnutls_pcert_import_openpgp_raw:       Abstract key API.   (line   80)
* gnutls_pcert_import_x509:              Abstract key API.   (line  104)
* gnutls_pcert_import_x509_raw:          Abstract key API.   (line  125)
* gnutls_pcert_list_import_x509_raw:     Abstract key API.   (line  148)
* gnutls_pem_base64_decode:              Core TLS API.       (line 2141)
* gnutls_pem_base64_decode_alloc:        Core TLS API.       (line 2164)
* gnutls_pem_base64_encode:              Core TLS API.       (line 2186)
* gnutls_pem_base64_encode_alloc:        Core TLS API.       (line 2209)
* gnutls_perror:                         Core TLS API.       (line 2229)
* gnutls_pk_algorithm_get_name:          Core TLS API.       (line 2239)
* gnutls_pk_bits_to_sec_param:           Core TLS API.       (line 2251)
* gnutls_pk_get_id:                      Core TLS API.       (line 2267)
* gnutls_pk_get_name:                    Core TLS API.       (line 2283)
* gnutls_pk_list:                        Core TLS API.       (line 2296)
* gnutls_pkcs11_add_provider:            PKCS 11 API.        (line   14)
* gnutls_pkcs11_copy_secret_key:         PKCS 11 API.        (line   33)
* gnutls_pkcs11_copy_x509_crt:           PKCS 11 API.        (line   57)
* gnutls_pkcs11_copy_x509_privkey:       PKCS 11 API.        (line   80)
* gnutls_pkcs11_deinit:                  PKCS 11 API.        (line  104)
* gnutls_pkcs11_delete_url:              PKCS 11 API.        (line  114)
* gnutls_pkcs11_init:                    PKCS 11 API.        (line  131)
* gnutls_pkcs11_obj_deinit:              PKCS 11 API.        (line  156)
* gnutls_pkcs11_obj_export:              PKCS 11 API.        (line  168)
* gnutls_pkcs11_obj_export_url:          PKCS 11 API.        (line  196)
* gnutls_pkcs11_obj_get_info:            PKCS 11 API.        (line  216)
* gnutls_pkcs11_obj_get_type:            PKCS 11 API.        (line  241)
* gnutls_pkcs11_obj_import_url:          PKCS 11 API.        (line  255)
* gnutls_pkcs11_obj_init:                PKCS 11 API.        (line  276)
* gnutls_pkcs11_obj_list_import_url:     PKCS 11 API.        (line  293)
* gnutls_pkcs11_privkey_deinit:          PKCS 11 API.        (line  318)
* gnutls_pkcs11_privkey_export_url:      PKCS 11 API.        (line  329)
* gnutls_pkcs11_privkey_generate:        PKCS 11 API.        (line  347)
* gnutls_pkcs11_privkey_get_info:        PKCS 11 API.        (line  372)
* gnutls_pkcs11_privkey_get_pk_algorithm: PKCS 11 API.       (line  395)
* gnutls_pkcs11_privkey_import_url:      PKCS 11 API.        (line  412)
* gnutls_pkcs11_privkey_init:            PKCS 11 API.        (line  432)
* gnutls_pkcs11_set_pin_function:        PKCS 11 API.        (line  445)
* gnutls_pkcs11_set_token_function:      PKCS 11 API.        (line  460)
* gnutls_pkcs11_token_get_flags:         PKCS 11 API.        (line  475)
* gnutls_pkcs11_token_get_info:          PKCS 11 API.        (line  494)
* gnutls_pkcs11_token_get_mechanism:     PKCS 11 API.        (line  516)
* gnutls_pkcs11_token_get_url:           PKCS 11 API.        (line  537)
* gnutls_pkcs11_token_init:              PKCS 11 API.        (line  558)
* gnutls_pkcs11_token_set_pin:           PKCS 11 API.        (line  577)
* gnutls_pkcs11_type_get_name:           PKCS 11 API.        (line  597)
* gnutls_pkcs12_bag_decrypt:             PKCS 12 API.        (line   14)
* gnutls_pkcs12_bag_deinit:              PKCS 12 API.        (line   28)
* gnutls_pkcs12_bag_encrypt:             PKCS 12 API.        (line   38)
* gnutls_pkcs12_bag_get_count:           PKCS 12 API.        (line   54)
* gnutls_pkcs12_bag_get_data:            PKCS 12 API.        (line   67)
* gnutls_pkcs12_bag_get_friendly_name:   PKCS 12 API.        (line   85)
* gnutls_pkcs12_bag_get_key_id:          PKCS 12 API.        (line  104)
* gnutls_pkcs12_bag_get_type:            PKCS 12 API.        (line  123)
* gnutls_pkcs12_bag_init:                PKCS 12 API.        (line  135)
* gnutls_pkcs12_bag_set_crl:             PKCS 12 API.        (line  149)
* gnutls_pkcs12_bag_set_crt:             PKCS 12 API.        (line  164)
* gnutls_pkcs12_bag_set_data:            PKCS 12 API.        (line  180)
* gnutls_pkcs12_bag_set_friendly_name:   PKCS 12 API.        (line  197)
* gnutls_pkcs12_bag_set_key_id:          PKCS 12 API.        (line  218)
* gnutls_pkcs12_deinit:                  PKCS 12 API.        (line  237)
* gnutls_pkcs12_export:                  PKCS 12 API.        (line  247)
* gnutls_pkcs12_generate_mac:            PKCS 12 API.        (line  274)
* gnutls_pkcs12_get_bag:                 PKCS 12 API.        (line  289)
* gnutls_pkcs12_import:                  PKCS 12 API.        (line  311)
* gnutls_pkcs12_init:                    PKCS 12 API.        (line  332)
* gnutls_pkcs12_set_bag:                 PKCS 12 API.        (line  346)
* gnutls_pkcs12_verify_mac:              PKCS 12 API.        (line  361)
* gnutls_pkcs7_deinit:                   X509 certificate API.
                                                             (line   13)
* gnutls_pkcs7_delete_crl:               X509 certificate API.
                                                             (line   22)
* gnutls_pkcs7_delete_crt:               X509 certificate API.
                                                             (line   37)
* gnutls_pkcs7_export:                   X509 certificate API.
                                                             (line   54)
* gnutls_pkcs7_get_crl_count:            X509 certificate API.
                                                             (line   80)
* gnutls_pkcs7_get_crl_raw:              X509 certificate API.
                                                             (line   93)
* gnutls_pkcs7_get_crt_count:            X509 certificate API.
                                                             (line  115)
* gnutls_pkcs7_get_crt_raw:              X509 certificate API.
                                                             (line  128)
* gnutls_pkcs7_import:                   X509 certificate API.
                                                             (line  153)
* gnutls_pkcs7_init:                     X509 certificate API.
                                                             (line  172)
* gnutls_pkcs7_set_crl:                  X509 certificate API.
                                                             (line  186)
* gnutls_pkcs7_set_crl_raw:              X509 certificate API.
                                                             (line  201)
* gnutls_pkcs7_set_crt:                  X509 certificate API.
                                                             (line  216)
* gnutls_pkcs7_set_crt_raw:              X509 certificate API.
                                                             (line  232)
* gnutls_prf:                            Core TLS API.       (line 2312)
* gnutls_prf_raw:                        Core TLS API.       (line 2353)
* gnutls_priority_deinit:                Core TLS API.       (line 2391)
* gnutls_priority_get_cipher_suite_index: Core TLS API.      (line 2401)
* gnutls_priority_init:                  Core TLS API.       (line 2424)
* gnutls_priority_set:                   Core TLS API.       (line 2493)
* gnutls_priority_set_direct:            Core TLS API.       (line 2507)
* gnutls_privkey_decrypt_data:           Abstract key API.   (line  180)
* gnutls_privkey_deinit:                 Abstract key API.   (line  201)
* gnutls_privkey_get_pk_algorithm:       Abstract key API.   (line  213)
* gnutls_privkey_get_type:               Abstract key API.   (line  232)
* gnutls_privkey_import_ext:             Abstract key API.   (line  250)
* gnutls_privkey_import_openpgp:         Abstract key API.   (line  276)
* gnutls_privkey_import_pkcs11:          Abstract key API.   (line  302)
* gnutls_privkey_import_x509:            Abstract key API.   (line  327)
* gnutls_privkey_init:                   Abstract key API.   (line  351)
* gnutls_privkey_sign_data:              Abstract key API.   (line  367)
* gnutls_privkey_sign_hash:              Abstract key API.   (line  398)
* gnutls_protocol_get_id:                Core TLS API.       (line 2527)
* gnutls_protocol_get_name:              Core TLS API.       (line 2539)
* gnutls_protocol_get_version:           Core TLS API.       (line 2551)
* gnutls_protocol_list:                  Core TLS API.       (line 2561)
* gnutls_protocol_set_priority:          Compatibility API.  (line  147)
* gnutls_psk_allocate_client_credentials: Core TLS API.      (line 2573)
* gnutls_psk_allocate_server_credentials: Core TLS API.      (line 2586)
* gnutls_psk_client_get_hint:            Core TLS API.       (line 2599)
* gnutls_psk_free_client_credentials:    Core TLS API.       (line 2615)
* gnutls_psk_free_server_credentials:    Core TLS API.       (line 2625)
* gnutls_psk_server_get_username:        Core TLS API.       (line 2635)
* gnutls_psk_set_client_credentials:     Core TLS API.       (line 2648)
* gnutls_psk_set_client_credentials_function: Core TLS API.  (line 2673)
* gnutls_psk_set_params_function:        Core TLS API.       (line 2697)
* gnutls_psk_set_server_credentials_file: Core TLS API.      (line 2711)
* gnutls_psk_set_server_credentials_function: Core TLS API.  (line 2728)
* gnutls_psk_set_server_credentials_hint: Core TLS API.      (line 2752)
* gnutls_psk_set_server_dh_params:       Core TLS API.       (line 2772)
* gnutls_psk_set_server_params_function: Core TLS API.       (line 2786)
* gnutls_pubkey_deinit:                  Abstract key API.   (line  426)
* gnutls_pubkey_export:                  Abstract key API.   (line  439)
* gnutls_pubkey_get_key_id:              Abstract key API.   (line  469)
* gnutls_pubkey_get_key_usage:           Abstract key API.   (line  497)
* gnutls_pubkey_get_openpgp_key_id:      Abstract key API.   (line  516)
* gnutls_pubkey_get_pk_algorithm:        Abstract key API.   (line  546)
* gnutls_pubkey_get_pk_dsa_raw:          Abstract key API.   (line  566)
* gnutls_pubkey_get_pk_ecc_raw:          Abstract key API.   (line  592)
* gnutls_pubkey_get_pk_ecc_x962:         Abstract key API.   (line  615)
* gnutls_pubkey_get_pk_rsa_raw:          Abstract key API.   (line  636)
* gnutls_pubkey_get_preferred_hash_algorithm: Abstract key API.
                                                             (line  658)
* gnutls_pubkey_get_verify_algorithm:    Abstract key API.   (line  682)
* gnutls_pubkey_import:                  Abstract key API.   (line  703)
* gnutls_pubkey_import_dsa_raw:          Abstract key API.   (line  725)
* gnutls_pubkey_import_ecc_raw:          Abstract key API.   (line  750)
* gnutls_pubkey_import_ecc_x962:         Abstract key API.   (line  773)
* gnutls_pubkey_import_openpgp:          Abstract key API.   (line  793)
* gnutls_pubkey_import_pkcs11:           Abstract key API.   (line  814)
* gnutls_pubkey_import_pkcs11_url:       Abstract key API.   (line  834)
* gnutls_pubkey_import_privkey:          Abstract key API.   (line  853)
* gnutls_pubkey_import_rsa_raw:          Abstract key API.   (line  875)
* gnutls_pubkey_import_x509:             Abstract key API.   (line  895)
* gnutls_pubkey_init:                    Abstract key API.   (line  913)
* gnutls_pubkey_set_key_usage:           Abstract key API.   (line  928)
* gnutls_pubkey_verify_data:             Abstract key API.   (line  947)
* gnutls_pubkey_verify_data2:            Abstract key API.   (line  970)
* gnutls_pubkey_verify_hash:             Abstract key API.   (line  995)
* gnutls_record_check_pending:           Core TLS API.       (line 2799)
* gnutls_record_disable_padding:         Core TLS API.       (line 2812)
* gnutls_record_get_direction:           Core TLS API.       (line 2826)
* gnutls_record_get_discarded:           Datagram TLS API.   (line  157)
* gnutls_record_get_max_size:            Core TLS API.       (line 2847)
* gnutls_record_recv:                    Core TLS API.       (line 2859)
* gnutls_record_recv_seq:                Core TLS API.       (line 2891)
* gnutls_record_send:                    Core TLS API.       (line 2918)
* gnutls_record_set_max_size:            Core TLS API.       (line 2948)
* gnutls_rehandshake:                    Core TLS API.       (line 2971)
* gnutls_rnd:                            Cryptographic API.  (line  400)
* gnutls_rsa_export_get_modulus_bits:    Compatibility API.  (line  162)
* gnutls_rsa_export_get_pubkey:          Compatibility API.  (line  174)
* gnutls_rsa_params_cpy:                 Compatibility API.  (line  192)
* gnutls_rsa_params_deinit:              Compatibility API.  (line  207)
* gnutls_rsa_params_export_pkcs1:        Compatibility API.  (line  218)
* gnutls_rsa_params_export_raw:          Compatibility API.  (line  246)
* gnutls_rsa_params_generate2:           Compatibility API.  (line  274)
* gnutls_rsa_params_import_pkcs1:        Compatibility API.  (line  297)
* gnutls_rsa_params_import_raw:          Compatibility API.  (line  320)
* gnutls_rsa_params_init:                Compatibility API.  (line  346)
* gnutls_safe_renegotiation_status:      Core TLS API.       (line 3004)
* gnutls_sec_param_get_name:             Core TLS API.       (line 3019)
* gnutls_sec_param_to_pk_bits:           Core TLS API.       (line 3033)
* gnutls_server_name_get:                Core TLS API.       (line 3053)
* gnutls_server_name_set:                Core TLS API.       (line 3090)
* gnutls_session_channel_binding:        Core TLS API.       (line 3116)
* gnutls_session_enable_compatibility_mode: Core TLS API.    (line 3137)
* gnutls_session_get_data:               Core TLS API.       (line 3151)
* gnutls_session_get_data2:              Core TLS API.       (line 3175)
* gnutls_session_get_id:                 Core TLS API.       (line 3197)
* gnutls_session_get_ptr:                Core TLS API.       (line 3220)
* gnutls_session_is_resumed:             Core TLS API.       (line 3232)
* gnutls_session_set_data:               Core TLS API.       (line 3244)
* gnutls_session_set_ptr:                Core TLS API.       (line 3267)
* gnutls_session_ticket_enable_client:   Core TLS API.       (line 3280)
* gnutls_session_ticket_enable_server:   Core TLS API.       (line 3295)
* gnutls_session_ticket_key_generate:    Core TLS API.       (line 3313)
* gnutls_set_default_export_priority:    Compatibility API.  (line  359)
* gnutls_set_default_priority:           Core TLS API.       (line 3328)
* gnutls_sign_algorithm_get_requested:   Core TLS API.       (line 3349)
* gnutls_sign_callback_get:              Compatibility API.  (line  381)
* gnutls_sign_callback_set:              Compatibility API.  (line  398)
* gnutls_sign_get_id:                    Core TLS API.       (line 3375)
* gnutls_sign_get_name:                  Core TLS API.       (line 3387)
* gnutls_sign_list:                      Core TLS API.       (line 3398)
* gnutls_srp_allocate_client_credentials: Core TLS API.      (line 3408)
* gnutls_srp_allocate_server_credentials: Core TLS API.      (line 3421)
* gnutls_srp_base64_decode:              Core TLS API.       (line 3434)
* gnutls_srp_base64_decode_alloc:        Core TLS API.       (line 3456)
* gnutls_srp_base64_encode:              Core TLS API.       (line 3476)
* gnutls_srp_base64_encode_alloc:        Core TLS API.       (line 3498)
* gnutls_srp_free_client_credentials:    Core TLS API.       (line 3519)
* gnutls_srp_free_server_credentials:    Core TLS API.       (line 3529)
* gnutls_srp_server_get_username:        Core TLS API.       (line 3539)
* gnutls_srp_set_client_credentials:     Core TLS API.       (line 3553)
* gnutls_srp_set_client_credentials_function: Core TLS API.  (line 3574)
* gnutls_srp_set_prime_bits:             Core TLS API.       (line 3603)
* gnutls_srp_set_server_credentials_file: Core TLS API.      (line 3625)
* gnutls_srp_set_server_credentials_function: Core TLS API.  (line 3645)
* gnutls_srp_verifier:                   Core TLS API.       (line 3680)
* gnutls_strerror:                       Core TLS API.       (line 3706)
* gnutls_strerror_name:                  Core TLS API.       (line 3720)
* gnutls_supplemental_get_name:          Core TLS API.       (line 3736)
* gnutls_transport_get_ptr:              Core TLS API.       (line 3749)
* gnutls_transport_get_ptr2:             Core TLS API.       (line 3763)
* gnutls_transport_set_errno:            Core TLS API.       (line 3778)
* gnutls_transport_set_errno_function:   Core TLS API.       (line 3798)
* gnutls_transport_set_ptr:              Core TLS API.       (line 3816)
* gnutls_transport_set_ptr2:             Core TLS API.       (line 3830)
* gnutls_transport_set_pull_function:    Core TLS API.       (line 3846)
* gnutls_transport_set_pull_timeout_function: Core TLS API.  (line 3864)
* gnutls_transport_set_push_function:    Core TLS API.       (line 3887)
* gnutls_transport_set_vec_push_function: Core TLS API.      (line 3907)
* gnutls_x509_crl_check_issuer:          X509 certificate API.
                                                             (line  247)
* gnutls_x509_crl_deinit:                X509 certificate API.
                                                             (line  263)
* gnutls_x509_crl_export:                X509 certificate API.
                                                             (line  273)
* gnutls_x509_crl_get_authority_key_id:  X509 certificate API.
                                                             (line  301)
* gnutls_x509_crl_get_crt_count:         X509 certificate API.
                                                             (line  324)
* gnutls_x509_crl_get_crt_serial:        X509 certificate API.
                                                             (line  338)
* gnutls_x509_crl_get_dn_oid:            X509 certificate API.
                                                             (line  360)
* gnutls_x509_crl_get_extension_data:    X509 certificate API.
                                                             (line  382)
* gnutls_x509_crl_get_extension_info:    X509 certificate API.
                                                             (line  413)
* gnutls_x509_crl_get_extension_oid:     X509 certificate API.
                                                             (line  446)
* gnutls_x509_crl_get_issuer_dn:         X509 certificate API.
                                                             (line  471)
* gnutls_x509_crl_get_issuer_dn_by_oid:  X509 certificate API.
                                                             (line  494)
* gnutls_x509_crl_get_next_update:       X509 certificate API.
                                                             (line  529)
* gnutls_x509_crl_get_number:            X509 certificate API.
                                                             (line  543)
* gnutls_x509_crl_get_raw_issuer_dn:     X509 certificate API.
                                                             (line  566)
* gnutls_x509_crl_get_signature:         X509 certificate API.
                                                             (line  582)
* gnutls_x509_crl_get_signature_algorithm: X509 certificate API.
                                                             (line  601)
* gnutls_x509_crl_get_this_update:       X509 certificate API.
                                                             (line  615)
* gnutls_x509_crl_get_version:           X509 certificate API.
                                                             (line  626)
* gnutls_x509_crl_import:                X509 certificate API.
                                                             (line  638)
* gnutls_x509_crl_init:                  X509 certificate API.
                                                             (line  657)
* gnutls_x509_crl_list_import:           X509 certificate API.
                                                             (line  674)
* gnutls_x509_crl_list_import2:          X509 certificate API.
                                                             (line  705)
* gnutls_x509_crl_print:                 X509 certificate API.
                                                             (line  735)
* gnutls_x509_crl_privkey_sign:          Abstract key API.   (line 1018)
* gnutls_x509_crl_set_authority_key_id:  X509 certificate API.
                                                             (line  754)
* gnutls_x509_crl_set_crt:               X509 certificate API.
                                                             (line  775)
* gnutls_x509_crl_set_crt_serial:        X509 certificate API.
                                                             (line  794)
* gnutls_x509_crl_set_next_update:       X509 certificate API.
                                                             (line  813)
* gnutls_x509_crl_set_number:            X509 certificate API.
                                                             (line  828)
* gnutls_x509_crl_set_this_update:       X509 certificate API.
                                                             (line  848)
* gnutls_x509_crl_set_version:           X509 certificate API.
                                                             (line  863)
* gnutls_x509_crl_sign:                  Compatibility API.  (line  424)
* gnutls_x509_crl_sign2:                 X509 certificate API.
                                                             (line  880)
* gnutls_x509_crl_verify:                X509 certificate API.
                                                             (line  906)
* gnutls_x509_crq_deinit:                X509 certificate API.
                                                             (line  929)
* gnutls_x509_crq_export:                X509 certificate API.
                                                             (line  940)
* gnutls_x509_crq_get_attribute_by_oid:  X509 certificate API.
                                                             (line  968)
* gnutls_x509_crq_get_attribute_data:    X509 certificate API.
                                                             (line  992)
* gnutls_x509_crq_get_attribute_info:    X509 certificate API.
                                                             (line 1021)
* gnutls_x509_crq_get_basic_constraints: X509 certificate API.
                                                             (line 1053)
* gnutls_x509_crq_get_challenge_password: X509 certificate API.
                                                             (line 1082)
* gnutls_x509_crq_get_dn:                X509 certificate API.
                                                             (line 1100)
* gnutls_x509_crq_get_dn_by_oid:         X509 certificate API.
                                                             (line 1122)
* gnutls_x509_crq_get_dn_oid:            X509 certificate API.
                                                             (line 1155)
* gnutls_x509_crq_get_extension_by_oid:  X509 certificate API.
                                                             (line 1177)
* gnutls_x509_crq_get_extension_data:    X509 certificate API.
                                                             (line 1206)
* gnutls_x509_crq_get_extension_info:    X509 certificate API.
                                                             (line 1237)
* gnutls_x509_crq_get_key_id:            X509 certificate API.
                                                             (line 1271)
* gnutls_x509_crq_get_key_purpose_oid:   X509 certificate API.
                                                             (line 1300)
* gnutls_x509_crq_get_key_rsa_raw:       X509 certificate API.
                                                             (line 1327)
* gnutls_x509_crq_get_key_usage:         X509 certificate API.
                                                             (line 1348)
* gnutls_x509_crq_get_pk_algorithm:      X509 certificate API.
                                                             (line 1376)
* gnutls_x509_crq_get_subject_alt_name:  X509 certificate API.
                                                             (line 1397)
* gnutls_x509_crq_get_subject_alt_othername_oid: X509 certificate API.
                                                             (line 1434)
* gnutls_x509_crq_get_version:           X509 certificate API.
                                                             (line 1468)
* gnutls_x509_crq_import:                X509 certificate API.
                                                             (line 1481)
* gnutls_x509_crq_init:                  X509 certificate API.
                                                             (line 1501)
* gnutls_x509_crq_print:                 X509 certificate API.
                                                             (line 1515)
* gnutls_x509_crq_privkey_sign:          Abstract key API.   (line 1046)
* gnutls_x509_crq_set_attribute_by_oid:  X509 certificate API.
                                                             (line 1537)
* gnutls_x509_crq_set_basic_constraints: X509 certificate API.
                                                             (line 1558)
* gnutls_x509_crq_set_challenge_password: X509 certificate API.
                                                             (line 1580)
* gnutls_x509_crq_set_dn_by_oid:         X509 certificate API.
                                                             (line 1596)
* gnutls_x509_crq_set_key:               X509 certificate API.
                                                             (line 1624)
* gnutls_x509_crq_set_key_purpose_oid:   X509 certificate API.
                                                             (line 1640)
* gnutls_x509_crq_set_key_rsa_raw:       X509 certificate API.
                                                             (line 1663)
* gnutls_x509_crq_set_key_usage:         X509 certificate API.
                                                             (line 1683)
* gnutls_x509_crq_set_pubkey:            Abstract key API.   (line 1074)
* gnutls_x509_crq_set_subject_alt_name:  X509 certificate API.
                                                             (line 1701)
* gnutls_x509_crq_set_version:           X509 certificate API.
                                                             (line 1725)
* gnutls_x509_crq_sign:                  Compatibility API.  (line  444)
* gnutls_x509_crq_sign2:                 X509 certificate API.
                                                             (line 1741)
* gnutls_x509_crq_verify:                X509 certificate API.
                                                             (line 1767)
* gnutls_x509_crt_check_hostname:        X509 certificate API.
                                                             (line 1787)
* gnutls_x509_crt_check_issuer:          X509 certificate API.
                                                             (line 1804)
* gnutls_x509_crt_check_revocation:      X509 certificate API.
                                                             (line 1820)
* gnutls_x509_crt_cpy_crl_dist_points:   X509 certificate API.
                                                             (line 1838)
* gnutls_x509_crt_deinit:                X509 certificate API.
                                                             (line 1854)
* gnutls_x509_crt_export:                X509 certificate API.
                                                             (line 1865)
* gnutls_x509_crt_get_activation_time:   X509 certificate API.
                                                             (line 1892)
* gnutls_x509_crt_get_authority_info_access: X509 certificate API.
                                                             (line 1905)
* gnutls_x509_crt_get_authority_key_id:  X509 certificate API.
                                                             (line 1986)
* gnutls_x509_crt_get_basic_constraints: X509 certificate API.
                                                             (line 2010)
* gnutls_x509_crt_get_ca_status:         X509 certificate API.
                                                             (line 2037)
* gnutls_x509_crt_get_crl_dist_points:   X509 certificate API.
                                                             (line 2061)
* gnutls_x509_crt_get_dn:                X509 certificate API.
                                                             (line 2102)
* gnutls_x509_crt_get_dn_by_oid:         X509 certificate API.
                                                             (line 2127)
* gnutls_x509_crt_get_dn_oid:            X509 certificate API.
                                                             (line 2165)
* gnutls_x509_crt_get_expiration_time:   X509 certificate API.
                                                             (line 2190)
* gnutls_x509_crt_get_extension_by_oid:  X509 certificate API.
                                                             (line 2203)
* gnutls_x509_crt_get_extension_data:    X509 certificate API.
                                                             (line 2230)
* gnutls_x509_crt_get_extension_info:    X509 certificate API.
                                                             (line 2259)
* gnutls_x509_crt_get_extension_oid:     X509 certificate API.
                                                             (line 2290)
* gnutls_x509_crt_get_fingerprint:       X509 certificate API.
                                                             (line 2314)
* gnutls_x509_crt_get_issuer:            X509 certificate API.
                                                             (line 2336)
* gnutls_x509_crt_get_issuer_alt_name:   X509 certificate API.
                                                             (line 2356)
* gnutls_x509_crt_get_issuer_alt_name2:  X509 certificate API.
                                                             (line 2399)
* gnutls_x509_crt_get_issuer_alt_othername_oid: X509 certificate API.
                                                             (line 2437)
* gnutls_x509_crt_get_issuer_dn:         X509 certificate API.
                                                             (line 2476)
* gnutls_x509_crt_get_issuer_dn_by_oid:  X509 certificate API.
                                                             (line 2502)
* gnutls_x509_crt_get_issuer_dn_oid:     X509 certificate API.
                                                             (line 2540)
* gnutls_x509_crt_get_issuer_unique_id:  X509 certificate API.
                                                             (line 2565)
* gnutls_x509_crt_get_key_id:            X509 certificate API.
                                                             (line 2590)
* gnutls_x509_crt_get_key_purpose_oid:   X509 certificate API.
                                                             (line 2617)
* gnutls_x509_crt_get_key_usage:         X509 certificate API.
                                                             (line 2646)
* gnutls_x509_crt_get_pk_algorithm:      X509 certificate API.
                                                             (line 2670)
* gnutls_x509_crt_get_pk_dsa_raw:        X509 certificate API.
                                                             (line 2691)
* gnutls_x509_crt_get_pk_rsa_raw:        X509 certificate API.
                                                             (line 2714)
* gnutls_x509_crt_get_preferred_hash_algorithm: Compatibility API.
                                                             (line  463)
* gnutls_x509_crt_get_proxy:             X509 certificate API.
                                                             (line 2734)
* gnutls_x509_crt_get_raw_dn:            X509 certificate API.
                                                             (line 2761)
* gnutls_x509_crt_get_raw_issuer_dn:     X509 certificate API.
                                                             (line 2777)
* gnutls_x509_crt_get_serial:            X509 certificate API.
                                                             (line 2792)
* gnutls_x509_crt_get_signature:         X509 certificate API.
                                                             (line 2812)
* gnutls_x509_crt_get_signature_algorithm: X509 certificate API.
                                                             (line 2831)
* gnutls_x509_crt_get_subject:           X509 certificate API.
                                                             (line 2845)
* gnutls_x509_crt_get_subject_alt_name:  X509 certificate API.
                                                             (line 2865)
* gnutls_x509_crt_get_subject_alt_name2: X509 certificate API.
                                                             (line 2906)
* gnutls_x509_crt_get_subject_alt_othername_oid: X509 certificate API.
                                                             (line 2942)
* gnutls_x509_crt_get_subject_key_id:    X509 certificate API.
                                                             (line 2980)
* gnutls_x509_crt_get_subject_unique_id: X509 certificate API.
                                                             (line 3001)
* gnutls_x509_crt_get_verify_algorithm:  Compatibility API.  (line  490)
* gnutls_x509_crt_get_version:           X509 certificate API.
                                                             (line 3022)
* gnutls_x509_crt_import:                X509 certificate API.
                                                             (line 3035)
* gnutls_x509_crt_import_pkcs11:         PKCS 11 API.        (line  613)
* gnutls_x509_crt_import_pkcs11_url:     PKCS 11 API.        (line  630)
* gnutls_x509_crt_init:                  X509 certificate API.
                                                             (line 3055)
* gnutls_x509_crt_list_import:           X509 certificate API.
                                                             (line 3069)
* gnutls_x509_crt_list_import2:          X509 certificate API.
                                                             (line 3106)
* gnutls_x509_crt_list_import_pkcs11:    PKCS 11 API.        (line  652)
* gnutls_x509_crt_list_verify:           X509 certificate API.
                                                             (line 3139)
* gnutls_x509_crt_print:                 X509 certificate API.
                                                             (line 3180)
* gnutls_x509_crt_privkey_sign:          Abstract key API.   (line 1092)
* gnutls_x509_crt_set_activation_time:   X509 certificate API.
                                                             (line 3204)
* gnutls_x509_crt_set_authority_key_id:  X509 certificate API.
                                                             (line 3219)
* gnutls_x509_crt_set_basic_constraints: X509 certificate API.
                                                             (line 3238)
* gnutls_x509_crt_set_ca_status:         X509 certificate API.
                                                             (line 3258)
* gnutls_x509_crt_set_crl_dist_points:   X509 certificate API.
                                                             (line 3277)
* gnutls_x509_crt_set_crl_dist_points2:  X509 certificate API.
                                                             (line 3298)
* gnutls_x509_crt_set_crq:               X509 certificate API.
                                                             (line 3321)
* gnutls_x509_crt_set_crq_extensions:    X509 certificate API.
                                                             (line 3337)
* gnutls_x509_crt_set_dn_by_oid:         X509 certificate API.
                                                             (line 3355)
* gnutls_x509_crt_set_expiration_time:   X509 certificate API.
                                                             (line 3383)
* gnutls_x509_crt_set_extension_by_oid:  X509 certificate API.
                                                             (line 3399)
* gnutls_x509_crt_set_issuer_dn_by_oid:  X509 certificate API.
                                                             (line 3423)
* gnutls_x509_crt_set_key:               X509 certificate API.
                                                             (line 3455)
* gnutls_x509_crt_set_key_purpose_oid:   X509 certificate API.
                                                             (line 3472)
* gnutls_x509_crt_set_key_usage:         X509 certificate API.
                                                             (line 3493)
* gnutls_x509_crt_set_proxy:             X509 certificate API.
                                                             (line 3509)
* gnutls_x509_crt_set_proxy_dn:          X509 certificate API.
                                                             (line 3532)
* gnutls_x509_crt_set_pubkey:            Abstract key API.   (line 1117)
* gnutls_x509_crt_set_serial:            X509 certificate API.
                                                             (line 3558)
* gnutls_x509_crt_set_subject_alt_name:  X509 certificate API.
                                                             (line 3600)
* gnutls_x509_crt_set_subject_alternative_name: X509 certificate API.
                                                             (line 3578)
* gnutls_x509_crt_set_subject_key_id:    X509 certificate API.
                                                             (line 3624)
* gnutls_x509_crt_set_version:           X509 certificate API.
                                                             (line 3641)
* gnutls_x509_crt_sign:                  X509 certificate API.
                                                             (line 3663)
* gnutls_x509_crt_sign2:                 X509 certificate API.
                                                             (line 3682)
* gnutls_x509_crt_verify:                X509 certificate API.
                                                             (line 3708)
* gnutls_x509_crt_verify_data:           Compatibility API.  (line  514)
* gnutls_x509_crt_verify_hash:           Compatibility API.  (line  537)
* gnutls_x509_dn_deinit:                 X509 certificate API.
                                                             (line 3730)
* gnutls_x509_dn_export:                 X509 certificate API.
                                                             (line 3743)
* gnutls_x509_dn_get_rdn_ava:            X509 certificate API.
                                                             (line 3770)
* gnutls_x509_dn_import:                 X509 certificate API.
                                                             (line 3793)
* gnutls_x509_dn_init:                   X509 certificate API.
                                                             (line 3811)
* gnutls_x509_dn_oid_known:              X509 certificate API.
                                                             (line 3828)
* gnutls_x509_privkey_cpy:               X509 certificate API.
                                                             (line 3845)
* gnutls_x509_privkey_deinit:            X509 certificate API.
                                                             (line 3860)
* gnutls_x509_privkey_export:            X509 certificate API.
                                                             (line 3871)
* gnutls_x509_privkey_export_dsa_raw:    X509 certificate API.
                                                             (line 3902)
* gnutls_x509_privkey_export_ecc_raw:    X509 certificate API.
                                                             (line 3928)
* gnutls_x509_privkey_export_pkcs8:      X509 certificate API.
                                                             (line 3955)
* gnutls_x509_privkey_export_rsa_raw:    X509 certificate API.
                                                             (line 3994)
* gnutls_x509_privkey_export_rsa_raw2:   X509 certificate API.
                                                             (line 4024)
* gnutls_x509_privkey_fix:               X509 certificate API.
                                                             (line 4056)
* gnutls_x509_privkey_generate:          X509 certificate API.
                                                             (line 4071)
* gnutls_x509_privkey_get_key_id:        X509 certificate API.
                                                             (line 4094)
* gnutls_x509_privkey_get_pk_algorithm:  X509 certificate API.
                                                             (line 4120)
* gnutls_x509_privkey_import:            X509 certificate API.
                                                             (line 4134)
* gnutls_x509_privkey_import_dsa_raw:    X509 certificate API.
                                                             (line 4157)
* gnutls_x509_privkey_import_ecc_raw:    X509 certificate API.
                                                             (line 4183)
* gnutls_x509_privkey_import_pkcs8:      X509 certificate API.
                                                             (line 4209)
* gnutls_x509_privkey_import_rsa_raw:    X509 certificate API.
                                                             (line 4244)
* gnutls_x509_privkey_import_rsa_raw2:   X509 certificate API.
                                                             (line 4274)
* gnutls_x509_privkey_init:              X509 certificate API.
                                                             (line 4303)
* gnutls_x509_privkey_sec_param:         X509 certificate API.
                                                             (line 4316)
* gnutls_x509_privkey_sign_data:         Compatibility API.  (line  561)
* gnutls_x509_privkey_sign_hash:         Compatibility API.  (line  597)
* gnutls_x509_privkey_verify_params:     X509 certificate API.
                                                             (line 4331)
* gnutls_x509_rdn_get:                   X509 certificate API.
                                                             (line 4344)
* gnutls_x509_rdn_get_by_oid:            X509 certificate API.
                                                             (line 4365)
* gnutls_x509_rdn_get_oid:               X509 certificate API.
                                                             (line 4392)
* gnutls_x509_trust_list_add_cas:        X509 certificate API.
                                                             (line 4416)
* gnutls_x509_trust_list_add_crls:       X509 certificate API.
                                                             (line 4439)
* gnutls_x509_trust_list_add_named_crt:  X509 certificate API.
                                                             (line 4469)
* gnutls_x509_trust_list_deinit:         X509 certificate API.
                                                             (line 4502)
* gnutls_x509_trust_list_get_issuer:     X509 certificate API.
                                                             (line 4517)
* gnutls_x509_trust_list_init:           X509 certificate API.
                                                             (line 4538)
* gnutls_x509_trust_list_verify_crt:     X509 certificate API.
                                                             (line 4558)
* gnutls_x509_trust_list_verify_named_crt: X509 certificate API.
                                                             (line 4588)


File: gnutls.info,  Node: Concept Index,  Next: Function and Data Index,  Prev: Copying Information,  Up: Top

Concept Index
*************

 [index ]
* Menu:

* abstract types:                        Abstract key types.   (line  6)
* alert protocol:                        The TLS Alert Protocol.
                                                               (line  6)
* anonymous authentication:              Anonymous authentication.
                                                               (line  6)
* API reference:                         API reference.        (line  6)
* bad_record_mac:                        On Record Padding.    (line  6)
* callback functions:                    Callback functions.   (line  6)
* certificate authentication <1>:        More on certificate authentication.
                                                               (line  6)
* certificate authentication:            Certificate authentication.
                                                               (line  6)
* certificate requests:                  PKCS 10 certificate requests.
                                                               (line  6)
* certificate revocation lists:          PKIX certificate revocation lists.
                                                               (line  6)
* certtool:                              The certtool application.
                                                               (line  6)
* channel bindings:                      Channel Bindings.     (line  6)
* ciphersuites:                          Supported ciphersuites in GnuTLS.
                                                               (line  6)
* client certificate authentication:     Client Authentication.
                                                               (line  6)
* compression algorithms:                Compression algorithms used in the record layer.
                                                               (line  6)
* contributing:                          Contributing.         (line  7)
* CRL:                                   PKIX certificate revocation lists.
                                                               (line  6)
* debug server:                          Setting up a test HTTPS server.
                                                               (line  6)
* digital signatures:                    Digital signatures.   (line  6)
* download:                              Downloading and installing.
                                                               (line  6)
* Encrypted keys:                        Managing encrypted keys.
                                                               (line  6)
* error codes:                           Error codes.          (line  6)
* example programs:                      GnuTLS application examples.
                                                               (line  6)
* examples:                              GnuTLS application examples.
                                                               (line  6)
* exporting keying material:             Keying Material Exporters.
                                                               (line  6)
* FDL, GNU Free Documentation License:   GNU Free Documentation License.
                                                               (line  6)
* generating parameters:                 Parameter generation. (line  6)
* gnutls-cli:                            The gnutls-cli tool.  (line  6)
* gnutls-cli-debug:                      The gnutls-cli-debug tool.
                                                               (line  6)
* gnutls-serv:                           The gnutls-serv tool. (line  6)
* hacking:                               Contributing.         (line  7)
* handshake protocol:                    The TLS Handshake Protocol.
                                                               (line  6)
* hardware security modules:             Hardware tokens.      (line  6)
* hardware tokens:                       Hardware tokens.      (line  6)
* hash functions:                        Hash and HMAC functions.
                                                               (line  6)
* HMAC functions:                        Hash and HMAC functions.
                                                               (line  6)
* HTTPS server:                          Setting up a test HTTPS server.
                                                               (line  6)
* installation:                          Downloading and installing.
                                                               (line  6)
* internal architecture:                 Internal architecture of GnuTLS.
                                                               (line  6)
* key sizes:                             Selecting cryptographic key sizes.
                                                               (line  6)
* keying material exporters:             Keying Material Exporters.
                                                               (line  6)
* maximum fragment length:               Maximum fragment length negotiation.
                                                               (line  6)
* OpenPGP API:                           OpenPGP API.          (line  6)
* OpenPGP certificates:                  OpenPGP certificates. (line  6)
* OpenPGP server:                        Echo Server with OpenPGP authentication.
                                                               (line  6)
* OpenSSL:                               Compatibility with the OpenSSL library.
                                                               (line  6)
* p11tool:                               The p11tool application.
                                                               (line  6)
* parameter generation:                  Parameter generation. (line  6)
* PCT:                                   On SSL 2 and older protocols.
                                                               (line 38)
* PKCS #10:                              PKCS 10 certificate requests.
                                                               (line  6)
* PKCS #11 tokens:                       Hardware tokens.      (line  6)
* PKCS #12:                              Managing encrypted keys.
                                                               (line 64)
* PKCS #8:                               Managing encrypted keys.
                                                               (line 22)
* PSK authentication:                    Authentication using PSK.
                                                               (line  6)
* PSK client:                            Example client PSK connection.
                                                               (line  6)
* psktool:                               Invoking psktool.     (line  6)
* random numbers:                        Random number generation.
                                                               (line  6)
* record padding:                        On Record Padding.    (line  6)
* record protocol:                       The TLS record protocol.
                                                               (line  6)
* renegotiation:                         Safe renegotiation.   (line  6)
* reporting bugs:                        Bug Reports.          (line  6)
* resuming sessions <1>:                 Session resumption.   (line  6)
* resuming sessions:                     Resuming Sessions.    (line  6)
* safe renegotiation:                    Safe renegotiation.   (line  6)
* server name indication:                Server name indication.
                                                               (line  6)
* session resumption <1>:                Session resumption.   (line  6)
* session resumption:                    Resuming Sessions.    (line  6)
* session tickets:                       Session tickets.      (line  6)
* smart cards:                           Hardware tokens.      (line  6)
* SRP authentication:                    Authentication using SRP.
                                                               (line  6)
* srptool:                               Invoking srptool.     (line  6)
* SSL 2:                                 On SSL 2 and older protocols.
                                                               (line  6)
* symmetric cryptography:                Symmetric cryptography.
                                                               (line  6)
* symmetric encryption algorithms:       Encryption algorithms used in the record layer.
                                                               (line  6)
* thread safety:                         Thread safety.        (line  6)
* tickets:                               Session tickets.      (line  6)
* TLS extensions <1>:                    Session tickets.      (line  6)
* TLS extensions <2>:                    Server name indication.
                                                               (line  6)
* TLS extensions <3>:                    Maximum fragment length negotiation.
                                                               (line  6)
* TLS extensions:                        TLS Extensions.       (line  6)
* TLS layers:                            TLS layers.           (line  6)
* transport layer:                       The transport layer.  (line  6)
* transport protocol:                    The transport layer.  (line  6)
* verifying certificate paths <1>:       Verifying a certificate in the context of TLS session.
                                                               (line  6)
* verifying certificate paths:           Verifying X.509 certificate paths.
                                                               (line  6)
* X.509 certificates:                    X.509 certificates.   (line  6)
* X.509 Functions:                       X509 certificate API. (line  6)


