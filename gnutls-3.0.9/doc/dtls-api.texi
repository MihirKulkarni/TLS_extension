
@subheading gnutls_dtls_cookie_send
@anchor{gnutls_dtls_cookie_send}
@deftypefun {int} {gnutls_dtls_cookie_send} (gnutls_datum_t* @var{key}, void* @var{client_data}, size_t @var{client_data_size}, gnutls_dtls_prestate_st* @var{prestate}, gnutls_transport_ptr_t @var{ptr}, gnutls_push_func @var{push_func})
@var{key}: is a random key to be used at cookie generation

@var{client_data}: contains data identifying the client (i.e. address)

@var{client_data_size}: The size of client's data

@var{prestate}: The previous cookie returned by @code{gnutls_dtls_cookie_verify()}

@var{ptr}: A transport pointer to be used by  @code{push_func}

@var{push_func}: A function that will be used to reply


@strong{ Description:} This function can be used to prevent denial of service
attacks to a DTLS server by requiring the client to
reply using a cookie sent by this function. That way
it can be ensured that a client we allocated resources
for (i.e. @code{gnutls_session_t}) is the one that the 
original incoming packet was originated from.

@strong{ Returns:} the number of bytes sent, or a negative error code.  

@strong{ Since:} 3.0.0
@end deftypefun

@subheading gnutls_dtls_cookie_verify
@anchor{gnutls_dtls_cookie_verify}
@deftypefun {int} {gnutls_dtls_cookie_verify} (gnutls_datum_t* @var{key}, void* @var{client_data}, size_t @var{client_data_size}, void* @var{_msg}, size_t @var{msg_size}, gnutls_dtls_prestate_st* @var{prestate})
@var{key}: is a random key to be used at cookie generation

@var{client_data}: contains data identifying the client (i.e. address)

@var{client_data_size}: The size of client's data

@var{_msg}: An incoming message that initiates a connection.

@var{msg_size}: The size of the message.

@var{prestate}: The cookie of this client.


@strong{ Description:} This function will verify an incoming message for
a valid cookie. If a valid cookie is returned then
it should be associated with the session using
@code{gnutls_dtls_prestate_set()};

@strong{ Returns:} @code{GNUTLS_E_SUCCESS} (0) on success, or a negative error code.  

@strong{ Since:} 3.0.0
@end deftypefun

@subheading gnutls_dtls_get_data_mtu
@anchor{gnutls_dtls_get_data_mtu}
@deftypefun {unsigned int} {gnutls_dtls_get_data_mtu} (gnutls_session_t @var{session})
@var{session}: is a @code{gnutls_session_t} structure.


@strong{ Description:} This function will return the actual maximum transfer unit for
application data. I.e. DTLS headers are subtracted from the
actual MTU.

@strong{ Returns:} the maximum allowed transfer unit.

@strong{ Since:} 3.0.0
@end deftypefun

@subheading gnutls_dtls_get_mtu
@anchor{gnutls_dtls_get_mtu}
@deftypefun {unsigned int} {gnutls_dtls_get_mtu} (gnutls_session_t @var{session})
@var{session}: is a @code{gnutls_session_t} structure.


@strong{ Description:} This function will return the MTU size as set with
@code{gnutls_dtls_set_mtu()}. This is not the actual MTU
of data you can transmit. Use @code{gnutls_dtls_get_data_mtu()}
for that reason.

@strong{ Returns:} the set maximum transfer unit.

@strong{ Since:} 3.0.0
@end deftypefun

@subheading gnutls_dtls_prestate_set
@anchor{gnutls_dtls_prestate_set}
@deftypefun {void} {gnutls_dtls_prestate_set} (gnutls_session_t @var{session}, gnutls_dtls_prestate_st* @var{prestate})
@var{session}: a new session

@var{prestate}: contains the client's prestate


@strong{ Description:} This function will associate the prestate acquired by
the cookie authentication with the client, with the newly 
established session.

@strong{ Since:} 3.0.0
@end deftypefun

@subheading gnutls_dtls_set_mtu
@anchor{gnutls_dtls_set_mtu}
@deftypefun {void} {gnutls_dtls_set_mtu} (gnutls_session_t @var{session}, unsigned int @var{mtu})
@var{session}: is a @code{gnutls_session_t} structure.

@var{mtu}: The maximum transfer unit of the interface


@strong{ Description:} This function will set the maximum transfer unit of the interface
that DTLS packets are expected to leave from.

@strong{ Since:} 3.0.0
@end deftypefun

@subheading gnutls_dtls_set_timeouts
@anchor{gnutls_dtls_set_timeouts}
@deftypefun {void} {gnutls_dtls_set_timeouts} (gnutls_session_t @var{session}, unsigned int @var{retrans_timeout}, unsigned int @var{total_timeout})
@var{session}: is a @code{gnutls_session_t} structure.

@var{retrans_timeout}: The time at which a retransmission will occur in milliseconds

@var{total_timeout}: The time at which the connection will be aborted, in milliseconds.


@strong{ Description:} This function will set the timeouts required for the DTLS handshake
protocol. The retransmission timeout is the time after which a
message from the peer is not received, the previous messages will
be retransmitted. The total timeout is the time after which the
handshake will be aborted with @code{GNUTLS_E_TIMEDOUT}.

The DTLS protocol recommends the values of 1 sec and 60 seconds
respectively.

If the retransmission timeout is zero then the handshake will operate
in a non-blocking way, i.e., return @code{GNUTLS_E_AGAIN}.

@strong{ Since:} 3.0.0
@end deftypefun

@subheading gnutls_record_get_discarded
@anchor{gnutls_record_get_discarded}
@deftypefun {unsigned int} {gnutls_record_get_discarded} (gnutls_session_t @var{session})
@var{session}: is a @code{gnutls_session_t} structure.


@strong{ Description:} Returns the number of discarded packets in a
DTLS connection.

@strong{ Returns:} The number of discarded packets.

@strong{ Since:} 3.0.0
@end deftypefun

